<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PK&#39;s 回憶錄</title>
  
  <subtitle>學過的東西過段時間沒複習就會忘，所以請記錄下來</subtitle>
  <link href="https://pktseng.github.io/atom.xml" rel="self"/>
  
  <link href="https://pktseng.github.io/"/>
  <updated>2021-03-06T06:53:16.976Z</updated>
  <id>https://pktseng.github.io/</id>
  
  <author>
    <name>PKTseng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue - 組件化 ( 一 )</title>
    <link href="https://pktseng.github.io/2021/02/28/Vue-%E7%B5%84%E4%BB%B6%E4%B8%80/"/>
    <id>https://pktseng.github.io/2021/02/28/Vue-%E7%B5%84%E4%BB%B6%E4%B8%80/</id>
    <published>2021-02-27T16:00:00.000Z</published>
    <updated>2021-03-06T06:53:16.976Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>面對複雜問題的處裡的方式就是將問題分割，而將東西分這個方式在 Vue 裡面的化專業術語稱為組件化。</p><p>大概 10 年前吧，原本一個網頁是由一個 HTML、CSS、JavaScript 所組成的，但這樣在改動某個地方的時候會非常麻煩也會擔心會不會影響到網頁其他地方。後來出現了用 JavaScript 寫成的前端框架，將網頁內部切分成很多區塊，讓這些區塊內都有獨立的 HTML、CSS、JavaScript，這樣當某個區塊改動時就不必擔心會影響到網頁內其他區塊，也因為每個區塊都是獨立的所以重複利用，這也讓開發者大大的提升了開發效率。</p><p><a href="https://cn.vuejs.org/v2/guide/components.html">下圖來自官網</a><br><img src="https://i.imgur.com/KxbAXYc.png"></p><p>組件化的思想就是盡可能的把頁面拆分成很多個小區塊，變成可重複利用的組件。</p><a id="more"></a><h2 id="組件化開發"><a href="#組件化開發" class="headerlink" title="組件化開發"></a>組件化開發</h2><h3 id="1-組件化的基本使用"><a href="#1-組件化的基本使用" class="headerlink" title="1.組件化的基本使用"></a>1.組件化的基本使用</h3><p>在之前<a href="https://pktseng.github.io/2021/02/22/%E5%9F%BA%E6%9C%AC%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95/#%E4%B8%80%E3%80%81%E6%8F%92%E5%80%BC%E8%AA%9E%E6%B3%95">基本模板語法</a>提到用 mustache 語法可以顯示 <code>data</code> 物件內的 <code>value 值</code>，但如果有非常多重複的內容，這樣做不只可讀性差，也不好維護。用以下程式碼來示範。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message1}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{message2}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message1}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{message2}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message1}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{message2}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message1}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{message2}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message1: <span class="hljs-string">'title'</span>,</span><br><span class="line">    message2: <span class="hljs-string">'hello world'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/Ut7qry9.png"></p><p>這樣寫確實會顯示 4 個內容，但一樣的內容要寫 4 次才會呈現，而且有很冗長，這時就可以用組件的方式撰寫，可讀性也比較高。</p><p>以下示範如何組件化。</p><p><strong>分成三大步驟:</strong></p><ol><li>創造組件構造器 : <code>Vue.extend()</code></li><li>註冊組件 : <code>Vue.component()</code></li><li>使用組件 : <code>Vue 實例的使用範圍</code></li></ol><p>首先把重複性高的拉出來，如下圖，紅框處的重複性特別高，所以要獨立出來變成組件。<br><img src="https://i.imgur.com/HH2YDec.png"></p><h4 id="1-創造組件"><a href="#1-創造組件" class="headerlink" title="1. 創造組件"></a>1. 創造組件</h4><p>在 <code>Vue.extend</code> 組件裡面，它有個屬性是 <code>template</code> ，就是模板，在模板裡面的所有內容都是獨立且可重複利用的，把上圖紅框處放到模板裡面。再把 <code>Vue.extend()</code> 賦予到 <code>vm</code> 變數裡面，用變數是為了方便待會在註冊 ( component ) 的時候呼叫。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 創造組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="2-註冊組件"><a href="#2-註冊組件" class="headerlink" title="2. 註冊組件"></a>2. 註冊組件</h4><p>創造完要註冊，它需要兩個參數，第一個參數是 <code>模板的標籤名稱</code> 可以自訂義，第二個是 <code>創造組件的變數</code> 就是指上面的 <code>vm</code> ，寫法也非常簡單，如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 2.註冊組件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'模板的標籤名稱'</span>, 創造組件的變數)</span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn'</span>, vm)</span><br></pre></td></tr></tbody></table></figure><p>完整寫法:</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message1}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{message2}}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!--   &lt;h2&gt;{{message1}}&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-comment">  &lt;p&gt;{{message2}}&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">  &lt;h2&gt;{{message1}}&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-comment">  &lt;p&gt;{{message2}}&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-comment"></span></span><br><span class="line"><span class="hljs-comment">  &lt;h2&gt;{{message1}}&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-comment">  &lt;p&gt;{{message2}}&lt;/p&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 創造組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.註冊組件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn'</span>, vm)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message1: <span class="hljs-string">'title'</span>,</span><br><span class="line">    message2: <span class="hljs-string">'hello world'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/ZPBsCjR.png"></p><p>會發現在 <code>html</code> 上只要寫 <code>my-cpn</code> 標籤就可以顯示相同的內容，這就是組件化，之後如果想改動 <code>html</code> 的內容只要針對組件內的內容做改動就好，這樣不只增加可讀性同時也方便管理。</p><p>但要特別注意的是模板標籤必須寫在 <code>id='app'</code> 標籤裡面，寫在外面是不會被使用到的。</p><p><a href="https://codepen.io/gleofgja/pen/OJbQYwp?editors=1011">DEMO</a></p><blockquote><p><code>Vue.extend()</code> 在 Vue2.X 版以後就沒看到了，會示範也是因為這是必要的基礎觀念，之後的開發上就不會使用 <code>Vue.extend()</code> 而是使用語法糖的方式撰寫。</p></blockquote><h3 id="2-全域組件跟區域組件"><a href="#2-全域組件跟區域組件" class="headerlink" title="2. 全域組件跟區域組件"></a>2. 全域組件跟區域組件</h3><p>以上所寫的都是全域組件，全域就是可以在多個 Vue 實例裡面使用。<br>之前所寫的 Vue 實例只有一個，那可不可有兩個?<br>答案是 : 可以的! 但真實開發只會有一個，以下是為了釐清觀念所示範的。</p><p>再新增一個 Vue 實例 ( <code>id='app2'</code> )</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app2"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 創造組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.註冊組件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn'</span>, vm)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 新增一個實例 app2</span></span><br><span class="line"><span class="hljs-keyword">const</span> app2 = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app2'</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>一樣可以使用，如下圖<br><img src="https://i.imgur.com/K2bd97U.png"></p><p>用開發模式看，會看到 <code>app2</code> 也有用到全域組件<br><img src="https://i.imgur.com/9XXcTf0.png"></p><p>那要怎麼做才會變成區域組件?<br>方法很簡單，就是把 <code>Vue.component('my-cpn', vm)</code> 移到 Vue 實例裡面 ( 記得 component 要加 s )。<br>Vue 實例裡面新增 <code>components</code> 一個屬性，再給 <code>components</code> 屬性一個物件，裡面放 <code>key</code> 跟 <code>value</code> 值。</p><p>key 值指的是<code>自訂義模板的標籤名</code>， value 就是<code>組件的變數名稱</code>。</p><p>要特別注意的是 key 值的寫法，跟 HTML 模板標籤的寫法。<br>key 值的寫法分兩種:</p><ol><li>單字以減號-分離 ( Kebab Case ) <font color="#FF0000">必須加引號</font>。</li><li>駝峰式命名法 ( Camel Case )，<font color="#FF0000">加不加引號都可以</font>。</li></ol><p><font color="#FF0000">HTML 模板的組件標籤必須是 Kebab Case 寫法</font>。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el:<span class="hljs-string">'#app'</span>,</span><br><span class="line">  components:{</span><br><span class="line">    <span class="hljs-comment">// Kebab Case</span></span><br><span class="line">    <span class="hljs-string">'my-cpn'</span>: vm</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// Camel Case</span></span><br><span class="line">    myCpn: vm</span><br><span class="line">    <span class="hljs-string">'myCpn'</span>: vm</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>以下示範區域組件</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app2"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 創造組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;我是模板的:title&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;我是模板的:hello world&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.註冊組件</span></span><br><span class="line"><span class="hljs-comment">// Vue.component('my-cpn', vm)</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  components: {</span><br><span class="line">    <span class="hljs-comment">// 'my-cpn': vm</span></span><br><span class="line">    <span class="hljs-comment">// 'myCpn': vm</span></span><br><span class="line">    myCpn: vm,</span><br><span class="line">  },</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> app2 = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app2'</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>用開發者工具看，<code>app</code> 有在實例裡面註冊，所以可以使用，但 <code>app2</code> 不能，因為沒有在 <code>app2</code> 裡面註冊，所以不會解析 <code>my-cpn</code> 標籤。<br><img src="https://i.imgur.com/Gf58VOC.png"></p><p><a href="https://codepen.io/gleofgja/pen/mdOxOMJ?editors=1011">DEMO</a></p><p>以上就是區域組件的示範，在實戰開發上也是區域組件使用的最多，也只會有一個 Vue 實例。</p><h3 id="3-父子組件"><a href="#3-父子組件" class="headerlink" title="3. 父子組件"></a>3. 父子組件</h3><p>顧名思義就是組件裡面再放一層組件。</p><p>以下範例是創造一個 <code>vm2</code> 組件，再把 <code>vm1</code> 放到 <code>vm2</code> 裡面註冊，再到 Vue 實例裡面註冊 <code>vm2</code>。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 創造組件 vm1</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm1 = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;One&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 創造組件 vm2</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm2 = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;Two&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;Two Content&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;my-cpn1&gt;&lt;/my-cpn1&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">  <span class="hljs-comment">// 註冊組件 vm1</span></span><br><span class="line">  components: {</span><br><span class="line">    <span class="hljs-string">'my-cpn1'</span>: vm1,</span><br><span class="line">  },</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  <span class="hljs-comment">// 2.註冊組件</span></span><br><span class="line">  components: {</span><br><span class="line">    <span class="hljs-string">'my-cpn2'</span>: vm2,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>結果為下圖<br><img src="https://i.imgur.com/88UmUB0.png"></p><p>用開發者工具查看<br><img src="https://i.imgur.com/cd4p83b.png"></p><p>由上面案例可知 <code>vm2</code> 為父組件，<code>vm1</code> 為子組件。</p><p>當 HTML 再解析 <code>my-cpn2</code> 標籤的內容時，他會到 <code>vm2</code> 裡面解析模板的內容，而解析 <code>vm2</code> 模板的內容時又發現 <code>my-cpn1</code> 標籤，這時他會看看有沒有註冊 <code>my-cpn1</code> 的標籤，如果有找到它就會對應到 <code>vm1</code> 模板的內的內容，如果 <code>vm1</code> 裡面沒找到的話，它就會去全域組件找，如果全域還找不到就會報錯。</p><p>編譯好之後的模板如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 創造組件 vm2</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm2 = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;Two&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;Two Content&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">    &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;p&gt;One&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">     &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">  components: {</span><br><span class="line">    <span class="hljs-string">'my-cpn1'</span>: vm1,</span><br><span class="line">  },</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  <span class="hljs-comment">// 2.註冊組件</span></span><br><span class="line">  components: {</span><br><span class="line">    <span class="hljs-string">'my-cpn2'</span>: vm2,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>換個角度來說 Vue 實例也是一個父組件，只差沒寫 <code>template</code> 屬性。</p><p><a href="https://codepen.io/gleofgja/pen/bGBvWOr?editors=1011">DEMO</a></p><h3 id="4-註冊組件的語法糖"><a href="#4-註冊組件的語法糖" class="headerlink" title="4. 註冊組件的語法糖"></a>4. 註冊組件的語法糖</h3><blockquote><p>以上當我們再創造組件的時候所使用的 <code>Vue.extend()</code> 在 Vue 2.X 以後已經很少用了幾乎是不會再出現。</p></blockquote><p>一開始先用 <code>extend</code> 創造，再用 <code>component</code> 註冊。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 創造組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> vm1 = Vue.extend({</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;One&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2.註冊組件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn1'</span>, vm1)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>但我們可以把上面 <code>Vue.extend</code> 裡面的內容移到 <code>Vue.component</code> 裡面，如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 把 vm1 改成 extend 創造的物件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn1'</span>, {</span><br><span class="line">  template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">  &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;One&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">  &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>同理，可以在把 <code>Vue.component</code> 的內容移到 Vue 實例裡面，但 <code>component</code> 要記得加 <code>s</code> ，所以又可以再改寫一次，如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  components: {</span><br><span class="line">    <span class="hljs-string">'my-cpn1'</span>: {</span><br><span class="line">      template: <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">      &lt;div&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;h2&gt;One&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;p&gt;One&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">      `</span>,</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/rPU0m4Q.png"></p><p>這就是組件化的語法糖的最終版。</p><p>要特別注意的是除了<font color="#FF0000"> <code>component</code> 要加 <code>s</code> ， 逗號也要改成冒號。</font></p><p><a href="https://codepen.io/gleofgja/pen/oNYqwYx?editors=1011">DEMO</a></p><h3 id="5-組件模板的分離寫法"><a href="#5-組件模板的分離寫法" class="headerlink" title="5. 組件模板的分離寫法"></a>5. 組件模板的分離寫法</h3><p>在上一點註冊組件的語法糖中，最終寫法是將模板的資料寫到 Vue 實例裡面，但模板其實是可以寫到 HTML 裡面的，以下要講解的是比較簡單的分離寫法。</p><h4 id="script-標籤，屬性為-type-39-text-x-template-39"><a href="#script-標籤，屬性為-type-39-text-x-template-39" class="headerlink" title="script 標籤，屬性為 type='text/x-template'"></a>script 標籤，屬性為 <code>type='text/x-template'</code></h4><p>在 HTML 裡面創造 <code>script</code> 標籤，加上 <code>type='text/x-template'</code> 跟 一個 <code>id</code> ，id 是為了在註冊裡面綁定用的，寫法如下。</p><p>但要特別注意的是，在 <font color="#FF0000">模板裡面要記得加上 <code>div</code> 標籤。</font></p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- 在這裡創造一個模板 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/x-template"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vm1"</span>&gt;</span></span><br><span class="line"><span class="hljs-handlebars"><span class="hljs-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="hljs-handlebars"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="hljs-handlebars"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="hljs-handlebars"><span class="hljs-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 註冊 vm1 組件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn1'</span>, {</span><br><span class="line">  template: <span class="hljs-string">'#vm1'</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/LK9DGQH.png"></p><h4 id="template-標籤"><a href="#template-標籤" class="headerlink" title="template 標籤"></a>template 標籤</h4><p><code>template</code> 寫法會更好記，因為只需要寫 <code>template</code> 加上 <code>id</code> 就好。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- template 寫法 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vm1"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>Vue 實例跟上面一樣。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 註冊組件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn1'</span>, {</span><br><span class="line">  template: <span class="hljs-string">'#vm1'</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示效果跟上面一樣。<br><img src="https://i.imgur.com/VORlZ7y.png"></p><p>以上就是模板的分離寫法。</p><p><a href="https://codepen.io/gleofgja/pen/yLVKXRd?editors=1011">DEMO</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.bilibili.com/video/BV15741177Eh?p=57">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;簡介&quot;&gt;&lt;a href=&quot;#簡介&quot; class=&quot;headerlink&quot; title=&quot;簡介&quot;&gt;&lt;/a&gt;簡介&lt;/h2&gt;&lt;p&gt;面對複雜問題的處裡的方式就是將問題分割，而將東西分這個方式在 Vue 裡面的化專業術語稱為組件化。&lt;/p&gt;
&lt;p&gt;大概 10 年前吧，原本一個網頁是由一個 HTML、CSS、JavaScript 所組成的，但這樣在改動某個地方的時候會非常麻煩也會擔心會不會影響到網頁其他地方。後來出現了用 JavaScript 寫成的前端框架，將網頁內部切分成很多區塊，讓這些區塊內都有獨立的 HTML、CSS、JavaScript，這樣當某個區塊改動時就不必擔心會影響到網頁內其他區塊，也因為每個區塊都是獨立的所以重複利用，這也讓開發者大大的提升了開發效率。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/components.html&quot;&gt;下圖來自官網&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/KxbAXYc.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;組件化的思想就是盡可能的把頁面拆分成很多個小區塊，變成可重複利用的組件。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://pktseng.github.io/tags/Vue/"/>
    
    <category term="components" scheme="https://pktseng.github.io/tags/components/"/>
    
  </entry>
  
  <entry>
    <title>Vue 組件化 - data 函數</title>
    <link href="https://pktseng.github.io/2021/02/28/Vue-%E7%B5%84%E4%BB%B6%E5%8C%96-%E4%BA%8C/"/>
    <id>https://pktseng.github.io/2021/02/28/Vue-%E7%B5%84%E4%BB%B6%E5%8C%96-%E4%BA%8C/</id>
    <published>2021-02-27T16:00:00.000Z</published>
    <updated>2021-03-06T06:26:50.272Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>在上一篇 Vue 組件化 ( 一 ) 介紹了組件話的觀念跟應用，但沒提到組件話的資料應該要動態綁定，確保資料的獨立，所以這篇就來介紹一下組件話的 data ，</p><a id="more"></a><h2 id="Data-必須是函式"><a href="#Data-必須是函式" class="headerlink" title="Data 必須是函式"></a>Data 必須是函式</h2><p>在上一篇文章中提到組件話的模板，在模板內我都是直接寫值，並沒有用 mustache 語法來做動態綁定，原因是在子組件下的 data 必須是函數的形式，這樣才可以確保資料是獨立的。</p><p>之前的組件範例如下</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- template 寫法 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vm1"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">    //資料寫死</span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    //資料寫死</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 註冊組件</span></span><br><span class="line">Vue.component(<span class="hljs-string">'my-cpn1'</span>, {</span><br><span class="line">  template: <span class="hljs-string">'#vm1'</span>,</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3.使用組件</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在 <code>template</code> 模板裡面的資料，是寫死狀態，那改用 mustache 語法的話，會怎麼樣?</p><p>只改動 template 模板內容</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vm1"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{title}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在 Vue 實例裡面新 data 物件</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    title: <span class="hljs-string">'我是標題'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>用開發者工具看，會報錯，也提示 <code>title</code> 沒有被定義<br><img src="https://i.imgur.com/jeS56di.png"></p><p>這是因為組件內部是不能讀取 Vue 實例裡面的資料。<br>而子組件裡面有屬於自己的 HTML 模板，也應該有屬於自己的資料。</p><p>所以把上面組件內的 <code>data</code> 改成用函數的方式回傳，寫法也很簡單，<code>template</code> 內容一樣，只要在子組件裡面新增 <code>data</code> 函數的屬性並 <code>return</code> 物件內的值就好。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="hljs-string">'my-cpn1'</span>, {</span><br><span class="line">  template: <span class="hljs-string">'#vm1'</span>,</span><br><span class="line">  data() {</span><br><span class="line">    <span class="hljs-keyword">return</span> {</span><br><span class="line">      title: <span class="hljs-string">'我是組件內的標題'</span>,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>結果為下圖<br><img src="https://i.imgur.com/WOFiOtJ.png"></p><p>同樣道理，在把上式改寫成計數器的話</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn1</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn1</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- template 寫法 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"vm1"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{count}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"count++"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="hljs-string">'my-cpn1'</span>, {</span><br><span class="line">  template: <span class="hljs-string">'#vm1'</span>,</span><br><span class="line">  data() {</span><br><span class="line">    <span class="hljs-keyword">return</span> {</span><br><span class="line">      count: <span class="hljs-number">0</span>,</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>組件內的每筆資料也都是互相獨立的<br><img src="https://i.imgur.com/JDevASi.png"></p><p><a href="https://codepen.io/gleofgja/pen/YzpaRMx?editors=1011">DEMO</a></p><p>總結:<br>在 Vue 實例裡面，data 是物件。<br>在子組件裡面 data 必須以函數的方式回傳物件。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://book.vue.tw/CH2/2-1-components.html">子元件的 data 必須是函數</a><br><a href="https://www.bilibili.com/video/BV15741177Eh?p=59">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;介紹&quot;&gt;&lt;a href=&quot;#介紹&quot; class=&quot;headerlink&quot; title=&quot;介紹&quot;&gt;&lt;/a&gt;介紹&lt;/h2&gt;&lt;p&gt;在上一篇 Vue 組件化 ( 一 ) 介紹了組件話的觀念跟應用，但沒提到組件話的資料應該要動態綁定，確保資料的獨立，所以這篇就來介紹一下組件話的 data ，&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://pktseng.github.io/tags/Vue/"/>
    
    <category term="data 函數" scheme="https://pktseng.github.io/tags/data-%E5%87%BD%E6%95%B8/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 基本語法( 三 )</title>
    <link href="https://pktseng.github.io/2021/02/24/Vue%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%95(%20%E4%B8%89%20)/"/>
    <id>https://pktseng.github.io/2021/02/24/Vue%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%95(%20%E4%B8%89%20)/</id>
    <published>2021-02-23T16:00:00.000Z</published>
    <updated>2021-02-24T04:31:44.999Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>用 <code>v-if</code>、<code>v-show</code> 的條件判斷決定選染的內容。</p><a id="more"></a><h2 id="條件判斷"><a href="#條件判斷" class="headerlink" title="條件判斷"></a>條件判斷</h2><p>這指令可以根據表達式的值來判斷是否在 DOM 中渲染或是銷毀元素/組件。</p><p>寫法也很簡單，就跟 JavaScript 的 if 判斷式一樣。</p><h3 id="1-v-if"><a href="#1-v-if" class="headerlink" title="1. v-if"></a>1. v-if</h3><p>在 DOM 標籤中加入 v-if 判斷式來決定要不要顯示，該標籤內的內容。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"true"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/6iHmYbE.png"><br><code>v-if</code> 後面都是接一個布林值。<br>為了可以動態顯示將寫法改寫一下，將 <code>true</code> 改成一個變數。這樣就可以透過發發者工具來控制要不要顯示。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!--   &lt;h2 v-if='true'&gt;{{message}}&lt;/h2&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isShow"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    isShow: <span class="hljs-literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>改成 <code>false</code> 交看不到內容<br><img src="https://i.imgur.com/aYS5P2G.png"></p><p>改成 <code>true</code> 後又會顯示出來。<br><img src="https://i.imgur.com/1zsgsy1.png"></p><p><a href="https://codepen.io/gleofgja/pen/ZEBamEY?editors=1011">DEMO</a></p><h3 id="2-v-if-amp-v-else"><a href="#2-v-if-amp-v-else" class="headerlink" title="2. v-if &amp; v-else"></a>2. v-if &amp; v-else</h3><p><code>v-if</code> 很好理解，在 <code>true</code> 的狀況下就會顯示，在 <code>false</code> 的狀況下會顯示 <code>v-else</code> 內的內容。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isShow"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else</span>&gt;</span>{{elseMessage}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    elseMessage: <span class="hljs-string">'我是 v-else'</span>,</span><br><span class="line">    isShow: <span class="hljs-literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>原本是 <code>v-if</code> 判斷為 <code>true</code> 的狀況下顯示 <code>Hello World</code><br><img src="https://i.imgur.com/ROUJyD8.png"></p><p>那如過改成 <code>false</code> 就會顯示 <code>v-else</code> 的內容，如下圖<br><img src="https://i.imgur.com/YTOXJk7.png"></p><p><a href="https://codepen.io/gleofgja/pen/jOVaQWj?editors=1011">DEMO</a></p><h3 id="3-v-if-、-v-else-if-amp-v-else"><a href="#3-v-if-、-v-else-if-amp-v-else" class="headerlink" title="3. v-if 、 v-else-if &amp; v-else"></a>3. v-if 、 v-else-if &amp; v-else</h3><p>這寫法也很簡單，我們用分數來決定顯示的內容。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"score &gt;= 90"</span>&gt;</span>大於90分以上，頂標<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"score &gt;= 60 &amp;&amp; score &lt;= 89"</span>&gt;</span>介於60分以上，89分以下，均標<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else</span>=<span class="hljs-string">"score &lt;= 59 "</span>&gt;</span>低於59分以下，低標<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    score: <span class="hljs-number">90</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>因為 <code>score</code> 預設是 90 ，所以會顯示頂標<br><img src="https://i.imgur.com/ocoFVTp.png"></p><p>如果我把分數改成 80，顯示下圖<br><img src="https://i.imgur.com/P0oXUA1.png"></p><p>再把分數改成 50，顯示下圖<br>最後一次寫的是<code>app.score = 50</code> 所以會被覆蓋掉上面 80 分的<br><img src="https://i.imgur.com/L2WiuZr.png"></p><p><a href="https://codepen.io/gleofgja/pen/VwmrVbX?editors=1011">DEMO</a></p><h3 id="4-computed-寫法"><a href="#4-computed-寫法" class="headerlink" title="4. computed 寫法"></a>4. computed 寫法</h3><p>除了以上寫法還可以靈活使用上一篇文章提到的計算屬性 <code>computed</code>，如果只是 <code>v-if</code>、<code>v-else</code> 的話沒什麼關係，但如果有很多計算的話比較推薦使用 <code>computed</code> 寫法同時可以增強閱讀性。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"score &gt;= 90"</span>&gt;</span>大於90分以上，頂標<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">"score &gt;= 60 &amp;&amp; score &lt;= 89"</span>&gt;</span>介於60分以上，89分以下，均標<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else</span>=<span class="hljs-string">"score &lt;= 59 "</span>&gt;</span>低於59分以下，低標<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>computed : {{finalScore}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    score: <span class="hljs-number">90</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    finalScore() {</span><br><span class="line">      <span class="hljs-keyword">let</span> showMessage = <span class="hljs-string">''</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.score &gt;= <span class="hljs-number">90</span>) {</span><br><span class="line">        showMessage = <span class="hljs-string">'大於90分以上，頂標'</span></span><br><span class="line">      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.score &gt;= <span class="hljs-number">60</span> &amp;&amp; <span class="hljs-built_in">this</span>.score &lt;= <span class="hljs-number">89</span>) {</span><br><span class="line">        showMessage = <span class="hljs-string">'介於60分以上，89分以下，均標'</span></span><br><span class="line">      } <span class="hljs-keyword">else</span> {</span><br><span class="line">        showMessage = <span class="hljs-string">'低於59分以下，低標'</span></span><br><span class="line">      }</span><br><span class="line">      <span class="hljs-keyword">return</span> showMessage</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/psRgJbO.png"></p><p>將分數改成 80 ，顯示下圖<br><img src="https://i.imgur.com/1eJ0hNv.png"></p><p>再改成 50，顯示下圖<br>( 最後一次寫是 <code>app.score = 50</code> 所以會覆蓋掉 80 分 )<br><img src="https://i.imgur.com/Y2E6gHZ.png"></p><p><a href="https://codepen.io/gleofgja/pen/gOLXQXZ?editors=1011">DEMO</a></p><h3 id="5-條件渲染的實作"><a href="#5-條件渲染的實作" class="headerlink" title="5. 條件渲染的實作"></a>5. 條件渲染的實作</h3><p>在輸入使用者資料的時候可以切換使用者類型</p><p>利用 <code>v-if</code> 、<code>v-else</code> 來判斷我要顯示的內容，在切換的時候再用 <code>click</code> 判斷 <code>v-if</code> 接收到的值是 <code>true</code> 還是 <code>false</code>。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"isUser"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"username"</span>&gt;</span>使用者姓名: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"username"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"useremail"</span>&gt;</span>使用者信箱: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"mail"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"user-email"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"isUser = !isUser"</span>&gt;</span>切換類型<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    isUser: <span class="hljs-literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>透過點擊按鈕可以切換輸入框<br><img src="https://i.imgur.com/1z96aHx.png"></p><p><a href="https://codepen.io/gleofgja/pen/XWNzywe?editors=1011">DEMO</a></p><h3 id="6-v-show"><a href="#6-v-show" class="headerlink" title="6. v-show"></a>6. v-show</h3><p><code>v-show</code> 的用法也相當簡單，跟 <code>v-if</code> 的用法一樣，但是差別只在於 <font color="#FF0000">DOM</font> 的顯示。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"show"</span>&gt;</span>{{vIfShow}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"show"</span>&gt;</span>{{vShow}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"show = !show"</span>&gt;</span>切換類型<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    vIfShow: <span class="hljs-string">'v-if 顯示'</span>,</span><br><span class="line">    vShow: <span class="hljs-string">'v-show 顯示'</span>,</span><br><span class="line">    show: <span class="hljs-literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/8zJjbPk.png"></p><p>用開發者工具看到對應的 DOM，兩者在 <code>true</code> 的狀態下都會顯示<br><img src="https://i.imgur.com/Y0iDEsR.png"></p><p>兩者在 false 的狀態下，顯示下圖<br><img src="https://i.imgur.com/Bj3fkFK.png"></p><p>( 標註一下上上比較清楚 )<br><img src="https://i.imgur.com/6gMM3ZG.png"></p><p><a href="https://codepen.io/gleofgja/pen/JjbOwoZ?editors=1010">DMEO</a></p><p>結論:<br>兩個判斷皆為<font color="#FF0000"> <code>false</code> </font>時</p><ol><li><code>v-if</code> <font color="#FF0000">對應的 DOM 會消失</font>。</li><li><code>v-show</code> 的 <font color="#FF0000">DOM 不會消失</font>，它只是用了 css 效果的 <code>display: none</code>。</li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.bilibili.com/video/BV15741177Eh?p=36">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;用 &lt;code&gt;v-if&lt;/code&gt;、&lt;code&gt;v-show&lt;/code&gt; 的條件判斷決定選染的內容。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="v-if" scheme="https://pktseng.github.io/tags/v-if/"/>
    
    <category term="Vue" scheme="https://pktseng.github.io/tags/Vue/"/>
    
    <category term="v-show" scheme="https://pktseng.github.io/tags/v-show/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 基本語法( 二 )</title>
    <link href="https://pktseng.github.io/2021/02/23/Vue%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%952/"/>
    <id>https://pktseng.github.io/2021/02/23/Vue%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%952/</id>
    <published>2021-02-22T16:00:00.000Z</published>
    <updated>2021-02-23T09:19:53.415Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>在模板中可以直接使用插值語法顯示 data 中的資料，但是在某些狀況下有些資料還是要經過計算再顯示，或是多個資料結合或是重複顯示，這時候就會使用到 computed 計算屬性。</p><p>還有 v-on 監聽事件的修飾符跟實際應用。</p><a id="more"></a><h2 id="計算屬性-computed"><a href="#計算屬性-computed" class="headerlink" title="計算屬性 ( computed )"></a>計算屬性 ( computed )</h2><h3 id="1-計算屬性的基本使用"><a href="#1-計算屬性的基本使用" class="headerlink" title="1. 計算屬性的基本使用"></a>1. 計算屬性的基本使用</h3><p>之前有提到過 mustache 語法，可以簡單的顯示資料，如果一個資料沒什麼大礙，但有很多資料的話呢? 以下示範。</p><p><code>firstName</code> 跟 <code>LastName</code> 如果中間想有空格，會有兩種寫法，如下。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName +' '+ LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    LastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>會顯示下圖<br><img src="https://i.imgur.com/eW0GGIz.png"></p><p>那如果今天要顯示 5~10 個呢? 如下</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName +' '+ LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>這樣的話太長了，如果綁定的 key 值變更的話上面就要改 5 次，如果只需要改一次的話就會比較輕鬆，這時候有兩種方法可以使用 : methods 、 computed。</p><h4 id="一-methods-寫法"><a href="#一-methods-寫法" class="headerlink" title="( 一 ) methods 寫法"></a>( 一 ) methods 寫法</h4><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName +' '+ LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>methods 寫法 : {{getFullName()}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上面第 4 行比第 2、3 行簡潔多了。<br>把重複的動作寫成函式，再呼叫實例裡面的函式。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    LastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    getFullName() {</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.LastName</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>這樣就算 data 裡面的 key 值變更，也只要更改 methods 裡面的的 key 值，而且只改一次就全部完成。</p><p>顯示如下<br><img src="https://i.imgur.com/fPvACnw.png"></p><p><a href="https://codepen.io/gleofgja/pen/BaQwOqZ?editors=1011">DEMO</a></p><p>不過一般 mustache 語法裡面只通常只放變數，放函式感覺很奇怪，這時候就可以用 computed 。</p><h4 id="二-computed"><a href="#二-computed" class="headerlink" title="( 二 ) computed"></a>( 二 ) computed</h4><p>當資料裡面產生<font color="#FF0000">變化</font>的時候才會執行。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName +' '+ LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName}} {{LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!--   methods 有小括號，是函式 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>methods 寫法 : {{getFullName()}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!--   computed 沒有小括號，是變數 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>computed 寫法 : {{fullName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    LastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    fullName() {</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.LastName</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    getFullName() {</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.LastName</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示如下。<br><img src="https://i.imgur.com/eitEos0.png"></p><p><code>methods</code> 寫法會在 mustache 裡面加上小括號，那是一個函式，<br><code>computed</code> 寫法只會在 mustache 裡面放變數，不會有小括號。</p><p><a href="https://codepen.io/gleofgja/pen/mdOqbLp?editors=1010">DEMO</a></p><h3 id="2-計算屬性的複雜操作"><a href="#2-計算屬性的複雜操作" class="headerlink" title="2. 計算屬性的複雜操作"></a>2. 計算屬性的複雜操作</h3><p>計算陣列內的總價格</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Total Price : {{totalPrice}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    books: [</span><br><span class="line">      { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'html、css 書籍'</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">110</span> },</span><br><span class="line">      { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'JavaScript 書籍'</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">220</span> },</span><br><span class="line">      { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'Vue 書籍'</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">330</span> },</span><br><span class="line">      { <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'React 書籍'</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">440</span> },</span><br><span class="line">    ],</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    totalPrice() {</span><br><span class="line">      <span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span></span><br><span class="line">      <span class="hljs-comment">// for( let i=0; i&lt; this.books.length; i++){</span></span><br><span class="line">      <span class="hljs-comment">//   total+= this.books[i].price</span></span><br><span class="line">      <span class="hljs-comment">// }</span></span><br><span class="line">      <span class="hljs-comment">// return total</span></span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// for in 寫法</span></span><br><span class="line">      <span class="hljs-comment">// for( let i in this.books){</span></span><br><span class="line">      <span class="hljs-comment">//   total+= this.books[i].price</span></span><br><span class="line">      <span class="hljs-comment">// }</span></span><br><span class="line">      <span class="hljs-comment">// return total</span></span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// for of 寫法</span></span><br><span class="line">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> book <span class="hljs-keyword">of</span> <span class="hljs-built_in">this</span>.books) {</span><br><span class="line">        total += book.price</span><br><span class="line">      }</span><br><span class="line">      <span class="hljs-keyword">return</span> total</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/xR6WUEd.png"></p><p><a href="https://codepen.io/gleofgja/pen/qBqVWLr?editors=1010">DEMO</a></p><h3 id="3-計算屬性的-setter-amp-getter"><a href="#3-計算屬性的-setter-amp-getter" class="headerlink" title="3. 計算屬性的 setter &amp; getter"></a>3. 計算屬性的 setter &amp; getter</h3><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName + ' ' + lastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/mqO38pT.png"></p><p>由於用 mustache 語法寫的話太複雜了，加上如果要重複利用的話有太冗長，所以都會使用 computed 計算屬性。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName + ' ' + LastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>對應 computed 寫法: {{fullName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    fullName() {</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.lastName</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/voadrLG.png"></p><p>就跟上面所寫的一樣，不過接下來要加上 get &amp; set 屬性，這才是 computed 屬性的完整寫法。</p><p>如果沒有 set 方法的話都是默認 get 方法的值，也就是<font color="#FF0000">只讀屬性</font>。<br>例如我只在 get 方法裡面返回 hello 字串。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// html 模板一樣</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    <span class="hljs-comment">// fullName(){</span></span><br><span class="line">    <span class="hljs-comment">//   return this.firstName+ ' '+ this.LastName</span></span><br><span class="line">    <span class="hljs-comment">// }</span></span><br><span class="line">    fullName: {</span><br><span class="line">      set() {},</span><br><span class="line">      get() {</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">'hello'</span></span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/CXbFJLV.png"></p><p>一般情況下我們只會用到 get 方法，不會使用到 set 方法，因為不希望別人隨便設定一些奇怪的值，寫法如下。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    fullName: {</span><br><span class="line">      get() {</span><br><span class="line">        <span class="hljs-comment">// return 'hello'</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.lastName</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/QbBmqZq.png"></p><p>也因為一般情況下都會使用到 get 方法，所以上面的寫法會簡化成最一開始的寫法。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    fullName() {</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.lastName</span><br><span class="line">    },</span><br><span class="line">    <span class="hljs-comment">// fullName:{</span></span><br><span class="line">    <span class="hljs-comment">// set(){</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// },</span></span><br><span class="line">    <span class="hljs-comment">// get(){</span></span><br><span class="line">    <span class="hljs-comment">// return 'hello'</span></span><br><span class="line">    <span class="hljs-comment">// return this.firstName+ ' '+ this.lastName</span></span><br><span class="line">    <span class="hljs-comment">// }</span></span><br><span class="line">    <span class="hljs-comment">// }</span></span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/AHOs9WN.png"></p><p>所以當我們在使用 computed 屬性時， mustache 語法裡面就不需要家小括號，因為在使用 computed 屬性時他會去調用 <code>computed</code> 裡面的 <code>get</code>。</p><p>那如果真想要在 computed 裡面加上 set 的話也可以。<br>在 set 方法裡面必須傳入參數。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{fullName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    <span class="hljs-comment">// fullName(){</span></span><br><span class="line">    <span class="hljs-comment">//   return this.firstName+ ' '+ this.LastName</span></span><br><span class="line">    <span class="hljs-comment">// }</span></span><br><span class="line">    fullName: {</span><br><span class="line">      set(newValue) {</span><br><span class="line">        <span class="hljs-keyword">const</span> names = newValue.split(<span class="hljs-string">' '</span>)</span><br><span class="line">        <span class="hljs-built_in">this</span>.firstName = names[<span class="hljs-number">0</span>]</span><br><span class="line">        <span class="hljs-built_in">this</span>.lastName = names[<span class="hljs-number">1</span>]</span><br><span class="line">      },</span><br><span class="line">      get() {</span><br><span class="line">        <span class="hljs-comment">// return 'hello'</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.lastName</span><br><span class="line">      },</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在還沒 set 之前顯示下圖<br><img src="https://i.imgur.com/tCcyaJ6.png"></p><p>還沒更改前是 Lebron Jamse ，用開發者工具使用更改 <code>fullName</code> 之後如下圖<br><img src="https://i.imgur.com/h2NFSD7.png"></p><p>會改變的原因是更改了 <code>data</code> 裡面的 <code>firstName</code> &amp; <code>lastName</code> 這兩個更改就代表 <code>get</code> 方法裡面的 <code>this.firstName+ ' '+ this.lastName</code> 也會跟著更改，那<code>this.firstName+ ' '+ this.lastName</code> 更改就代表 <code>fullName</code> 被更改了。</p><p>總結一下，90%情況下 set 方法是不會寫的所以會省略掉，那省略掉後就會有更簡潔的寫法，如下。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    firstName: <span class="hljs-string">'Lebron'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'Jamse'</span>,</span><br><span class="line">  },</span><br><span class="line">  computed: {</span><br><span class="line">    fullName() {</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-built_in">this</span>.LastName</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/WNoXbpj?editors=1011">DEMO</a></p><h2 id="監聽事件"><a href="#監聽事件" class="headerlink" title="監聽事件"></a>監聽事件</h2><h3 id="1-v-on"><a href="#1-v-on" class="headerlink" title="1. v-on"></a>1. v-on</h3><p>監聽是前端在開發時常常用到的屬性，主要是監聽事件的發生，例如:滑鼠點擊、拖曳、鍵盤點擊…等等。</p><p>那在 Vue 當中監聽事件的語法為 <code>v-on</code> ，語法糖為 <code>@</code>。</p><p>以下示範用監聽滑鼠點擊來做一個簡單的計數器</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{count}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"add"</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"minus"</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    count: <span class="hljs-number">0</span>,</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    add() {</span><br><span class="line">      <span class="hljs-built_in">this</span>.count++</span><br><span class="line">    },</span><br><span class="line">    minus() {</span><br><span class="line">      <span class="hljs-built_in">this</span>.count--</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>利用間聽 click 事件來判斷當前要做的事。<br>當我們點擊 + 號按鈕的時候用 v- on 監聽同時綁定 add 事件，那 add 事件會綁定到 methods 裡面的函式，同理 - 號按鈕也一樣。<br><img src="https://i.imgur.com/USHnefS.png"></p><p><a href="https://codepen.io/gleofgja/pen/OJbOVKa?editors=1011">DEMO</a></p><p>以上皆為 v-on 最基本的使用。接下來要示範傳參數的問題。</p><h3 id="2-v-on-參數問題"><a href="#2-v-on-參數問題" class="headerlink" title="2. v-on 參數問題"></a>2. v-on 參數問題</h3><p>在 methods 觸發 click 事件的時候，要注意傳參數的問題。</p><ol><li>如果不需要另外傳參數的話，那方法後面的小括號就甭加。</li><li>如果需要傳入參數，同時又需要 event 這時就可以用 <code>$event</code> 傳到事件裡面。</li></ol><h4 id="一-事件不傳參數"><a href="#一-事件不傳參數" class="headerlink" title="( 一 )事件不傳參數"></a>( 一 )事件不傳參數</h4><p>以下示範在沒傳參數的情況下小括號加與不加的差別。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn1()"</span>&gt;</span>按鈕1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn2"</span>&gt;</span>按鈕2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {},</span><br><span class="line">  methods: {</span><br><span class="line">    btn1() {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是按鈕1，有小括號'</span>)</span><br><span class="line">    },</span><br><span class="line">    btn2() {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是按鈕2，沒有小括號'</span>)</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>如下圖，結果是一樣的，所以在沒傳入參數的話一般都會省略小括號。<br><img src="https://i.imgur.com/rK9e5za.png"></p><p><a href="https://codepen.io/gleofgja/pen/yLVPYWb?editors=1011">DEMO</a></p><h4 id="二-定義事件，模板省略的小括號，但是-methods-本身需要傳入一個參數。"><a href="#二-定義事件，模板省略的小括號，但是-methods-本身需要傳入一個參數。" class="headerlink" title="( 二 ) 定義事件，模板省略的小括號，但是 methods 本身需要傳入一個參數。"></a>( 二 ) 定義事件，模板省略的小括號，但是 methods 本身需要傳入一個參數。</h4><p>把按鈕 2 的參數拿掉，用 methods 傳入參數的話怎麼樣?</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn1(123)"</span>&gt;</span>按鈕1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn2"</span>&gt;</span>按鈕2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {},</span><br><span class="line">  methods: {</span><br><span class="line">    btn1(abc) {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是按鈕1，有小括號'</span>, abc)</span><br><span class="line">    },</span><br><span class="line">    btn2(abc) {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是按鈕2，沒有小括號'</span>, abc)</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>如下圖，用開發者工具看 log<br><img src="https://i.imgur.com/nuTivWl.png"></p><p>點擊 按鈕 1 會正常出現，但是 按鈕 2 要用瀏覽器的開發者工具查看<br><img src="https://i.imgur.com/49MfVdV.png"></p><p>會回傳 MouseEvent ，就是回傳瀏覽器的 event ，因為 Vue 會把默認瀏覽器產生的 event 事件當作參數傳到函式裡面。</p><p>所以按鈕 2 的參數要寫 <code>event</code> 不是 <code>abc</code> 。</p><p><a href="https://codepen.io/gleofgja/pen/dyOZYxa?editors=1011">DEMO</a></p><h4 id="三-定義函式時，需要傳入參數跟-event"><a href="#三-定義函式時，需要傳入參數跟-event" class="headerlink" title="( 三 ) 定義函式時，需要傳入參數跟 event"></a>( 三 ) 定義函式時，需要傳入參數跟 event</h4><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn1(123, event)"</span>&gt;</span>按鈕1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {},</span><br><span class="line">  methods: {</span><br><span class="line">    btn1(abc, event) {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是按鈕1，有小括號'</span>, abc, event)</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/SLBqBB9.png"></p><p>不過傳入的第一個參數是數字型別，如果改成 abc 的話就會報錯，如下圖<br><img src="https://i.imgur.com/7w7itVd.png"></p><p>因為改成 abc 後第一個參數就是<font color="#FF0000">變數</font>了，所以他會去 <code>data</code> 裡面找 value 值</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!--   &lt;button @click='btn1(123, $event)'&gt;按鈕1&lt;/button&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"btn1(abc, $event)"</span>&gt;</span>按鈕1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在 <code>data</code> 裡面添加 <code>abc</code> 的 <code>value</code> 值。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    abc: <span class="hljs-string">'第一個參數變成變數了'</span>,</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    btn1(abc, event) {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是按鈕1，傳入兩個參數'</span>, abc, event)</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>這樣就可以正常顯示了。<br>同理第一個參數改成字串，那他就會顯示字串!<br><img src="https://i.imgur.com/LsK9vBj.png"></p><p><a href="https://codepen.io/gleofgja/pen/bGBYErg?editors=1011">DEMO</a></p><h3 id="3-v-on-修飾符"><a href="#3-v-on-修飾符" class="headerlink" title="3. v-on 修飾符"></a>3. v-on 修飾符</h3><p>在 JavaScript 裡面，都會監聽一些事件，例如 submit<br>但是我們都會用 event.preventDefault() 來阻擋事件冒泡，同理 v-on 也可以。<br>寫法也較為簡單:</p><ol><li><code>event.stopPropagation()</code> 會寫成 <code>.stop</code></li><li><code>event.preventDefault()</code> 會寫成 <code>.prevent</code></li><li>只觸發一次 <code>.once</code></li><li>只監聽特定按鍵，如:<code> @keyup.enter</code> 、 <code>@keyup.按鍵碼</code></li></ol><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.bilibili.com/video/BV15741177Eh?p=14">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a><br><a href="https://ithelp.ithome.com.tw/articles/10198999">[筆記][JavaScript]所謂的「停止事件」到底是怎麼一回事？</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;在模板中可以直接使用插值語法顯示 data 中的資料，但是在某些狀況下有些資料還是要經過計算再顯示，或是多個資料結合或是重複顯示，這時候就會使用到 computed 計算屬性。&lt;/p&gt;
&lt;p&gt;還有 v-on 監聽事件的修飾符跟實際應用。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    <category term="computed" scheme="https://pktseng.github.io/categories/Vue/computed/"/>
    
    <category term="v-on" scheme="https://pktseng.github.io/categories/Vue/computed/v-on/"/>
    
    
    <category term="v-on" scheme="https://pktseng.github.io/tags/v-on/"/>
    
    <category term="Vue" scheme="https://pktseng.github.io/tags/Vue/"/>
    
    <category term="computed" scheme="https://pktseng.github.io/tags/computed/"/>
    
  </entry>
  
  <entry>
    <title>Vue - MVVM 簡介</title>
    <link href="https://pktseng.github.io/2021/02/22/mvvm/"/>
    <id>https://pktseng.github.io/2021/02/22/mvvm/</id>
    <published>2021-02-21T16:00:00.000Z</published>
    <updated>2021-02-22T16:03:44.104Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>MVVM 是由 Model、View 跟 ViewModel 這三個東西之間的作用，可以比較好管理開發者的內容。</p><a id="more"></a><ul><li>Model：管理資料來源如 API 和本地資料庫</li><li>View：顯示 UI 和接收使用者動作</li><li>ViewModel：從 Model 取得 View 所需的資料</li></ul><p><img src="https://i.imgur.com/KBZjJJN.png"></p><p>使用者透過 view 操作來影響 view model ，只要在 view 裡面操做， view model 同時也會跟著變動，同時也修改 model 的內容，那 view model 資料發生變動，又會同時改變 View 顯示的內容，所以他們三個是互相交互作用的。</p><p>Vue 強大的地方在於 Vue 組件，他可以把龐大的 App 分裝，把相關的功能集中，讓這些組件獨立封裝而且好維護也好測試。</p><p><img src="https://i.imgur.com/u71Nukr.png"></p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://hiskio.com/courses/145">精通 VueJS 前端開發完全指南</a><br><a href="https://ithelp.ithome.com.tw/articles/10192829">MVVM 架構</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;介紹&quot;&gt;&lt;a href=&quot;#介紹&quot; class=&quot;headerlink&quot; title=&quot;介紹&quot;&gt;&lt;/a&gt;介紹&lt;/h2&gt;&lt;p&gt;MVVM 是由 Model、View 跟 ViewModel 這三個東西之間的作用，可以比較好管理開發者的內容。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="MVVM" scheme="https://pktseng.github.io/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>Vue - 基本語法( 一 )</title>
    <link href="https://pktseng.github.io/2021/02/22/%E5%9F%BA%E6%9C%AC%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95/"/>
    <id>https://pktseng.github.io/2021/02/22/%E5%9F%BA%E6%9C%AC%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95/</id>
    <published>2021-02-21T16:00:00.000Z</published>
    <updated>2021-03-03T03:48:44.984Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>簡單介紹 Vue 模板基本語法的使用，包含 : <code>v-bind</code>、<code>mustache</code> 、<code>v-once</code>、<code>v-html</code>、<code>v-text</code> …等等。<br>以下範例皆使用 Vue 2.6.1 版本。</p><a id="more"></a><h2 id="一、插值語法"><a href="#一、插值語法" class="headerlink" title="一、插值語法"></a>一、插值語法</h2><h3 id="1-mustache"><a href="#1-mustache" class="headerlink" title="1. mustache"></a>1. mustache</h3><p>在 <code>html</code> 模板中插入 <code>mustache</code> 語法。<br>以下為官方文件的案例。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">' hello world'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/WNoZzEv?editors=1010">codePen</a></p><h4 id="表達式"><a href="#表達式" class="headerlink" title="表達式"></a>表達式</h4><p>mustache 不只可以寫簡單的變數，還可以寫出簡單的表達式。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  {{message}}</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!--   以下示範簡單的表達式 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{firstName + lastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!--   由於中間名字黏在一起不好看，所以中間加入空格，寫法有兩種 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>第一種: {{firstName +' '+ lastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>第二種: {{firstName}} {{lastName}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!--   計算 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>計算: {{count * 2}}<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">' hello world'</span>,</span><br><span class="line">    firstName: <span class="hljs-string">'Tseng'</span>,</span><br><span class="line">    lastName: <span class="hljs-string">'ken'</span>,</span><br><span class="line">    count: <span class="hljs-number">100</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/MrHyWSW.png"></p><p><a href="https://codepen.io/gleofgja/pen/QWGqmmN?editors=1010">codePen</a></p><h3 id="2-v-once"><a href="#2-v-once" class="headerlink" title="2. v-once"></a>2. v-once</h3><p>這項指令後面不需要填寫任何表達式，而且這指令只會渲染元素或是組件一次，並且不會隨資料改變而改變。</p><p>一樣使用官方案例</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">' hello world'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>但是我們只要在開發者模式下更改 message 變數的資料，裡面的值就會更著改變，如下圖<br><img src="https://i.imgur.com/PLWWSOK.png"></p><p>但是加上 <code>v-once</code> 語法</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-once</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- JS 一樣不變 --&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然後用更改 <code>message</code> 裡面的資料，如下圖<br><img src="https://i.imgur.com/rIForuj.png"><br>可以看到沒有加上<code> v-once</code> 語法的 <code>message</code> 被改變的，而加上 <code>v-once</code> 的沒有被改變。</p><p><a href="https://codepen.io/gleofgja/pen/vYyejBo?editors=1011">Demo</a></p><h3 id="3-v-html"><a href="#3-v-html" class="headerlink" title="3. v-html"></a>3. v-html</h3><p>有時候在 <code>data</code> 資料裡面會有涵蓋標籤的語法。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>{{url}}<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">' hello world'</span>,</span><br><span class="line">    url: <span class="hljs-string">'&lt;a href="https://www.google.com"&gt;Google&lt;/a&gt;'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在這樣的狀況下會顯示<br><img src="https://i.imgur.com/nvAXbQi.png"></p><p>要正常顯示就要加上 <code>v-html</code>，意思是要以 <code>html</code> 的型式展示</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>{{url}}<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">"url"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>這樣就可以正常顯示了<br><img src="https://i.imgur.com/ExiDSjs.png"></p><p>不過這指令要小心，因為有很大的機會會有 XSS 攻擊，比較不推薦此種寫法。</p><p><a href="https://codepen.io/gleofgja/pen/MWbEGeQ?editors=1011">DEMO</a></p><h3 id="4-v-text"><a href="#4-v-text" class="headerlink" title="4. v-text"></a>4. v-text</h3><p>一樣使用官網的案例</p><p>之前都是用 <code>mustache</code> 顯示 <code>message</code> 的值，同樣的方式是在標籤上面加上 <code>v-text</code> 不需要 <code>mustache</code> 也一樣可以顯示</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">"message"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>如下圖<br><img src="https://i.imgur.com/Qn8MkXU.png"></p><p>但是這種寫法比較不靈活，如果我們想在後面加入一些字</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>{{message}}，你好啊!!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">"message"</span>&gt;</span>，你好啊!!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><code>v-text</code> 會直接覆蓋掉標籤裡面的值，如下圖<br><img src="https://i.imgur.com/B0RNWmX.png"></p><p><a href="https://codepen.io/gleofgja/pen/ZEBXoaj?editors=1011">DEMO</a></p><h2 id="二、動態綁定"><a href="#二、動態綁定" class="headerlink" title="二、動態綁定"></a>二、動態綁定</h2><p>在現代網頁中的每個連結或是圖片都是用動態來顯示的，不是寫死的。</p><h3 id="1-v-bind"><a href="#1-v-bind" class="headerlink" title="1. v-bind"></a>1. v-bind</h3><p>可以動態綁定</p><ul><li><code>a</code> 元素的 <code>href</code></li><li><code>img</code> 元素的 <code>src</code></li></ul><blockquote><p>因為之後會大量使用，所以 v-bind 的語法糖為 “ : “ (冒號)</p></blockquote><p>以前最一開始的寫法是直接在 img 標籤上寫入網址，如下</p><p><a href="https://cn.vuejs.org/index.html">(圖片來自官網)</a></p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  {{message}}</span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cn.vuejs.org/images/logo.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>顯示如下<br><img src="https://i.imgur.com/a0QQsSp.png"></p><p>但是現在要動態的方式顯示，寫法如下:<br>給 <code>src</code> 屬性動態綁定(v-bind) <code>imgUrl</code>，一旦綁定後 <code>imgUrl</code> 就是<font color="#FF0000">變數</font>!!那這變數就會去 vue 實例裡面找他的 <code>value</code> 值，再把 <code>value</code> 值放交給 <code>src</code> 。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  {{message}}</span><br><span class="line">  <span class="hljs-comment">&lt;!--   &lt;img src="https://cn.vuejs.org/images/logo.png" alt=""&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"imgUrl"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    imgUrl: <span class="hljs-string">'https://cn.vuejs.org/images/logo.png'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>顯示的效果跟上圖是一樣的。</p><hr><p>同樣的換成 <code>a</code> 連結型式</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!-- 命令式 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.google.com/"</span>&gt;</span>寫死的 Google<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!-- 聲明式 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">"linkUrl"</span>&gt;</span>動態綁定的Google<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    linkUrl: <span class="hljs-string">'https://www.google.com/'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>雖然顯示結果是一樣的，但在開發網頁的時候不可能把所有連結都寫死在標籤上，而是透過後端伺服器請求資料然後<font color="#FF0000">動態綁定</font>在標籤上。<br><img src="https://i.imgur.com/SAeBZzc.png"></p><p><a href="https://codepen.io/gleofgja/pen/poNWVYO?editors=1011">DEMO</a></p><h3 id="2-v-bind-綁定-className"><a href="#2-v-bind-綁定-className" class="headerlink" title="2. v-bind 綁定 className"></a>2. v-bind 綁定 className</h3><p>上面講完基本<font color="#FF0000">連結</font>的動態綁定，接下來要講<font color="#FF0000"> className </font>的用動態綁定。</p><p>如果想在某個 className 上加點屬性，從最原始寫法到進階動態綁定的寫法，如下</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!-- 最原始的 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"active"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">&lt;!-- 動態綁定一 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"active"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>除了以上兩種，再來要綁<font color="#FF0000">物件型式</font>的，在 class 後面要綁定的是一個<font color="#FF0000">物件</font>，寫法跟對應的值都寫在下面程式碼裡面。</p><p>當 <code>className</code> 被判斷為 <code>true</code> 的時候，那 <code>className</code> 的屬性就會被加到 <code>class</code> 裡面，這樣就可以透過控制布林值來決定要不要顯示。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!--&lt;h2 :class='{key1: value1, key2: value2}'&gt;{{message}}&lt;/h2&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!--&lt;h2 :class='{className1: 布林值1, className2: 布林值2}'&gt;{{message}}&lt;/h2&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"{active: true, line: false}"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-css">  <span class="hljs-selector-class">.active</span> {</span></span><br><span class="line">    color: red;</span><br><span class="line">  }</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/Qk3OWBc.png"><br><img src="https://i.imgur.com/wAf31lb.png"><br>如上圖一旦屬性判斷為 true 的時候就顯示。</p><p>但是布林值不可能寫在標籤上面，必須要動態綁定。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"{active: isActive, line: isLine}"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    isActive: <span class="hljs-literal">true</span>,</span><br><span class="line">    isLine: <span class="hljs-literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>如果兩個都為 <code>true</code> 就同時看到兩個 class ( <code>active</code> &amp; <code>line</code> )。<br><img src="https://i.imgur.com/R9k1xtb.png"></p><p>但是現在我可以透過開發者工具來控制。<br><img src="https://i.imgur.com/0SVyrVT.png"><br><code>isLine</code> 變成 <code>false</code> 後就不會顯示了。<br><img src="https://i.imgur.com/NCPMv0k.png"></p><p>不過這樣控制顯示結果也點不對，總不可能叫使用者去開發者工具那邊更改吧，所以這例稍微超前一下要用 v-on 來做切換，它是一個監聽的指令。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">"{active: isActive, line: isLine}"</span>&gt;</span>{{message}}<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"change"</span>&gt;</span>Change<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  data: {</span><br><span class="line">    message: <span class="hljs-string">'Hello World'</span>,</span><br><span class="line">    isActive: <span class="hljs-literal">true</span>,</span><br><span class="line">    isLine: <span class="hljs-literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    change() {</span><br><span class="line">      <span class="hljs-built_in">this</span>.isActive = !<span class="hljs-built_in">this</span>.isActive</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>這樣就可以用按鈕來做動態切換了。<br><img src="https://i.imgur.com/Nodj8p7.png"></p><p><a href="https://codepen.io/gleofgja/pen/xxRXzyg?editors=1011">DEMO</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.bilibili.com/video/BV15741177Eh?p=14">2019 年最全最新 Vue、Vuejs 教程，从入门到精通</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;簡單介紹 Vue 模板基本語法的使用，包含 : &lt;code&gt;v-bind&lt;/code&gt;、&lt;code&gt;mustache&lt;/code&gt; 、&lt;code&gt;v-once&lt;/code&gt;、&lt;code&gt;v-html&lt;/code&gt;、&lt;code&gt;v-text&lt;/code&gt; …等等。&lt;br&gt;以下範例皆使用 Vue 2.6.1 版本。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="v-bind" scheme="https://pktseng.github.io/categories/v-bind/"/>
    
    <category term="mustache" scheme="https://pktseng.github.io/categories/v-bind/mustache/"/>
    
    <category term="v-once" scheme="https://pktseng.github.io/categories/v-bind/mustache/v-once/"/>
    
    <category term="v-html" scheme="https://pktseng.github.io/categories/v-bind/mustache/v-once/v-html/"/>
    
    <category term="v-text" scheme="https://pktseng.github.io/categories/v-bind/mustache/v-once/v-html/v-text/"/>
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/v-bind/mustache/v-once/v-html/v-text/Vue/"/>
    
    
    <category term="Vue" scheme="https://pktseng.github.io/tags/Vue/"/>
    
    <category term="v-bind" scheme="https://pktseng.github.io/tags/v-bind/"/>
    
    <category term="mustache" scheme="https://pktseng.github.io/tags/mustache/"/>
    
    <category term="v-once" scheme="https://pktseng.github.io/tags/v-once/"/>
    
    <category term="v-html" scheme="https://pktseng.github.io/tags/v-html/"/>
    
    <category term="v-text" scheme="https://pktseng.github.io/tags/v-text/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 實作 - 拖曳效果</title>
    <link href="https://pktseng.github.io/2021/02/08/dragdrop/"/>
    <id>https://pktseng.github.io/2021/02/08/dragdrop/</id>
    <published>2021-02-07T16:00:00.000Z</published>
    <updated>2021-03-02T06:21:45.729Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述:"></a>功能描述:</h2><ol><li>刷新頁面打亂排列順序。</li><li>可以拖曳方塊排列順序。</li><li>確認排列順序是否正確。</li></ol><p><img src="https://i.imgur.com/1xYdtS0.png"></p><p><a href="https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission30">Github</a><br><a href="https://pktseng.github.io/Web-Side-Project/mission30/index.html">Demo</a></p><a id="more"></a><h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>苗栗國必去前10名景點<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>請利用拖曳排列出這10名的順序<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"draggable-list"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"draggable-list"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"check-btn"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"check-btn"</span>&gt;</span></span><br><span class="line">  Check Attractions</span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fas fa-paper-plane"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>拖曳方塊不能寫死，因為每次刷新頁面順序會打亂，打亂的順序排名用 javascript 撰寫。</p><h2 id="CSS-樣式"><a href="#CSS-樣式" class="headerlink" title="CSS 樣式"></a>CSS 樣式</h2><p>拖曳的時候會呈現色差</p><figure class="highlight css hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.draggable-list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.over</span> <span class="hljs-selector-class">.draggable</span> {</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#eaeaea</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>用顏色確認目前排列順序是否正確。</p><figure class="highlight css hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.draggable-list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.right</span> <span class="hljs-selector-class">.person-name</span> {</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#3ae374</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.draggable-list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.wrong</span> <span class="hljs-selector-class">.person-name</span> {</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff3838</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>按鈕縮放效果</p><figure class="highlight css hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.check-btn</span><span class="hljs-selector-pseudo">:active</span> {</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.98</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>點擊按鈕不要有邊框線條</p><figure class="highlight css hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.check-btn</span><span class="hljs-selector-pseudo">:focus</span> {</span><br><span class="line">  <span class="hljs-attribute">outline</span>: none;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="1-綁定-DOM-，給初始值"><a href="#1-綁定-DOM-，給初始值" class="headerlink" title="1. 綁定 DOM ，給初始值"></a>1. 綁定 DOM ，給初始值</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> draggableList = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#draggable-list'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> checkBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#check-btn'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> attractions = [</span><br><span class="line">  <span class="hljs-string">'客家大院'</span>,</span><br><span class="line">  <span class="hljs-string">'後龍鎮半天寮休閒文化園區 - 好望角'</span>,</span><br><span class="line">  <span class="hljs-string">'天空之城'</span>,</span><br><span class="line">  <span class="hljs-string">'九華山 天空步道'</span>,</span><br><span class="line">  <span class="hljs-string">'苗栗客家圓樓'</span>,</span><br><span class="line">  <span class="hljs-string">'雅聞七里香玫瑰森林'</span>,</span><br><span class="line">  <span class="hljs-string">'龍騰斷橋(魚藤坪斷橋)'</span>,</span><br><span class="line">  <span class="hljs-string">'飛牛牧場'</span>,</span><br><span class="line">  <span class="hljs-string">'銅鑼炮仗花海公園'</span>,</span><br><span class="line">  <span class="hljs-string">'舊銅鑼隧道'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> dragStartIndex</span><br><span class="line"><span class="hljs-keyword">const</span> listItems = []</span><br></pre></td></tr></tbody></table></figure><h3 id="2-產生-DOM-並呈現在畫面上"><a href="#2-產生-DOM-並呈現在畫面上" class="headerlink" title="2. 產生 DOM 並呈現在畫面上"></a>2. 產生 DOM 並呈現在畫面上</h3><blockquote><p>展開運算符 ( Spread Operator ) :<br>是把一個陣列展開成個別值，這個運算符後面必定接著一個陣列。<br>最常見的是用來組合 ( 連接 ) 陣列。</p></blockquote><blockquote><p>其餘運算符 ( Rest Operator ) :<br>是收集其餘的 ( 剩餘的 ) 這些值，轉變成一個陣列。它會用在函式定義時的傳入參數識別名定義 ( 其餘參數, Rest parameters )，以及解構賦值時</p><p>以上兩點引述自 : <a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html">展開運算符與其餘運算符</a></p></blockquote><p><code>setAttribute( 'data-名稱', 'value 值')</code> : 設定元件屬性，就是在元件上賦予名字跟值。<br>不過這命名不能亂命，為了方面辨識或是避免搞混，在名稱前面會加上 <code>data-</code> 。<br>以下範例用 <code>console</code> 查看<br><img src="https://i.imgur.com/tx1LA4c.png"></p><p>不過上面值是 <code>number</code> ，如果是字串要用 <code>string</code>，以下示範</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 加兩個屬性</span></span><br><span class="line">listItem.setAttribute(<span class="hljs-string">'data-id'</span>, <span class="hljs-string">'dataId'</span>)</span><br><span class="line">listItem.setAttribute(<span class="hljs-string">'data-name'</span>, <span class="hljs-string">'dataName'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/DuEqPBg.png"></p><p>利用<strong>展開運算符</strong>把陣列內的景點變成個別的值，再用 <code>forEach</code> 產生每筆資料，每筆資料用 <code>setAttribute</code> 設定索引值，再把資料加入倒 <code>ul</code> 元件底下。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">creatListItem()</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">creatListItem</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  ;[...attractions].forEach(<span class="hljs-function">(<span class="hljs-params">person, index</span>) =&gt;</span> {</span><br><span class="line">    <span class="hljs-keyword">const</span> listItem = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'li'</span>)</span><br><span class="line">    listItem.setAttribute(<span class="hljs-string">'data-Index'</span>, index) <span class="hljs-comment">//這不是設定className，單純的 name 跟 value</span></span><br><span class="line"></span><br><span class="line">    listItem.innerHTML = <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">    &lt;span class='number'&gt;<span class="hljs-subst">${index + <span class="hljs-number">1</span>}</span>&lt;/span&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;div class='draggable' draggable='true'&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;p class='person-name'&gt;<span class="hljs-subst">${person}</span>&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;i class='fas fa-grip-lines'&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">    `</span></span><br><span class="line">    listItems.push(listItem)</span><br><span class="line">    draggableList.appendChild(listItem)</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  addEventListeners()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-資料隨機排列"><a href="#3-資料隨機排列" class="headerlink" title="3. 資料隨機排列"></a>3. 資料隨機排列</h3><p>有了資料後，每次刷新頁面資料要隨機排列。<br>要隨機排列就要有亂數，並且把亂數跟字串綁定，這樣每次刷新頁面順序就會是亂的。</p><p>把陣列內的字串用 map 產生出新的陣列 :<br>將字串賦予到 value 裡面，再用 <code>Math.random()</code> 產生亂數，把這些亂數賦予到 sort 裡面，但是目前排列順序還是不對，必須依照我設定的順序跟數字綁定</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;[...attractions].map(<span class="hljs-function">(<span class="hljs-params">a</span>) =&gt;</span> ({ <span class="hljs-attr">value</span>: a, <span class="hljs-attr">sort</span>: <span class="hljs-built_in">Math</span>.random() }))</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/asWCFfa.png"></p><ul><li><code> sort()</code> : 把資料依照正確順序排列。<a href="https://codepen.io/gleofgja/pen/LYbNwoE?editors=0011">Codepen</a></li></ul><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 本來陣列內數字是亂的，經過 sort 會依照大小排列</span></span><br><span class="line"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">20</span>, <span class="hljs-number">15</span>]</span><br><span class="line"><span class="hljs-built_in">console</span>.log(</span><br><span class="line">  numbers.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>{</span><br><span class="line">    <span class="hljs-keyword">return</span> a - b</span><br><span class="line">  })</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// arrow function</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(numbers.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b))</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/rRpF2i2.png"></p><p>看過上面的解釋後，接下來要把陣列內的字串跟正確的數字順序做綁定。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;[...attractions].sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a.sort - b.sort)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/WRDnx5f.png"><br>比照上面那張圖，原本是亂掉的，現在依照陣列內的順序讓數字由小到大排列。</p><p>有了順序後，數字不被看見，只要取 value 就好。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.map(<span class="hljs-function">(<span class="hljs-params">a</span>) =&gt;</span> a.value)</span><br></pre></td></tr></tbody></table></figure><h3 id="4-拖曳效果"><a href="#4-拖曳效果" class="headerlink" title="4. 拖曳效果"></a>4. 拖曳效果</h3><p>下表參考自 : <a href="https://hff2.github.io/2021/02/02/HTML5-Drag-and-Drop-API-%E7%AD%86%E8%A8%98/">HTML5 Drag and Drop API 筆記</a><br>| | Drag Source | Drag Target |解釋 |<br>| ——– | ——– | ——– |——– |<br>| 1 | dragstart| |<strong>開始</strong>拖曳元素時觸發此事件|<br>| 2 | drag | dragenter |拖曳元素時觸發此事件|<br>| 3 | | dragover |當元素拖曳到<strong>有效位置放置</strong>則觸發此事件|<br>| 4 | | dragleave |拖曳的元素<strong>離開</strong>有效的位置時觸發|<br>| 5 | | drop |在<strong>有效位置</strong>上<strong>放置</strong>元素時觸發此事件|<br>| 6 | dropend | |當拖曳<strong>結束</strong>時會觸發此事件|</p><blockquote><p>這段來自 : <a href="https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html">製作可拖曳的元素（HTML5 Drag and Drop API）</a> &gt; <img src="https://i.imgur.com/BoqFTzM.png"></p><ul><li><strong>Drag Source</strong> 指的是被點擊要拖曳的物件，也就是藍色的圓，通常是一個 element。</li><li><strong>Drop Target</strong> 指的是拖曳的物件被放置的區域，也就是右邊的綠色區域，通常是一個 div container。</li><li><strong>drag</strong>：在 drag source 被拖曳時會持續被觸發。</li><li><strong>dragover</strong>：當拖曳的 drag source 在 drop target 上方時會持續被觸發。</li></ul></blockquote><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addEventListeners</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> draggables = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.draggable'</span>)</span><br><span class="line">  <span class="hljs-keyword">const</span> dragListItems = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.draggable-list li'</span>)</span><br><span class="line">  <span class="hljs-comment">//選到 ul 底下所有 li ( 因為 li 沒有 calssName ，所以這樣寫)</span></span><br><span class="line"></span><br><span class="line">  draggables.forEach(<span class="hljs-function">(<span class="hljs-params">draggable</span>) =&gt;</span> {</span><br><span class="line">    draggable.addEventListener(<span class="hljs-string">'dragstart'</span>, dragStart)</span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">  dragListItems.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> {</span><br><span class="line">    item.addEventListener(<span class="hljs-string">'dragover'</span>, dragOver)</span><br><span class="line">    item.addEventListener(<span class="hljs-string">'drop'</span>, dragDrag)</span><br><span class="line">    item.addEventListener(<span class="hljs-string">'dragenter'</span>, dragEnter)</span><br><span class="line">    item.addEventListener(<span class="hljs-string">'dragleave'</span>, dragLeave)</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>拖曳時更換顏色</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dragEnter</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// console.log('Event: ', 'dragEnter')</span></span><br><span class="line">  <span class="hljs-built_in">this</span>.classList.add(<span class="hljs-string">'over'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dragLeave</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// console.log('Event: ', 'dragLeave')</span></span><br><span class="line">  <span class="hljs-built_in">this</span>.classList.remove(<span class="hljs-string">'over'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>當我拖曳時 <code>dragstart</code> 就會開始抓取當前的索引值</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dragStart</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// console.log('Event: ', 'dragStart')</span></span><br><span class="line">  <span class="hljs-comment">//拖曳的時候抓取索引值</span></span><br><span class="line">  dragStartIndex = +<span class="hljs-built_in">this</span>.closest(<span class="hljs-string">'li'</span>).getAttribute(<span class="hljs-string">'data-Index'</span>)</span><br><span class="line">  <span class="hljs-comment">//上面設定索引值，這裡抓索引值，+ 號改型別用</span></span><br><span class="line">  <span class="hljs-comment">// console.log(dragStartIndex)</span></span><br><span class="line">  <span class="hljs-comment">// console.log(typeof dragStartIndex)</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果沒有 <code>+</code> 號，當我拖曳第一個，用 <code>console</code> 看會顯示下圖<br><img src="https://i.imgur.com/lQOGwH6.png"></p><p>有 <code>+</code> 號<br><img src="https://i.imgur.com/ZTQX984.png"></p><p>抓到索引值後把拖曳到該欄位的索引值對換。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dragDrag</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// console.log('Event: ', 'dragDrag')</span></span><br><span class="line">  <span class="hljs-keyword">const</span> dragEndIndex = +<span class="hljs-built_in">this</span>.getAttribute(<span class="hljs-string">'data-Index'</span>)</span><br><span class="line">  swapItems(dragStartIndex, dragEndIndex)</span><br><span class="line">  <span class="hljs-built_in">this</span>.classList.remove(<span class="hljs-string">'over'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swapItems</span>(<span class="hljs-params">from, to</span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> itemOne = listItems[<span class="hljs-keyword">from</span>].querySelector(<span class="hljs-string">'.draggable'</span>)</span><br><span class="line">  <span class="hljs-keyword">const</span> itemTwo = listItems[to].querySelector(<span class="hljs-string">'.draggable'</span>)</span><br><span class="line"></span><br><span class="line">  listItems[<span class="hljs-keyword">from</span>].appendChild(itemTwo)</span><br><span class="line">  listItems[to].appendChild(itemOne)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-確認清單順序是否正確"><a href="#5-確認清單順序是否正確" class="headerlink" title="5. 確認清單順序是否正確"></a>5. 確認清單順序是否正確</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkOrder</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  listItems.forEach(<span class="hljs-function">(<span class="hljs-params">listItem, index</span>) =&gt;</span> {</span><br><span class="line">    <span class="hljs-keyword">const</span> personName = listItem.querySelector(<span class="hljs-string">'.draggable'</span>).innerText.trim()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (personName !== attractions[index]) {</span><br><span class="line">      listItem.classList.add(<span class="hljs-string">'wrong'</span>)</span><br><span class="line">    } <span class="hljs-keyword">else</span> {</span><br><span class="line">      listItem.classList.remove(<span class="hljs-string">'wrong'</span>)</span><br><span class="line">      listItem.classList.add(<span class="hljs-string">'right'</span>)</span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">checkBtn.addEventListener(<span class="hljs-string">'click'</span>, checkOrder)</span><br></pre></td></tr></tbody></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html">展開運算符與其餘運算符</a><br><a href="https://hff2.github.io/2021/02/02/HTML5-Drag-and-Drop-API-%E7%AD%86%E8%A8%98/">HTML5 Drag and Drop API 筆記</a><br><a href="https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html">製作可拖曳的元素（HTML5 Drag and Drop API）</a><br><a href="https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842252#overview">20 Web Projects With Vanilla JavaScript</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;功能描述&quot;&gt;&lt;a href=&quot;#功能描述&quot; class=&quot;headerlink&quot; title=&quot;功能描述:&quot;&gt;&lt;/a&gt;功能描述:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;刷新頁面打亂排列順序。&lt;/li&gt;
&lt;li&gt;可以拖曳方塊排列順序。&lt;/li&gt;
&lt;li&gt;確認排列順序是否正確。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/1xYdtS0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission30&quot;&gt;Github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pktseng.github.io/Web-Side-Project/mission30/index.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    <category term="作品集" scheme="https://pktseng.github.io/categories/JavaScrip/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    
    <category term="作品集" scheme="https://pktseng.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/tags/JavaScrip/"/>
    
    <category term="dragDrop" scheme="https://pktseng.github.io/tags/dragDrop/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 實作 - 明年倒數計時</title>
    <link href="https://pktseng.github.io/2021/02/05/countdown/"/>
    <id>https://pktseng.github.io/2021/02/05/countdown/</id>
    <published>2021-02-04T16:00:00.000Z</published>
    <updated>2021-03-02T06:21:43.303Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述:"></a>功能描述:</h2><ol><li>網頁載入會顯示 loading 效果。</li><li>loading 完會顯示距離明年倒數時間。</li></ol><p><img src="https://i.imgur.com/lv6I4AW.png"></p><p><a href="https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission29">Github</a><br><a href="https://pktseng.github.io/Web-Side-Project/mission29/index.html">Demo</a></p><a id="more"></a><h2 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h2><p>用容器把顯示內容放在裡面，方便 loading 效果結束時控制這個容器要不要顯示。<br>容器放置內容</p><ol><li>跨年標題。</li><li>顯示倒數時間的天、時、分、秒。</li><li>Loading 效果。</li></ol><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Happy New Year<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"countdown"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"countdown"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"times"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"days"</span>&gt;</span>00<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>days<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"times"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"hours"</span>&gt;</span>00<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>hours<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"times"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"minutes"</span>&gt;</span>00<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>minutes<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"times"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"seconds"</span>&gt;</span>00<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>seconds<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./image/spinner.gif"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"loading"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>架構完成圖<br><img src="https://i.imgur.com/TOa6NkA.png"></p><h2 id="CSS-樣式"><a href="#CSS-樣式" class="headerlink" title="CSS 樣式"></a>CSS 樣式</h2><h3 id="偽元素-before-amp-after"><a href="#偽元素-before-amp-after" class="headerlink" title="偽元素 ( before &amp; after )"></a>偽元素 ( before &amp; after )</h3><p>因為背景圖片太亮的關係導致文字顏色不是很明顯，可以透過偽元素將背景圖片的顏色刷黑一點，再用<code> z-index</code> 屬性把文字呈現在最上層，這樣不只看到背景圖片又可以清楚看到文字。</p><p>偽元素必須要有 <code>content</code> 屬性，如果沒有效果會呈現不出來。</p><figure class="highlight css hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">body</span><span class="hljs-selector-pseudo">::after</span> {</span><br><span class="line">  <span class="hljs-attribute">content</span>: <span class="hljs-string">''</span>;</span><br><span class="line">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>z-index: 數字</code> : 數字越大代表越優先被排在畫面最上層。</li></ul><p>我把文字內容放在 <code>container</code> 容器裡面，只要加入 <code>z-index</code> 屬性，就可以把文字內容放在暗色調的上一層。</p><figure class="highlight css hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.container</span> {</span><br><span class="line">  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>沒用偽元素<br><img src="https://i.imgur.com/DKSnH25.png"></p><p>有用偽元素，字體顏色會比較清楚<br><img src="https://i.imgur.com/C4gRveP.png"></p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="1-計算公式"><a href="#1-計算公式" class="headerlink" title="1. 計算公式"></a>1. 計算公式</h3><p>查看目前還剩多少時間到明年元旦，可以用以下公式</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 剩下時間 = 現在的年份 + 1 ( 明年元旦 ) - 現在的時間 ( 現在 )</span></span><br><span class="line"><span class="hljs-keyword">const</span> totalTime = newYear - newTime</span><br></pre></td></tr></tbody></table></figure><h3 id="2-現在時間"><a href="#2-現在時間" class="headerlink" title="2. 現在時間"></a>2. 現在時間</h3><p>用 <code>new Date</code> 抓取現在時間，有了現在時間的值再把值賦予到變數裡面，但要注意目前抓到的值是物件型別。<br><img src="https://i.imgur.com/1jB2jRX.png"></p><p>有了完整時間後，可以用 <code>getFullYear</code> 抓取現在年份同時轉換型別。</p><ul><li><code>getFullYear</code> : 用來取得一個 Date 物件的<font color="#FF0000">年份</font>，時區是本地時間。</li></ul><p>沒有 <code>getFullYear</code> 抓到的值會試完整時間，型別是物件型式。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> times1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()</span><br><span class="line"><span class="hljs-built_in">console</span>.log(times1)</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> times1)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/TmmMHfe.png"></p><hr><p>有 <code>getFullYear</code> 就抓取當前的年份，同時轉成數字型別，轉型別的目的是為了方便把目前時間 +1 變成明年。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> nowYear = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear()</span><br><span class="line"><span class="hljs-built_in">console</span>.log(nowYear)</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> nowYear)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/H5hLrok.png"></p><h3 id="3-明年元旦時間"><a href="#3-明年元旦時間" class="headerlink" title="3. 明年元旦時間"></a>3. 明年元旦時間</h3><p>把剛才用 <code>getFullYear</code> 轉換的年份 +1 就是明年年份。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 現在的年份 + 1 ( 明年 )</span></span><br><span class="line"><span class="hljs-keyword">const</span> newYear = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">`January 01 <span class="hljs-subst">${nowYear + <span class="hljs-number">1</span>}</span> 00:00:00`</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="4-倒數計時"><a href="#4-倒數計時" class="headerlink" title="4. 倒數計時"></a>4. 倒數計時</h3><p>用 <code>console</code> 查看 <code>totalTime</code> 為<font color="#FF0000">總毫秒</font>。<br>( 毫秒 / 1000 ) = 秒<br>( 毫秒 / 1000 ) % 60 = 當下的<font color="#FF0000">秒數</font>。<br>( 毫秒 / 1000 / 60 ) % 60 = 當下的<font color="#FF0000">分鐘數</font>。<br>( 毫秒 / 1000 / 60 /60 ) % 24 = 當下的<font color="#FF0000">小時數</font>。<br>( 毫秒 / 1000 / 60 /60 / 24) = 當下的<font color="#FF0000">天數</font>。<br>把算出來的值綁定到 dom 上，讓呈現在畫面上。</p><p>在不管是小時、分鐘、秒數都會有個位數，出現個位數前面可加 <code>"0"</code>，用三源判斷式。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTime</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> newTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()</span><br><span class="line">  <span class="hljs-comment">// console.log(newTime)</span></span><br><span class="line">  <span class="hljs-keyword">const</span> totalTime = newYear - newTime</span><br><span class="line">  <span class="hljs-comment">// console.log(totalTime)</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> day = <span class="hljs-built_in">Math</span>.floor(totalTime / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>)</span><br><span class="line">  <span class="hljs-comment">// console.log(day)</span></span><br><span class="line">  <span class="hljs-keyword">const</span> hours = <span class="hljs-built_in">Math</span>.floor(totalTime / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span>) % <span class="hljs-number">24</span></span><br><span class="line">  <span class="hljs-comment">// console.log(hours)</span></span><br><span class="line">  <span class="hljs-keyword">const</span> minutes = <span class="hljs-built_in">Math</span>.floor(totalTime / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>) % <span class="hljs-number">60</span></span><br><span class="line">  <span class="hljs-comment">// console.log(minutes)</span></span><br><span class="line">  <span class="hljs-keyword">const</span> seconds = <span class="hljs-built_in">Math</span>.floor(totalTime / <span class="hljs-number">1000</span>) % <span class="hljs-number">60</span></span><br><span class="line">  <span class="hljs-comment">// console.log(seconds)</span></span><br><span class="line"></span><br><span class="line">  dayEl.innerHTML = day</span><br><span class="line">  hourEl.innerHTML = hours &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">'0'</span> + hours : hours</span><br><span class="line">  minutesEL.innerHTML = minutes &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">'0'</span> + minutes : minutes</span><br><span class="line">  secondsEl.innerHTML = seconds &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">'0'</span> + seconds : seconds</span><br><span class="line">}</span><br><span class="line"><span class="hljs-comment">// getTime() 每秒執行一次</span></span><br><span class="line"><span class="hljs-built_in">setInterval</span>(getTime, <span class="hljs-number">1000</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="5-loading-效果"><a href="#5-loading-效果" class="headerlink" title="5. loading 效果"></a>5. loading 效果</h3><p>每刷新頁面就會顯示一下 loading 效果。</p><p>畫面載入一秒後移除 loading 效果，同時顯示時間。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {</span><br><span class="line">  loading.remove()</span><br><span class="line">  countdown.style.display = <span class="hljs-string">'flex'</span></span><br><span class="line">}, <span class="hljs-number">1000</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.fooish.com/javascript/date/getFullYear.html">JavaScript Date getFullYear()</a><br><a href="https://www.oxxostudio.tw/articles/201706/pseudo-element-1.html">CSS 偽元素 ( before 與 after )</a><br><a href="https://ithelp.ithome.com.tw/articles/10191180">重新認識 JavaScript: Day 06 運算式與運算子</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;功能描述&quot;&gt;&lt;a href=&quot;#功能描述&quot; class=&quot;headerlink&quot; title=&quot;功能描述:&quot;&gt;&lt;/a&gt;功能描述:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;網頁載入會顯示 loading 效果。&lt;/li&gt;
&lt;li&gt;loading 完會顯示距離明年倒數時間。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lv6I4AW.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission29&quot;&gt;Github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pktseng.github.io/Web-Side-Project/mission29/index.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    <category term="作品集" scheme="https://pktseng.github.io/categories/JavaScrip/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    
    <category term="作品集" scheme="https://pktseng.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/tags/JavaScrip/"/>
    
    <category term="偽元素" scheme="https://pktseng.github.io/tags/%E5%81%BD%E5%85%83%E7%B4%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 實作 - 猜數字</title>
    <link href="https://pktseng.github.io/2021/02/01/%E7%8C%9C%E6%95%B8%E5%AD%97/"/>
    <id>https://pktseng.github.io/2021/02/01/%E7%8C%9C%E6%95%B8%E5%AD%97/</id>
    <published>2021-01-31T16:00:00.000Z</published>
    <updated>2021-03-02T06:21:34.732Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="功能敘述"><a href="#功能敘述" class="headerlink" title="功能敘述 :"></a>功能敘述 :</h2><ol><li>猜數字，有固定範圍。</li><li>猜錯會告知區間。</li><li>如果猜的不是數字會顯示訊息提示。</li></ol><p><img src="https://i.imgur.com/vJSz4wN.png"></p><p><a href="https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission28">Github</a><br><a href="https://pktseng.github.io/Web-Side-Project/mission28/index.html">Demo</a></p><a id="more"></a><h2 id="模板架構"><a href="#模板架構" class="headerlink" title="模板架構"></a>模板架構</h2><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"img/mic.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"Speak"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>請猜一個 1 ~ 100 以內的數字<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>請對麥克風說出一個數字<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"msg"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"msg"</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!-- &lt;div&gt;You said:&lt;/div&gt;</span></span><br><span class="line"><span class="hljs-comment">  &lt;span class="box"&gt;Guessed number&lt;/span&gt;</span></span><br><span class="line"><span class="hljs-comment">  &lt;div&gt;number range&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="功能撰寫"><a href="#功能撰寫" class="headerlink" title="功能撰寫"></a>功能撰寫</h2><h3 id="1-取隨機數字，限定-1-100-以內"><a href="#1-取隨機數字，限定-1-100-以內" class="headerlink" title="1. 取隨機數字，限定 1~100 以內"></a>1. 取隨機數字，限定 1~100 以內</h3><p><code>Math.random</code> : 隨機產生出 0~1 之間的小數，因為小於 1 ，所以最大是 0.99。<br><code>Math.floor</code> : 回傳小於等於所給數字的最大整數。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomNumber</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span> <span class="hljs-comment">// +1 範圍才會到 100</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-錄製麥克風的聲音"><a href="#2-錄製麥克風的聲音" class="headerlink" title="2. 錄製麥克風的聲音"></a>2. 錄製麥克風的聲音</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB">SpeechRecognition</a> : 在 Chrome 上使用語音辨識的功能，會把聲音發送到網頁裡面進行識別處理，要注意的是不能離線工作。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.SpeechRecognition =</span><br><span class="line">  <span class="hljs-built_in">window</span>.SpeechRecognition || <span class="hljs-built_in">window</span>.webkitSpeechRecognition</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> recognition = <span class="hljs-keyword">new</span> <span class="hljs-built_in">window</span>.SpeechRecognition()</span><br></pre></td></tr></tbody></table></figure><h3 id="3-錄製聲音時會觸發條件"><a href="#3-錄製聲音時會觸發條件" class="headerlink" title="3. 錄製聲音時會觸發條件"></a>3. 錄製聲音時會觸發條件</h3><p><code>result</code> : 當事件觸發後會將值回傳，但值如果是 <code>undefined</code>，就沒辦法回傳</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">recognition.start()</span><br><span class="line">recognition.addEventListener(<span class="hljs-string">'result'</span>, onSpeak)</span><br></pre></td></tr></tbody></table></figure><h3 id="4-觸發後抓取文字"><a href="#4-觸發後抓取文字" class="headerlink" title="4. 觸發後抓取文字"></a>4. 觸發後抓取文字</h3><p>當使用者說出文字後，經過網頁處裡會得到一個文字的 <code>value</code> ，這 <code>value</code> 值會顯示在 <code>results</code> 陣列裡面，用 <code>console</code> 查看 <code>e.results</code> 如下圖。<br><code>value</code> 的 <code>key</code> 為 <code>transcript</code> 。</p><p>再用 callback function 的方式，將函示切分方便管理。<br><img src="https://i.imgur.com/jA7fJOw.png"></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onSpeak</span>(<span class="hljs-params">e</span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> msg = e.results[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>].transcript</span><br><span class="line"></span><br><span class="line">  writeMsg(msg)</span><br><span class="line">  checkMsg(msg)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-將文字顯示在-DOM-上"><a href="#5-將文字顯示在-DOM-上" class="headerlink" title="5. 將文字顯示在 DOM 上"></a>5. 將文字顯示在 DOM 上</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">writeMsg</span>(<span class="hljs-params">msg</span>) </span>{</span><br><span class="line">  msgEl.innerHTML = <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">    &lt;div&gt;You said: &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;span class="box"&gt;<span class="hljs-subst">${msg}</span>&lt;/span&gt;</span></span><br><span class="line"><span class="hljs-string">  `</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6-判斷錄製的文字是否符合標準"><a href="#6-判斷錄製的文字是否符合標準" class="headerlink" title="6. 判斷錄製的文字是否符合標準"></a>6. 判斷錄製的文字是否符合標準</h3><p>為防止說的不是數字或是大於區間，需要寫一點防範機制，如果使用者說了數字沒有答對，就要給點提示，讓使用者有方向。</p><ol><li>只能是數字</li><li>只能在區間內</li><li>提示數字要高還是低，讓使用者知道方向</li></ol><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkMsg</span>(<span class="hljs-params">msg</span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// 主換數字型別</span></span><br><span class="line">  <span class="hljs-keyword">const</span> num = +msg</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 判斷說的是不是數字</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Number</span>.isNaN(num)) {</span><br><span class="line">    msgEl.innerHTML = <span class="hljs-string">`&lt;div&gt;請說數字 !&lt;/div&gt;`</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 判斷數字區間</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">100</span> || num &lt; <span class="hljs-number">1</span>) {</span><br><span class="line">    msgEl.innerHTML = <span class="hljs-string">`&lt;div&gt;數字只能介於 1~100 之間&lt;/div&gt;`</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 開始猜測，決定數字要喊高還是喊低</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (num === randomNumber) {</span><br><span class="line">    <span class="hljs-built_in">document</span>.body.innerHTML = <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">      &lt;h2&gt;恭喜猜中! &lt;br&gt;&lt;br&gt;</span></span><br><span class="line"><span class="hljs-string">      就是 <span class="hljs-subst">${num}</span>&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;button class="play-again" id="play-again"&gt;再玩一次&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">      `</span></span><br><span class="line">  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num &gt; randomNumber) {</span><br><span class="line">    msgEl.innerHTML = <span class="hljs-string">`&lt;div&gt;再低&lt;/div&gt;`</span></span><br><span class="line">  } <span class="hljs-keyword">else</span> {</span><br><span class="line">    msgEl.innerHTML = <span class="hljs-string">`&lt;div&gt;再高&lt;/div&gt;`</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="7-再挑戰一次"><a href="#7-再挑戰一次" class="headerlink" title="7. 再挑戰一次"></a>7. 再挑戰一次</h3><p>一旦挑戰成功後，為了讓使用者可以在挑戰一次。將網頁刷新一次就可以了。<br>因為 btn 是用字串模板的方式載入的，所以不能用選擇器綁 DOM 元素，但可以用按鈕 id 的方式來識別。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">document</span>.body.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {</span><br><span class="line">  <span class="hljs-keyword">if</span> (e.target.id === <span class="hljs-string">'play-again'</span>) {</span><br><span class="line">    <span class="hljs-built_in">window</span>.location.reload()</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/result_event">SpeechRecognition: result event</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechRecognition">SpeechRecognition</a><br><a href="https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842354#overview">20 Web Projects With Vanilla JavaScript</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;功能敘述&quot;&gt;&lt;a href=&quot;#功能敘述&quot; class=&quot;headerlink&quot; title=&quot;功能敘述 :&quot;&gt;&lt;/a&gt;功能敘述 :&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;猜數字，有固定範圍。&lt;/li&gt;
&lt;li&gt;猜錯會告知區間。&lt;/li&gt;
&lt;li&gt;如果猜的不是數字會顯示訊息提示。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/vJSz4wN.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission28&quot;&gt;Github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pktseng.github.io/Web-Side-Project/mission28/index.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    <category term="作品集" scheme="https://pktseng.github.io/categories/JavaScrip/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    
    <category term="作品集" scheme="https://pktseng.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/tags/JavaScrip/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 實作 - 打字遊戲</title>
    <link href="https://pktseng.github.io/2021/01/29/typingGmae/"/>
    <id>https://pktseng.github.io/2021/01/29/typingGmae/</id>
    <published>2021-01-28T16:00:00.000Z</published>
    <updated>2021-03-02T06:21:51.366Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="功能敘述："><a href="#功能敘述：" class="headerlink" title="功能敘述："></a>功能敘述：</h2><ol><li>在時間內輸入顯示的單字可以得分。</li><li>依照難度調整獎勵時間。</li><li>時間內未輸入完成會顯示新訊息。</li></ol><p><img src="https://i.imgur.com/uVuOz1v.png"></p><p><a href="https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission27">Github</a><br><a href="https://pktseng.github.io/Web-Side-Project/mission27/index.html">Demo</a></p><a id="more"></a><h2 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h2><ol><li>進入頁面後隨機產生文字。</li><li>可以直接在輸入框輸入單字(不需要滑鼠點擊輸入框)，輸入正確得一分。</li><li>進入頁面後時間開始倒數，若輸入正確倒數時間會增加。</li><li>時間內沒寫完會顯示時間到的訊息。</li><li>增加的時間可以依照難度調整獎勵時間。</li><li>難度選單可以選擇隱藏或是顯示。</li><li>刷新頁面後難度不會被回復預設值。</li></ol><h2 id="模板架構"><a href="#模板架構" class="headerlink" title="模板架構"></a>模板架構</h2><ol><li>button 顯是隱藏難度。</li><li>難度選單。</li><li>顯示隨機產生的文字。</li><li>輸入框。</li><li>顯示時間跟分數。</li></ol><h4 id="1-顯示隱藏難度"><a href="#1-顯示隱藏難度" class="headerlink" title="1. 顯示隱藏難度"></a>1. 顯示隱藏難度</h4><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"settings-btn"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"settings-btn"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fas fa-cog"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-難度選單"><a href="#2-難度選單" class="headerlink" title="2. 難度選單"></a>2. 難度選單</h4><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"settings"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"settings"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"settings-form"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"difficulty"</span>&gt;</span>Difficulty<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"difficulty"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"easy"</span>&gt;</span>Easy<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"medium"</span>&gt;</span>Medium<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"hard"</span>&gt;</span>Hard<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3-顯示隨機產生的文字、輸入框、顯示時間跟分數"><a href="#3-顯示隨機產生的文字、輸入框、顯示時間跟分數" class="headerlink" title="3. 顯示隨機產生的文字、輸入框、顯示時間跟分數"></a>3. 顯示隨機產生的文字、輸入框、顯示時間跟分數</h4><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>👩‍💻 Speed Typer 👨‍💻<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>Type the following:<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"word"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">id</span>=<span class="hljs-string">"text"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">"off"</span></span></span><br><span class="line"><span class="hljs-tag">    <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Type the word here..."</span></span></span><br><span class="line"><span class="hljs-tag">  /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"time-container"</span>&gt;</span>Time left: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"time"</span>&gt;</span>10s<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"score-container"</span>&gt;</span>Score: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"score"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"end-game-container"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"end-game-container"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>架構完成圖<br><img src="https://i.imgur.com/hkQyRRM.png"></p><p>CSS 樣式可以依照個人喜好來設定。</p><h2 id="功能撰寫-JavaScript"><a href="#功能撰寫-JavaScript" class="headerlink" title="功能撰寫 ( JavaScript )"></a>功能撰寫 ( JavaScript )</h2><h3 id="1-將-DOM-跟元素做綁定"><a href="#1-將-DOM-跟元素做綁定" class="headerlink" title="1. 將 DOM 跟元素做綁定"></a>1. 將 DOM 跟元素做綁定</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> word = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'word'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> text = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'text'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> scoreEl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'score'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> timeEl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'time'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> endgameEl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'end-game-container'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> settingsBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'settings-btn'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> settings = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'settings'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> settingsForm = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'settings-form'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> difficultySelect = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'difficulty'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="2-進入頁面後隨機產生文字。"><a href="#2-進入頁面後隨機產生文字。" class="headerlink" title="2. 進入頁面後隨機產生文字。"></a>2. 進入頁面後隨機產生文字。</h3><p>文字資料可以透過 API 獲取。<br>或是像作者直接給陣列值再用 <code>Math.random</code>、<code>Math.floor</code>、<code>words.length</code>的方式隨機抓取一個值。</p><p>打 API 要資料的方法有三種 Ajax、axios、fetch，以下用 axios 示範，選用 axios 是因為比較簡單，直接給 API <a href="https://random-word-api.herokuapp.com/home">url</a> ，再用 <code>then</code> 抓取回傳的資料就可以了，如果資料回傳錯誤就會走 <code>catch</code> 。<br>用 <code>console</code> 查看 <code>response</code> 的資料如下圖<br><img src="https://i.imgur.com/4paTkbD.png"></p><p>有了這值後再把值賦予到 <code>randomWord</code> 變數上，讓其他函示可以取用。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 用 Axios 打 API 抓取 response 的值</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomWord</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  axios</span><br><span class="line">    .get(<span class="hljs-string">'https://random-word-api.herokuapp.com/word?number=1'</span>)</span><br><span class="line">    .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {</span><br><span class="line">      <span class="hljs-comment">// console.log(res);</span></span><br><span class="line">      randomWord = res.data[<span class="hljs-number">0</span>]</span><br><span class="line">      <span class="hljs-comment">// console.log(randomWord);</span></span><br><span class="line">      word.innerHTML = randomWord</span><br><span class="line">    })</span><br><span class="line">    .catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'沒抓到單字資料'</span>)</span><br><span class="line">    })</span><br><span class="line">}</span><br><span class="line">getRandomWord()</span><br></pre></td></tr></tbody></table></figure><h3 id="3-比對輸入的值是否吻合再給予獎勵"><a href="#3-比對輸入的值是否吻合再給予獎勵" class="headerlink" title="3. 比對輸入的值是否吻合再給予獎勵"></a>3. 比對輸入的值是否吻合再給予獎勵</h3><p><code>focus()</code> : 打開視窗就可以直接輸入單字了。</p><p>把 <code>e.target.value</code> 抓到的值賦予到 <code>inputText</code> 變數上，方便跟上面拆分的 <code>randomWord</code> 做比對，要注意 <code>randomWord</code> 不能用 <code>cosnt</code> 、<code>let</code>、<code>var</code> 宣告，不然會抓不到，比對成功後，分數會加 1，同時給予獎勵增長時間 5 秒。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">text.focus()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 答對加分，同時把分數綁到 DOM 上</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateScore</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  score++</span><br><span class="line">  scoreEl.innerHTML = score</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 在輸入框輸入文字同時跟顯示的文字做對比</span></span><br><span class="line">text.addEventListener(<span class="hljs-string">'input'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {</span><br><span class="line">  <span class="hljs-keyword">let</span> inputText = e.target.value</span><br><span class="line">  <span class="hljs-keyword">if</span> (inputText === randomWord) {</span><br><span class="line">    getRandomWord()</span><br><span class="line">    updateScore()</span><br><span class="line">    e.target.value = <span class="hljs-string">''</span> <span class="hljs-comment">//只能用 e.target.value 來清空值</span></span><br><span class="line"></span><br><span class="line">    time += <span class="hljs-number">5</span></span><br><span class="line"></span><br><span class="line">    updateTime()</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="4-時間內沒寫完會顯示時間到的訊息。"><a href="#4-時間內沒寫完會顯示時間到的訊息。" class="headerlink" title="4. 時間內沒寫完會顯示時間到的訊息。"></a>4. 時間內沒寫完會顯示時間到的訊息。</h3><p>輸入文字的同時時間也會開始倒數，倒數的數字要設置停損點 ( clearInterval )，不然會數到負的。</p><ul><li><code>setInterval</code> : 是設定固定時間重複循環的語法。</li></ul><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> initTime = <span class="hljs-built_in">setInterval</span>(updateTime, <span class="hljs-number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateTime</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// 時間開始倒扣</span></span><br><span class="line">  time--</span><br><span class="line">  <span class="hljs-comment">// 倒扣的時間顯示在 DOM 上</span></span><br><span class="line">  timeEl.innerHTML = time + <span class="hljs-string">' s '</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (time === <span class="hljs-number">0</span>) {</span><br><span class="line">    <span class="hljs-built_in">clearInterval</span>(initTime) <span class="hljs-comment">//少了這個停損點倒數的數字會變成負的</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 時間到的訊息用字串模板的方式載入</span></span><br><span class="line">    endgameEl.innerHTML = <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">    &lt;h1&gt;Time ran out&lt;/h1&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;Your final score is <span class="hljs-subst">${score}</span>&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;button onclick="location.reload()"&gt;Reload&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">    `</span></span><br><span class="line">    endgameEl.style.display = <span class="hljs-string">'flex'</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-難度選單可以選擇隱藏或是顯示。"><a href="#5-難度選單可以選擇隱藏或是顯示。" class="headerlink" title="5. 難度選單可以選擇隱藏或是顯示。"></a>5. 難度選單可以選擇隱藏或是顯示。</h3><p>用 <code>toggle</code> 搭配 css style 就可以了。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">settingsBtn.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">() =&gt;</span> {</span><br><span class="line">  settings.classList.toggle(<span class="hljs-string">'hide'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="6-刷新頁面後難度不會被回復預設值。"><a href="#6-刷新頁面後難度不會被回復預設值。" class="headerlink" title="6. 刷新頁面後難度不會被回復預設值。"></a>6. 刷新頁面後難度不會被回復預設值。</h3><p>要刷新頁面選單的值不會恢復成預設值就會使用到 <code>localStorage</code> ，把選擇的難度寫入到瀏覽器裡面。</p><ol><li>選擇難度是一個<code>event</code>，把選到的難度用 <code>setItem</code> 寫到瀏覽器記憶體 <code>localStorage</code> 裡面</li><li>再用 <code>difficulty</code> 抓取選到的難度同時判斷輸入單字的時間要多還是要少</li><li>到目前為止頁面刷新後難度還是會恢復成預設值，所以要把選單的值寫到 value 裡面</li></ol><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 1. 選擇難度，把資料寫進瀏覽器記憶體裡面</span></span><br><span class="line">settingsForm.addEventListener(<span class="hljs-string">'change'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {</span><br><span class="line">  difficulty = e.target.value</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'difficulty'</span>, difficulty)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 2. 把選到的值賦予到 difficulty 變數裡面，用來判斷難增加的時間</span></span><br><span class="line"><span class="hljs-keyword">let</span> difficulty =</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'difficulty'</span>) !== <span class="hljs-literal">null</span></span><br><span class="line">    ? <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'difficulty'</span>)</span><br><span class="line">    : <span class="hljs-string">'medium'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 3. 這是選完後抓取選單的值，確保頁面刷新後不會恢復成預設值</span></span><br><span class="line">difficultySelect.value =</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'difficulty'</span>) !== <span class="hljs-literal">null</span></span><br><span class="line">    ? <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'difficulty'</span>)</span><br><span class="line">    : <span class="hljs-string">'medium'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7-增加的時間可以依照難度調整獎勵時間。"><a href="#7-增加的時間可以依照難度調整獎勵時間。" class="headerlink" title="7. 增加的時間可以依照難度調整獎勵時間。"></a>7. 增加的時間可以依照難度調整獎勵時間。</h3><p>如果難度越高，獎勵時間就越少，反之同理。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 依照難度調整增加輸入時間</span></span><br><span class="line"><span class="hljs-keyword">if</span> (difficulty === <span class="hljs-string">'hard'</span>) {</span><br><span class="line">  time += <span class="hljs-number">2</span></span><br><span class="line">} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (difficulty === <span class="hljs-string">'medium'</span>) {</span><br><span class="line">  time += <span class="hljs-number">3</span></span><br><span class="line">} <span class="hljs-keyword">else</span> {</span><br><span class="line">  time += <span class="hljs-number">5</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="功能撰寫-jQuery"><a href="#功能撰寫-jQuery" class="headerlink" title="功能撰寫 ( jQuery )"></a>功能撰寫 ( jQuery )</h2><h3 id="1-進入頁面後隨機產生文字。"><a href="#1-進入頁面後隨機產生文字。" class="headerlink" title="1. 進入頁面後隨機產生文字。"></a>1. 進入頁面後隨機產生文字。</h3><p>上面 JS 是用 Axios 打 API 獲取資料，jQuery 只能用 AJAX 打 API<br>本來是打 <a href="https://randomuser.me/">RANDOM USER GENERATOR</a> 的 API，但發現 username 會有其他國家非英文的名字，所以改成打 <a href="https://random-word-api.herokuapp.com/home">Word</a> 的 API 獲取單字資料。</p><ul><li>AJAX 起手式 :<br><code>url</code> : 打 API 的網址。<br><code>method</code> : 拿資料的方法。<br><code>dataType</code> : 資料的格式。<br><code>success</code> : 拿到資料後會打要做什麼事。</li></ul><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomUser</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  $.ajax({</span><br><span class="line">    url: <span class="hljs-string">'https://random-word-api.herokuapp.com/word?number=1'</span>,</span><br><span class="line">    method: <span class="hljs-string">'get'</span>,</span><br><span class="line">    dataType: <span class="hljs-string">'json'</span>,</span><br><span class="line">    success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>{</span><br><span class="line">      <span class="hljs-comment">// console.log(res);</span></span><br><span class="line">      data = res[<span class="hljs-number">0</span>]</span><br><span class="line">      <span class="hljs-comment">// console.log(data);</span></span><br><span class="line">      $(<span class="hljs-string">'#word'</span>).text(data)</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line">  time--</span><br><span class="line">  $(<span class="hljs-string">'#time'</span>).val(time)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-比對輸入的值是否吻合再給予獎勵"><a href="#2-比對輸入的值是否吻合再給予獎勵" class="headerlink" title="2. 比對輸入的值是否吻合再給予獎勵"></a>2. 比對輸入的值是否吻合再給予獎勵</h3><p>給個分數的初始值，把值設定成 number 型式，判斷書入的值跟單字一樣後會重打一次 API 同時刷新時間，輸入正確後會給獎勵分數。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> score = <span class="hljs-number">0</span></span><br><span class="line">$(<span class="hljs-string">'#text'</span>).on(<span class="hljs-string">'input'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> textInput = $(<span class="hljs-built_in">this</span>).val()</span><br><span class="line">  <span class="hljs-comment">// console.log(textInput);</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (textInput === data) {</span><br><span class="line">    randomUser()</span><br><span class="line">    updateTime()</span><br><span class="line">    $(<span class="hljs-string">'#text'</span>).val(<span class="hljs-string">''</span>)</span><br><span class="line">    score++</span><br><span class="line">    $(<span class="hljs-string">'#score'</span>).text(score)</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="3-時間內沒寫完會顯示時間到的訊息。"><a href="#3-時間內沒寫完會顯示時間到的訊息。" class="headerlink" title="3. 時間內沒寫完會顯示時間到的訊息。"></a>3. 時間內沒寫完會顯示時間到的訊息。</h3><p>設定時間初始值順便把型別轉成 number。<br>把時間寫入 DOM 元素裡面，當時間到未輸入完單字就會顯示新訊息。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> time = <span class="hljs-number">20</span></span><br><span class="line"><span class="hljs-keyword">const</span> initTime = <span class="hljs-built_in">setInterval</span>(updateTime, <span class="hljs-number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateTime</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  time--</span><br><span class="line">  $(<span class="hljs-string">'#time'</span>).text(time + <span class="hljs-string">' s '</span>)</span><br><span class="line">  <span class="hljs-keyword">if</span> (time === <span class="hljs-number">0</span>) {</span><br><span class="line">    <span class="hljs-built_in">clearInterval</span>(initTime)</span><br><span class="line">    $(<span class="hljs-string">'#end-game-container'</span>).html(<span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">    &lt;h1&gt;Time ran out&lt;/h1&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;p&gt;Your final score is <span class="hljs-subst">${score}</span>&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">    &lt;button onclick="location.reload()"&gt;Reload&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-string">    `</span>)</span><br><span class="line">    $(<span class="hljs-string">'#end-game-container'</span>).css(<span class="hljs-string">'display'</span>, <span class="hljs-string">'flex'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-難度選單可以選擇隱藏或是顯示。"><a href="#4-難度選單可以選擇隱藏或是顯示。" class="headerlink" title="4. 難度選單可以選擇隱藏或是顯示。"></a>4. 難度選單可以選擇隱藏或是顯示。</h3><p>用 <code>toggleClass</code> 可以顯示或是隱藏某個元素。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'#settings-btn'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-function">() =&gt;</span> {</span><br><span class="line">  $(<span class="hljs-string">'#settings'</span>).toggleClass(<span class="hljs-string">'hide'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="5-刷新頁面後難度不會被回復預設值。"><a href="#5-刷新頁面後難度不會被回復預設值。" class="headerlink" title="5. 刷新頁面後難度不會被回復預設值。"></a>5. 刷新頁面後難度不會被回復預設值。</h3><p>難度選完後不要恢復成預設值的方法就是把資料寫進瀏覽器記憶體裡面，寫入後每次更換難度都會刷新一次頁面。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'#difficulty'</span>).change(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  difficulty = $(<span class="hljs-string">'#difficulty'</span>).val()</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(difficulty)</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'difficulty'</span>, difficulty)</span><br><span class="line">  location.reload()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">$(<span class="hljs-string">'#difficulty'</span>).val(</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'difficulty'</span>) !== <span class="hljs-literal">null</span></span><br><span class="line">    ? <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'difficulty'</span>)</span><br><span class="line">    : <span class="hljs-string">'medium'</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://github.com/axios/axios">Axios</a><br><a href="https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842354#overview">20 Web Projects With Vanilla JavaScript</a><br><a href="https://kuro.tw/posts/2019/02/23/%E8%AB%87%E8%AB%87-JavaScript-%E7%9A%84-setTimeout-%E8%88%87-setInterval/">談談 JavaScript 的 setTimeout 與 setInterval</a><br><a href="https://randomuser.me/">RANDOM USER GENERATOR</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;功能敘述：&quot;&gt;&lt;a href=&quot;#功能敘述：&quot; class=&quot;headerlink&quot; title=&quot;功能敘述：&quot;&gt;&lt;/a&gt;功能敘述：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在時間內輸入顯示的單字可以得分。&lt;/li&gt;
&lt;li&gt;依照難度調整獎勵時間。&lt;/li&gt;
&lt;li&gt;時間內未輸入完成會顯示新訊息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/uVuOz1v.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission27&quot;&gt;Github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pktseng.github.io/Web-Side-Project/mission27/index.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    <category term="作品集" scheme="https://pktseng.github.io/categories/JavaScrip/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    
    <category term="作品集" scheme="https://pktseng.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/tags/JavaScrip/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 實作 - 滾動顯示文章</title>
    <link href="https://pktseng.github.io/2021/01/26/Infinite_scroll_blog/"/>
    <id>https://pktseng.github.io/2021/01/26/Infinite_scroll_blog/</id>
    <published>2021-01-25T16:00:00.000Z</published>
    <updated>2021-03-02T06:21:48.336Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>功能敘述：<br>當捲動到頁尾時，會自動讀取更多的文章。</p><p><img src="https://i.imgur.com/ufC6HbH.png"></p><p><a href="https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission26">Github</a><br><a href="https://pktseng.github.io/Web-Side-Project/mission26/index.html">DEMO</a></p><a id="more"></a><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>主要有兩個: filter bar 跟渲染資料。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">&lt;!-- search bar --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"filterContainer"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"filter"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"filter"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Filter posts"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- 渲染內容 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"postsContainer"</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!-- 渲染資料的內容使用 JavaScript 寫出來 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- 小點 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"loader"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"loader"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"circle"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"circle"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"circle"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>架構完成圖<br><img src="https://i.imgur.com/6pZd8BM.png"></p><p>CSS 樣式可依照個人喜好來設定。</p><h2 id="JaScript"><a href="#JaScript" class="headerlink" title="JaScript"></a>JaScript</h2><p>三大重點:</p><ol><li>打 API，拿資料。</li><li>滾輪往下滑載入資料。</li><li>輸入關鍵字找到文章。</li></ol><h3 id="1-將-DOM-跟-HTML-綁在一起"><a href="#1-將-DOM-跟-HTML-綁在一起" class="headerlink" title="1. 將 DOM 跟 HTML 綁在一起"></a>1. 將 DOM 跟 HTML 綁在一起</h3><ol><li>輸入文字會需要 filter bar</li><li>在網頁內顯示資料內容</li><li>往下滑時會出現 loading 動畫</li></ol><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> filter = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#filter'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> postContainer = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#postsContainer'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> loading = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#loader'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="2-打-API-獲取資料"><a href="#2-打-API-獲取資料" class="headerlink" title="2. 打 API 獲取資料"></a>2. 打 API 獲取資料</h3><p>API <a href="https://jsonplaceholder.typicode.com/posts">URL</a><br>在網址後面加入 <code>limit</code> &amp; <code>page</code>，可以指定一個頁面下可以顯示多少內容，例如<br><code>limit = 4</code> : 顯示 4 個內容<br><code>page = 1</code> : 頁數</p><p>打 API 方法有三種: AJAX、Axios、Fetch。<br>原作使用 <code>fetch</code> 是現在比較新穎的技術但還是要注意瀏覽器有沒有支援到。<br>使用 <code>fetch</code> 打 API ，response 回來的資料要轉 <code>json</code> 格式才可以使用。<br>轉完後再把資料 <code>return</code> 出來給其他函式使用。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> limit = <span class="hljs-number">4</span> <span class="hljs-comment">// 限制一頁顯示多少個</span></span><br><span class="line"><span class="hljs-keyword">let</span> page = <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPost</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> fetch(</span><br><span class="line">    <span class="hljs-string">`https://jsonplaceholder.typicode.com/posts?_limit=<span class="hljs-subst">${limit}</span>&amp;_page=<span class="hljs-subst">${page}</span>`</span></span><br><span class="line">  )</span><br><span class="line">  <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.json()</span><br><span class="line">  <span class="hljs-keyword">return</span> data</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-拿到資料後，將資料渲染出來"><a href="#3-拿到資料後，將資料渲染出來" class="headerlink" title="3. 拿到資料後，將資料渲染出來"></a>3. 拿到資料後，將資料渲染出來</h3><p>上面模板 <code>postsContainer</code> 內的資料有提到要用 javascript 呈現，現在要將拿到的資料利用 ES6 字串模板的方式呈現出來。</p><p>先將拿到的資料賦予到 <code>posts</code> 變數裡面，再將這些資料用 <code>forEach()</code> 的方式放到字串模板裡面，到這資料還不會呈現出來，必須再把這些資料放到 <code>postContainer</code> 大 “容器” 裡面，這樣資料就會依照模板的架構跟樣式來呈現。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showPost</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> posts = <span class="hljs-keyword">await</span> getPost()</span><br><span class="line">  <span class="hljs-comment">// console.log(posts);</span></span><br><span class="line">  posts.forEach(<span class="hljs-function">(<span class="hljs-params">post</span>) =&gt;</span> {</span><br><span class="line">    <span class="hljs-keyword">const</span> postEl = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>) <span class="hljs-comment">//新增 div 標籤</span></span><br><span class="line">    postEl.classList.add(<span class="hljs-string">'post'</span>) <span class="hljs-comment">// div 標籤名為 post</span></span><br><span class="line">    postEl.innerHTML = <span class="hljs-string">`</span></span><br><span class="line"><span class="hljs-string">      &lt;div class="number"&gt;<span class="hljs-subst">${post.id}</span>&lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;div class="postInfo"&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;h2 class="postTitle"&gt;<span class="hljs-subst">${post.title}</span>&lt;/h2&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;p class="postBody"&gt;<span class="hljs-subst">${post.body}</span>&lt;/p&gt;</span></span><br><span class="line"><span class="hljs-string">      &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">    `</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 將這些 div 輸入到 postContainer 裡面</span></span><br><span class="line">    postContainer.appendChild(postEl)</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">showPost() <span class="hljs-comment">// 執行</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-讓條件觸發，渲染出更多資料"><a href="#4-讓條件觸發，渲染出更多資料" class="headerlink" title="4. 讓條件觸發，渲染出更多資料"></a>4. 讓條件觸發，渲染出更多資料</h3><p>到目前為止資料只會呈現 “一筆” 而已，即使滾輪往下拉資料還是不會出現，這也不是我們要的功能，必須在滾輪往下拉的同時在網頁最底部會顯示小點點的動畫跟載入 “下一筆” 資料。</p><blockquote><p>一筆資料有 4 個內容，就是上面設定的 <code>let limit = 4</code></p></blockquote><p>滾輪滾動是觸發的條件，所以要用監聽 ( <code>addEventListener</code> )，視窗到最底部時，會顯示 <code>loading</code> 效果，要判斷怎樣算是最底部就用 <code>scrollTop</code>、<code>scrollHeight</code>、<code>clientHeight</code></p><p>以下參考自 MDN</p><ol><li><p>scrollTop : 目前是瀏覽器視窗距離元素最頂端的距離。<br><img src="https://i.imgur.com/bNGxeml.png"></p></li><li><p>scrollHeight : 整個元素的總高度。<br><img src="https://i.imgur.com/tDYgWSp.png"></p></li><li><p>clientHeight : 元素內部包含 padding 的高度。<br><img src="https://i.imgur.com/SNz8f01.png"></p></li></ol><p>利用解構的方式抓取三個值，再用這三個值用來判斷是否該載入資料。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'scroll'</span>, <span class="hljs-function">() =&gt;</span> {</span><br><span class="line">  <span class="hljs-keyword">const</span> { scrollTop, scrollHeight, clientHeight } = <span class="hljs-built_in">document</span>.documentElement</span><br><span class="line">  <span class="hljs-keyword">if</span> (scrollTop + clientHeight &gt;= scrollHeight - <span class="hljs-number">5</span>) {</span><br><span class="line">    showLoading()</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>觸發後顯示 loading 效果，效果 1 秒後結束，並在 0.3 秒內載入資料。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showLoading</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  loading.classList.add(<span class="hljs-string">'show'</span>) <span class="hljs-comment">// 顯示小點CSS</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 移除小點時機</span></span><br><span class="line">  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {</span><br><span class="line">    loading.classList.remove(<span class="hljs-string">'show'</span>) <span class="hljs-comment">// 1秒後，移除小點CSS</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 增加頁面同時，0.3秒內打 API 抓新資料</span></span><br><span class="line">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {</span><br><span class="line">      page++</span><br><span class="line">      showPost()</span><br><span class="line">    }, <span class="hljs-number">300</span>)</span><br><span class="line">  }, <span class="hljs-number">1000</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-輸入關鍵字顯示相關文章"><a href="#5-輸入關鍵字顯示相關文章" class="headerlink" title="5. 輸入關鍵字顯示相關文章"></a>5. 輸入關鍵字顯示相關文章</h3><p>輸入關鍵字是觸發條件，一樣用監聽 ( <code>addEventListener</code> )，不過函式實在太大了，可以善用 <code>callback function</code>。</p><p>將 <code>post</code> <code>div</code> 裡所有的內容賦予到 <code>posts</code> 變數上，再用 <code>forEach</code> 讀取裡面的每一筆資料，再用 <code>indexOf</code> 判斷式，判斷輸入的值有沒有跟 posts 變數上的相符並依照書入的值顯示相關文字的文章。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">filter.addEventListener(<span class="hljs-string">'input'</span>, filterPost)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filterPost</span>(<span class="hljs-params">e</span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// console.log(e.target.value);</span></span><br><span class="line">  <span class="hljs-keyword">const</span> term = e.target.value.toUpperCase()</span><br><span class="line">  <span class="hljs-keyword">const</span> posts = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.post'</span>)</span><br><span class="line"></span><br><span class="line">  posts.forEach(<span class="hljs-function">(<span class="hljs-params">post</span>) =&gt;</span> {</span><br><span class="line">    <span class="hljs-keyword">const</span> title = post.querySelector(<span class="hljs-string">'.postTitle'</span>).innerText.toUpperCase()</span><br><span class="line">    <span class="hljs-keyword">const</span> body = post.querySelector(<span class="hljs-string">'.postBody'</span>).innerText.toUpperCase()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (title.indexOf(term) &gt; <span class="hljs-number">-1</span> || body.indexOf(term) &gt; <span class="hljs-number">-1</span>) {</span><br><span class="line">      post.style.display = <span class="hljs-string">'flex'</span></span><br><span class="line">    } <span class="hljs-keyword">else</span> {</span><br><span class="line">      post.style.display = <span class="hljs-string">'none'</span></span><br><span class="line">    }</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Element/clientHeight">Element.clientHeight</a><br><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Element/scrollHeight">Element.scrollHeight</a><br><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Element/scrollTop">Element.scrollTop</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase">String.prototype.toUpperCase()</a><br><a href="https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842308#overview">20 Web Projects With Vanilla JavaScript</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;功能敘述：&lt;br&gt;當捲動到頁尾時，會自動讀取更多的文章。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ufC6HbH.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission26&quot;&gt;Github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pktseng.github.io/Web-Side-Project/mission26/index.html&quot;&gt;DEMO&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    <category term="作品集" scheme="https://pktseng.github.io/categories/JavaScrip/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    
    <category term="作品集" scheme="https://pktseng.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/tags/JavaScrip/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 實作 - 音樂播放器</title>
    <link href="https://pktseng.github.io/2021/01/22/Music-player/"/>
    <id>https://pktseng.github.io/2021/01/22/Music-player/</id>
    <published>2021-01-21T16:00:00.000Z</published>
    <updated>2021-03-02T06:21:50.212Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>功能描述:</p><ol><li>點擊進度條可以選擇播放時段</li><li>撥放完後自動撥放下一曲</li><li>可選擇上一曲或下一曲</li></ol><p><img src="https://i.imgur.com/pfv9RIb.png"></p><p><a href="https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission25">Github</a><br><a href="https://pktseng.github.io/Web-Side-Project/mission25/index.html">DEMO</a></p><a id="more"></a><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>給個容器，將內容包在裡面，方便控制容器內的通用樣式跟監聽</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"music-container"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"music-container"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>撥放音樂的時候顯示音樂名稱跟進度條</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"music-info"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"title"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"progress-container"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"progress-container"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"progress"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"progress"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>撥放歌曲</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"music/ukulele.mp3"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"audio"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>音樂圖片</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"img-container"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"images/ukulele.jpg"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"music-cover"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cover"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>音樂撥放按鈕，按鈕使用是 <a href="https://fontawesome.com/">Font Awesome</a> 顯示</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"navigation"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"prev"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"action-btn"</span>&gt;</span></span><br><span class="line">    //上一首</span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fas fa-backward"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"play"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"action-btn action-btn-big"</span>&gt;</span></span><br><span class="line">    //暫停或是撥放</span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fas fa-play"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"next"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"action-btn"</span>&gt;</span></span><br><span class="line">    //下一首</span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fas fa-forward"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>完成圖<br><img src="https://i.imgur.com/LxSk2FZ.png"></p><h2 id="樣式"><a href="#樣式" class="headerlink" title="樣式"></a>樣式</h2><p>樣式可以依照個人喜好來設定。<br>因為案例中在撥放音樂的時候，音樂圖片會像 CD 被讀取一樣一直旋轉，所以這裡介紹一下 CSS 的動畫效果 ( animation )。</p><p><code>@keyframes</code> : 動畫影格，控制 CSS 從哪移動到哪的概念。</p><p>在這案例中撥放音樂的時候會圖片會旋轉，旋轉就會用 rotate 來控制旋轉角度，再用 deg 為單位。</p><figure class="highlight css hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">@keyframes</span> rotate {</span><br><span class="line">  <span class="hljs-selector-tag">from</span> {</span><br><span class="line">    transform: rotate(0deg); //從甚麼角度開始</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="hljs-selector-tag">to</span> {</span><br><span class="line">    transform: rotate(360deg); //到什麼角度</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>CSS 動畫還有其他屬性可以使用。<br>以下圖片來自 : <a href="https://www.oxxostudio.tw/articles/201803/css-animation.html">完整解析 CSS 動畫 ( CSS Animation )</a><br><img src="https://i.imgur.com/eiIhcRF.png"></p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="1-抓取-DOM-元素"><a href="#1-抓取-DOM-元素" class="headerlink" title="1. 抓取 DOM 元素"></a>1. 抓取 DOM 元素</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> musicContainer = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#music-container'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> progressContainer = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#progress-container'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> progress = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#progress'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> audio = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#audio'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> cover = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#cover'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> PrevBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#prev'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> playBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#play'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> nextBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#next'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> title = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#title'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="2-撥放音樂的時候要顯示的歌曲名稱跟圖片"><a href="#2-撥放音樂的時候要顯示的歌曲名稱跟圖片" class="headerlink" title="2. 撥放音樂的時候要顯示的歌曲名稱跟圖片"></a>2. 撥放音樂的時候要顯示的歌曲名稱跟圖片</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> songs = [<span class="hljs-string">'hey'</span>, <span class="hljs-string">'summer'</span>, <span class="hljs-string">'ukulele'</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> songsIndex = <span class="hljs-number">2</span></span><br><span class="line"></span><br><span class="line">loadSong(songs[songsIndex])</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadSong</span>(<span class="hljs-params">song</span>) </span>{</span><br><span class="line">  title.innerText = song</span><br><span class="line">  audio.src = <span class="hljs-string">`music/<span class="hljs-subst">${song}</span>.mp3`</span></span><br><span class="line">  cover.src = <span class="hljs-string">`images/<span class="hljs-subst">${song}</span>.jpg`</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-撥放跟暫停"><a href="#3-撥放跟暫停" class="headerlink" title="3. 撥放跟暫停"></a>3. 撥放跟暫停</h3><p>監聽撥放跟暫停按鈕，再把這動作寫成 <code>callback function</code>。<br>在撥放音樂的時候要在 <code>musicContainer</code> DOM 上面加上 <code>classList play</code> ，才會產生動畫效果同時 <code>icon</code> 也會變更，撥放時是暫停的 <code>icon</code> ，暫停時是撥放的 <code>icon</code> 。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">playSong</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  musicContainer.classList.add(<span class="hljs-string">'play'</span>)</span><br><span class="line">  playBtn.querySelector(<span class="hljs-string">'i.fas'</span>).classList.remove(<span class="hljs-string">'fa-play'</span>)</span><br><span class="line">  playBtn.querySelector(<span class="hljs-string">'i.fas'</span>).classList.add(<span class="hljs-string">'fa-pause'</span>)</span><br><span class="line"></span><br><span class="line">  audio.play()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pauseSong</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  musicContainer.classList.remove(<span class="hljs-string">'play'</span>)</span><br><span class="line">  playBtn.querySelector(<span class="hljs-string">'i.fas'</span>).classList.add(<span class="hljs-string">'fa-play'</span>)</span><br><span class="line">  playBtn.querySelector(<span class="hljs-string">'i.fas'</span>).classList.remove(<span class="hljs-string">'fa-pause'</span>)</span><br><span class="line"></span><br><span class="line">  audio.pause()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">playBtn.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">() =&gt;</span> {</span><br><span class="line">  <span class="hljs-keyword">const</span> isPlaying = musicContainer.classList.contains(<span class="hljs-string">'play'</span>)</span><br><span class="line">  <span class="hljs-keyword">if</span> (isPlaying) {</span><br><span class="line">    pauseSong()</span><br><span class="line">  } <span class="hljs-keyword">else</span> {</span><br><span class="line">    playSong()</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="4-切換歌曲"><a href="#4-切換歌曲" class="headerlink" title="4. 切換歌曲"></a>4. 切換歌曲</h3><p>利用陣列的數量跟索引值決定下一首，但陣列中的索引值最小是 0，如果一直按上一首歌曲，到索引值 0 的時候就會卡住了，不會從最後面的歌曲開始往回推，所以要用函式判斷，當小於歌曲陣列的索引值時，要從陣列的最後一個索引開始往回推。</p><h4 id="上一首"><a href="#上一首" class="headerlink" title="上一首"></a>上一首</h4><p>判斷式中 <code>songs.length - 1</code> 是因為陣列內長度是 3 ，但索引值是 2 ，所以<br><code>3 - 1</code> 會回到歌曲索引值的 2 也就是最後一首，這樣一直按上一首的話就可以變成無窮迴圈了</p><h4 id="下一首"><a href="#下一首" class="headerlink" title="下一首"></a>下一首</h4><p>同理，如果點擊的數字大於陣列中的索引值 ( 最後一首歌 )，那就讓陣列回索引值為 0 的第一首歌曲開始。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">preSong</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  songsIndex--</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (songsIndex &lt; <span class="hljs-number">0</span>) {</span><br><span class="line">    songsIndex = songs.length - <span class="hljs-number">1</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  loadSong(songs[songsIndex])</span><br><span class="line"></span><br><span class="line">  playSong()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nextSong</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  songsIndex++</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (songsIndex &gt; songs.length - <span class="hljs-number">1</span>) {</span><br><span class="line">    songsIndex = <span class="hljs-number">0</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  loadSong(songs[songsIndex])</span><br><span class="line"></span><br><span class="line">  playSong()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PrevBtn.addEventListener(<span class="hljs-string">'click'</span>, preSong)</span><br><span class="line">nextBtn.addEventListener(<span class="hljs-string">'click'</span>, nextSong)</span><br></pre></td></tr></tbody></table></figure><h3 id="5-顯示進度讀取條"><a href="#5-顯示進度讀取條" class="headerlink" title="5. 顯示進度讀取條"></a>5. 顯示進度讀取條</h3><p>撥放音樂的時候時間軸會更新同時觸發 <code>updateProgress</code> function ，function 會帶出 progress bar 讀取進度。</p><ul><li><code>timeupdate</code> : 在更新時間的時候會觸發</li><li><code>e.srcElement</code> 是目前事件觸發的來源，用 <code>console.log</code> 查看，顯示下圖<br><img src="https://i.imgur.com/u1ixS8l.png"></li><li><code>duration</code> : 時間的總長度</li><li><code>currentTime</code> : 當下讀取的時間軸<br><img src="https://i.imgur.com/ulsD1u7.png"></li></ul><p><code>progress</code> 會隨著音樂時間的長度顯示 bar 條。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateProgress</span>(<span class="hljs-params">e</span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> { duration, currentTime } = e.srcElement</span><br><span class="line">  <span class="hljs-keyword">const</span> progressPercent = (currentTime / duration) * <span class="hljs-number">100</span></span><br><span class="line">  progress.style.width = <span class="hljs-string">`<span class="hljs-subst">${progressPercent}</span>%`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">audio.addEventListener(<span class="hljs-string">'timeupdate'</span>, updateProgress)</span><br></pre></td></tr></tbody></table></figure><h3 id="6-指定音樂撥放的時間軸"><a href="#6-指定音樂撥放的時間軸" class="headerlink" title="6. 指定音樂撥放的時間軸"></a>6. 指定音樂撥放的時間軸</h3><p>有了 progress bar 就可以利用 bar 條指定時間軸。<br><code>clientWidth</code> : 是這個元素下的總寬度。<br>而這裡的 <code>clientWidth</code> 是指向 ，<code>progress</code> 的總寬度，如下圖<img src="https://i.imgur.com/W6jadN3.png"></p><p>有了總寬度還需要音樂時間軸的寬度<br>用 <code>console.log</code> 看 <code>clientWidth</code>、<code>clickX</code>，如下圖<br><img src="https://i.imgur.com/jL6oaR9.png"></p><p>當我點擊時間軸後，會跳出總長度跟該元素的長度，將這兩個元素相除的結果等於當下元素的長度，在乘上時間軸就可以把點擊當下 bar 條跟音樂時間軸同時綁定，這樣點擊時間軸會跳到該時段 bar 條也會同時顯示長度。</p><p>下圖比較能理解 <code>offset</code> 跟 <code>clint</code> 語法:<br><img src="https://i.imgur.com/WFOOzc5.png"><br><a href="https://www.pianshen.com/images/124/09a28ef42af91b0b7d5fff6c74bd3a0c.png">上圖來源</a></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setProgress</span>(<span class="hljs-params">e</span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> width = <span class="hljs-built_in">this</span>.clientWidth</span><br><span class="line">  <span class="hljs-keyword">const</span> clickX = e.offsetX</span><br><span class="line">  <span class="hljs-keyword">const</span> duration = audio.duration</span><br><span class="line"></span><br><span class="line">  audio.currentTime = (clickX / width) * duration</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">progressContainer.addEventListener(<span class="hljs-string">'click'</span>, setProgress)</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/CSS_Animations/Using_CSS_animations">CSS 動畫</a><br><a href="https://www.oxxostudio.tw/articles/201803/css-animation.html">完整解析 CSS 動畫 ( CSS Animation )</a><br><a href="https://animate.style/">Animate.css</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/timeupdate_event">HTMLMediaElement：timeupdate</a><br><a href="https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842308#overview">20 Web Projects With Vanilla JavaScript</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;功能描述:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;點擊進度條可以選擇播放時段&lt;/li&gt;
&lt;li&gt;撥放完後自動撥放下一曲&lt;/li&gt;
&lt;li&gt;可選擇上一曲或下一曲&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/pfv9RIb.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission25&quot;&gt;Github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pktseng.github.io/Web-Side-Project/mission25/index.html&quot;&gt;DEMO&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    <category term="作品集" scheme="https://pktseng.github.io/categories/JavaScrip/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    
    <category term="作品集" scheme="https://pktseng.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/tags/JavaScrip/"/>
    
  </entry>
  
  <entry>
    <title>JavaScrip - var 、 let 、 const 的差別</title>
    <link href="https://pktseng.github.io/2021/01/20/cosnt%E3%80%81var%E3%80%81let/"/>
    <id>https://pktseng.github.io/2021/01/20/cosnt%E3%80%81var%E3%80%81let/</id>
    <published>2021-01-19T16:00:00.000Z</published>
    <updated>2021-02-23T09:27:47.961Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每當我們在命名變數的時候，都會有作用域上的困擾，或是不熟悉 var 、 let 、 const 三者之間的差別，導致環境中的變數被互相汙染，甚至影響到全域變數，為釐清這當中的觀念，決定寫一篇文章來幫助自己，方便日後回憶。</p><a id="more"></a><h2 id="var-的宣告"><a href="#var-的宣告" class="headerlink" title="var 的宣告"></a>var 的宣告</h2><blockquote><p>var = variable 的縮寫</p></blockquote><p>當我們用 <code>var</code> 宣告變數並賦值後，如果後面又用相同的變數同樣又被賦值，那後面的值會覆蓋掉前面的值，如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> name = <span class="hljs-string">'ken'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> name = <span class="hljs-string">'kevin'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(name)</span><br></pre></td></tr></tbody></table></figure><p>變數同樣設為 <code>name</code> ，但卻顯示後面的值。<br><img src="https://i.imgur.com/edspqWp.png"></p><p>那如果用大括號包起來呢 ?<br>( 這邊用大括號是為了待會的 let 宣告比較，所埋下的伏筆 )</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> name = <span class="hljs-string">'ken'</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">  <span class="hljs-keyword">var</span> name = <span class="hljs-string">'kevin'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(name)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/s531jyy.png"><br>結果還是一樣的。</p><p>再輸入 <code>window.name</code> 查看，發現全域上已經有 <code>name</code> 的值了。<br><img src="https://i.imgur.com/ifNVCZs.png"></p><p>其實在宣告一個變數的時候，並不是故意要覆蓋掉之前的值，但有時候就這麼的剛好命名到相同的變數名稱。</p><p>用 <code>var</code> 宣告就等於是全域 ( <code>window</code> ) 的宣告，這是 <code>var</code> 的一個缺點，為防止這樣的事發生，我們可以用 <code>function</code> 包起來，防止變數互相汙染。</p><h3 id="以下示範用-function-控制-var-的作用域"><a href="#以下示範用-function-控制-var-的作用域" class="headerlink" title="以下示範用 function 控制 var 的作用域"></a>以下示範用 function 控制 var 的作用域</h3><h4 id="1-只在立即函式裡面宣告-var"><a href="#1-只在立即函式裡面宣告-var" class="headerlink" title="1. 只在立即函式裡面宣告 var"></a>1. 只在立即函式裡面宣告 var</h4><p>在 <code>function</code> 裡面用 <code>var</code> 宣告變數後，分別在 <code>function</code> 裡面跟外面用 <code>console.log</code> 查看</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">var</span> functionName = <span class="hljs-string">'kevin'</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是 function 裡面的 '</span> + functionName)</span><br><span class="line">})()</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'外面的'</span> + functionName)</span><br></pre></td></tr></tbody></table></figure><p>顯示下圖<br><img src="https://i.imgur.com/duOiXIj.png"></p><p>再用 <code>window.functionName</code> 查看，會顯示 <code>undefined</code>，就代表 <code>var</code> 會被限制在 <code>function</code> 裡面，不會汙染到外面的相同變數。<br><img src="https://i.imgur.com/gCTG8qA.png"></p><h4 id="2-在立即函式裡、外同時宣告-var"><a href="#2-在立即函式裡、外同時宣告-var" class="headerlink" title="2. 在立即函式裡、外同時宣告 var"></a>2. 在立即函式裡、外同時宣告 var</h4><p>如果不信脫離函式會汙染到全域或是其他變數的話，那在立即函式外面在用 <code>var</code> 宣告相同變數，但不同值，然後再用 <code>window.functionName</code> 查看全域變數。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">var</span> functionName = <span class="hljs-string">'kevin'</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是 function 裡面的 '</span> + functionName)</span><br><span class="line">})()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> functionName = <span class="hljs-string">'ken'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'外面的'</span> + functionName)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/NNGSXL9.png"><br>由上圖可知，如果 <code>var</code> 脫離了立即函式或是任何函示就會不受控制的污染其他相同變數，甚至是全域變數。</p><p><a href="https://codepen.io/gleofgja/pen/MWjxBVQ?editors=1011">DEMO</a></p><p>雖然有了 <code>function</code> 可以防止 <code>var</code> 宣告的變數汙染到其他變數，但除了 <code>function</code> 以外的 <code>for loop</code> 、<code>if else</code> 判斷式也會有不受控制的問題，以下示範</p><h4 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a>for loop</h4><p>用 <code>var</code> 宣告條件，在 scope 裡面跟外面都加上 <code>console.log</code>。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) {</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'裡面的 i = '</span> + i)</span><br><span class="line">}</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是外面的 i = '</span> + i)</span><br></pre></td></tr></tbody></table></figure><p>外面會顯示 5 是因為最後還會跑一次 <code>i++</code><br>此時 <code>i = 5</code> ，不符合 <code>i &lt; 5</code> 所以跳出 <code>for loop</code><br><img src="https://i.imgur.com/jEoMSZ1.png"></p><h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {</span><br><span class="line">  <span class="hljs-keyword">var</span> name = <span class="hljs-string">'ken'</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(name)</span><br><span class="line">}</span><br><span class="line"><span class="hljs-built_in">console</span>.log(name)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/J8IDSRA.png"></p><p><a href="https://codepen.io/gleofgja/pen/ZEpPMgE?editors=0011">DEMO</a></p><p>如果想一次防止變數遭受汙染或是不受控制的話，可以使用下一節要說的 let 宣告。</p><h2 id="let-的宣告"><a href="#let-的宣告" class="headerlink" title="let 的宣告"></a>let 的宣告</h2><blockquote><p>let 沒有縮寫</p></blockquote><p>上一段提到，如果用 var 宣告的話會不受控制或是汙染到其他變數，不過在 ES6 語法裡面，是有方法可以解決這問題的，就是 let 宣告。</p><p><strong>那 let 跟 var 的差別在於作用域 { }。</strong></p><p>剛才兩個變數都是用 <code>var</code> 來做宣告，後面若再用一樣的變數，那變數的值是可以被覆蓋的，但是在 <code>let</code> 宣告下是禁止的，<code>let</code> 只能遠許一個相同名稱的變數存在，以下示範</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> letName = <span class="hljs-string">'ken'</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">  <span class="hljs-keyword">let</span> letName = <span class="hljs-string">'kevin'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(letName)</span><br></pre></td></tr></tbody></table></figure><p>會顯示 <code>Uncaught SyntaxError: Identifier 'letName' has already been declared </code>，用 <code>name</code> 命名的變數已經存在了，如下圖<br><img src="https://i.imgur.com/7819U4b.png"></p><p>但是 let 是有作用域 ( scope ) 的，就是用 <code>{ }</code> 這個大括號，以下示範<br><img src="https://i.imgur.com/UT48xzX.png"></p><p>上面介紹 var 那段，用大括號包起了並用 var 宣告相同變數的話，值還是會被後面命名的變數給覆蓋掉，但是在 let 並用 { } 將其中一個相同名稱的變數包起來，就會獨立出來，也不會跳出<code>Identifier 'letName' has already been declared </code> 這樣的 error 訊息，</p><p>在 console.log 輸入 window.letName 會顯示 undefined，由此可知全域變數也沒有受到汙染。<br><img src="https://i.imgur.com/55Kmjyc.png"></p><h3 id="以下示範-let-的作用域"><a href="#以下示範-let-的作用域" class="headerlink" title="以下示範 let 的作用域"></a>以下示範 let 的作用域</h3><p>差別只在全域變數不會受到汙染，以下示範。</p><h4 id="1-只在立即函式裡面宣告-let"><a href="#1-只在立即函式裡面宣告-let" class="headerlink" title="1. 只在立即函式裡面宣告 let"></a>1. 只在立即函式裡面宣告 let</h4><p>效果會跟 var 一樣，因為 <code>var</code> 在 <code>function</code> 裡面是受控制的不會到到處汙染，<code>let</code> 是因為 scope <code>{ }</code> 的關係，所以也被限制住，scope 外面一樣讀取不到，所以會顯示 <code>undefined</code>。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">let</span> letFunctionName = <span class="hljs-string">'kevin'</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是 function 裡面的 '</span> + letFunctionName)</span><br><span class="line">})()</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'外面的'</span> + letFunctionName)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/YgAdm1b.png"></p><p>用 <code>window.letFunctionName</code> 查看，全域一樣沒被汙染。<br><img src="https://i.imgur.com/xP20HGT.png"></p><h4 id="2-在立即函式裡、外同時宣告-let"><a href="#2-在立即函式裡、外同時宣告-let" class="headerlink" title="2. 在立即函式裡、外同時宣告 let"></a>2. 在立即函式裡、外同時宣告 let</h4><p>效果跟 <code>var</code> 一樣。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">let</span> letFunctionName = <span class="hljs-string">'kevin'</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'我是 function 裡面的 '</span> + letFunctionName)</span><br><span class="line">})()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> letFunctionName = <span class="hljs-string">'ken'</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'外面的'</span> + letFunctionName)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/GsmnHQT.png"></p><p>但是輸入 <code>window.letFunctionName</code> 會顯示 <code>undefined</code>，全域一樣沒被汙染。</p><p><img src="https://i.imgur.com/QCbOlqE.png"></p><p>也就是說只要有 <code>let</code> 宣告加上 <code>{ }</code> 的話，就會可以完全控制變數，不需要擔心變數相同名稱，也甭擔心全域變數會受到汙染。</p><p><a href="https://codepen.io/gleofgja/pen/xxEBQNe?editors=0001">DEMO</a></p><h2 id="const-的宣告"><a href="#const-的宣告" class="headerlink" title="const 的宣告"></a>const 的宣告</h2><blockquote><p>const = constant 的縮寫</p></blockquote><h3 id="const-一旦被賦值後就不能再更改了。"><a href="#const-一旦被賦值後就不能再更改了。" class="headerlink" title="const 一旦被賦值後就不能再更改了。"></a>const 一旦被賦值後就不能再更改了。</h3><p>錯誤示範 :</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> constArry = <span class="hljs-number">10</span></span><br><span class="line">constArry = <span class="hljs-number">999</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(constArry)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/Krz3cy5.png"></p><h3 id="但是有個特例"><a href="#但是有個特例" class="headerlink" title="但是有個特例"></a>但是有個特例</h3><p>雖然不能更改已經用 const 賦予的值，<br>但是!! 可以更改<font color="#FF0000">物件或是陣列內的值</font>。</p><h4 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h4><p>更陣列內指定的值</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> constArry = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]</span><br><span class="line">constArry[<span class="hljs-number">0</span>] = <span class="hljs-number">999</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(constArry)</span><br></pre></td></tr></tbody></table></figure><p>是可以的。<br><img src="https://i.imgur.com/DEbUzCk.png"></p><h4 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h4><p>陣列內整個值換掉</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> constArry = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]</span><br><span class="line">constArry = [<span class="hljs-number">666</span> <span class="hljs-number">777</span>, <span class="hljs-number">888</span>]</span><br><span class="line"><span class="hljs-built_in">console</span>.log(constArry)</span><br></pre></td></tr></tbody></table></figure><p>是不行的，因為更改的已經是整個變數了，不是變數內的值。<br><img src="https://i.imgur.com/rMHiWiB.png"></p><p><a href="https://codepen.io/gleofgja/pen/vYXPvbJ?editors=1011">DEMO</a></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.youtube.com/watch?v=fJEw4eApm5I&amp;list=PLliocbKHJNwu150Kc7_eEywQBFLTJyPZs&amp;index=2&amp;t=1s">ES6 基础教学</a><br><a href="https://courses.hexschool.com/courses/670037/lectures/11952053">JavaScript 核心篇</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;每當我們在命名變數的時候，都會有作用域上的困擾，或是不熟悉 var 、 let 、 const 三者之間的差別，導致環境中的變數被互相汙染，甚至影響到全域變數，為釐清這當中的觀念，決定寫一篇文章來幫助自己，方便日後回憶。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    
    <category term="var" scheme="https://pktseng.github.io/tags/var/"/>
    
    <category term="let" scheme="https://pktseng.github.io/tags/let/"/>
    
    <category term="const" scheme="https://pktseng.github.io/tags/const/"/>
    
  </entry>
  
  <entry>
    <title>JavaScrip - 語言基礎 06 陣列的進階方法</title>
    <link href="https://pktseng.github.io/2021/01/19/JS%E9%80%B2%E9%9A%8E/"/>
    <id>https://pktseng.github.io/2021/01/19/JS%E9%80%B2%E9%9A%8E/</id>
    <published>2021-01-18T16:00:00.000Z</published>
    <updated>2021-01-19T08:18:36.919Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這幾天在練習寫作品集的時候發現幾個 JavaScrip 蠻常用的陣列語法，所以決定來寫一篇關於這些語法的文章。</p><a id="more"></a><h2 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h2><p><code>map(item, index, arry)</code> : 透過函式處理陣列中每個元素，最後會回傳出一個新的陣列，如果沒有回傳就是 <code>undefine。</code></p><p>函式內要傳入三個參數 :</p><ul><li>第一個參數是要帶入的<font color="#FF0000">每個元素 ( 必填 )</font>。</li><li>第二個參數是帶入<font color="#FF0000">值的索引值 ( 選填 )</font>。</li><li>第三個參數是帶入的<font color="#FF0000">陣列 ( 選填 )</font>。</li></ul><h3 id="map-進階寫法"><a href="#map-進階寫法" class="headerlink" title="map 進階寫法"></a>map 進階寫法</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> people = [<span class="hljs-string">'ken'</span>,<span class="hljs-string">'Bob'</span>,<span class="hljs-string">'Marry'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> result = people.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">man</span>)</span>{</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-string">'userName : '</span>+ man</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(result)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/TBgNFBW.png"></p><p>但如果把第 4 行註解掉，就會出現下圖，因為沒有回傳任何值。<br><img src="https://i.imgur.com/q7HrNjw.png"></p><h3 id="Data-structure-寫法"><a href="#Data-structure-寫法" class="headerlink" title="Data structure 寫法"></a>Data structure 寫法</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> people = [<span class="hljs-string">'ken'</span>,<span class="hljs-string">'Bob'</span>,<span class="hljs-string">'Marry'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapA</span>(<span class="hljs-params">people</span>)</span>{</span><br><span class="line">  <span class="hljs-keyword">let</span> result =[]</span><br><span class="line">  <span class="hljs-keyword">for</span>( <span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;people.length; i++){</span><br><span class="line">    <span class="hljs-comment">// console.log(people[i]) //確認 people[i] 有抓到</span></span><br><span class="line">    <span class="hljs-keyword">let</span> str = <span class="hljs-string">'userName : '</span> + people[i]</span><br><span class="line">    <span class="hljs-comment">// console.log(str) //確認 str 有被賦值</span></span><br><span class="line">    result.push(str)</span><br><span class="line">  }</span><br><span class="line">  <span class="hljs-keyword">return</span> result</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>輸入 <code>mapA(people)</code> 如下圖，結果是一樣的<br><img src="https://i.imgur.com/CYBcbxX.png"></p><p>如果剛接觸 JavaScript 的話還是建議用資料結構相關的寫法，訓練基本功。</p><p><a href="https://codepen.io/gleofgja/pen/JjRxZXr">DEMO</a></p><h2 id="Array-prototype-forEach"><a href="#Array-prototype-forEach" class="headerlink" title="Array.prototype.forEach()"></a>Array.prototype.forEach()</h2><p><code>forEach(item, index, arry)</code> : 會將陣列中每個元素套用到指定的函式裡進行運算。</p><p>函式內要傳入三個參數 : </p><ul><li>第一個參數表示<font color="#FF0000">每個元素的值 ( 必填 )</font>。</li><li>第二個參數為該<font color="#FF0000">元素的索引值 ( 選填 )</font>。</li><li>第三個參數則表示<font color="#FF0000">原本的陣列 ( 選填 )</font>。</li></ul><h3 id="map-amp-forEach-進階寫法的差異"><a href="#map-amp-forEach-進階寫法的差異" class="headerlink" title="map &amp; forEach 進階寫法的差異"></a>map &amp; forEach 進階寫法的差異</h3><p><strong><code>forEach</code> 跟 <code>map</code> 的差別在於 <code>forEach</code> 不會回傳出新的值，<code>map</code> 會回傳並產生新的陣列</strong>。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> people = [<span class="hljs-string">'ken'</span>,<span class="hljs-string">'Bob'</span>,<span class="hljs-string">'Marry'</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//forEach</span></span><br><span class="line"><span class="hljs-keyword">let</span> forEachResult = people.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">man</span>)</span>{</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-string">'userName : '</span>+ man</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//map</span></span><br><span class="line"><span class="hljs-keyword">let</span> mapResult = people.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">man</span>)</span>{</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-string">'userName : '</span>+ man</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在 <code>console.log</code> 輸入 <code>forEachResult</code> 會得到 <code>undefined</code> ，在 <code>mapResult</code> 會得到 return 的回傳值<br>顯示結過如下<br><img src="https://i.imgur.com/naX3yTS.png"></p><h3 id="forEach-amp-Data-structure-兩種寫法"><a href="#forEach-amp-Data-structure-兩種寫法" class="headerlink" title="forEach &amp; Data structure 兩種寫法"></a>forEach &amp; Data structure 兩種寫法</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// forEach</span></span><br><span class="line"><span class="hljs-keyword">let</span> forEachResult = people.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">man</span>)</span>{</span><br><span class="line">  <span class="hljs-built_in">console</span>.log( <span class="hljs-string">'userName : '</span>+ man)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Data structure</span></span><br><span class="line"><span class="hljs-keyword">for</span>( <span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;people.length; i++){</span><br><span class="line">  <span class="hljs-comment">// console.log(people[i]) //確認 people[i] 有抓到</span></span><br><span class="line">  <span class="hljs-keyword">let</span> str = <span class="hljs-string">'userName : '</span> + people[i]</span><br><span class="line">  <span class="hljs-comment">// console.log(str) //確認 str 有被賦值</span></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(str)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>用 <code>console.log</code> 查看，如下圖<br><img src="https://i.imgur.com/CinKSDr.png"></p><p><a href="https://codepen.io/gleofgja/pen/mdrvZwJ?editors=0011">DEMO</a></p><h2 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h2><p><code>filter()</code> : 將陣列中的「每一個」元素帶入指定的函式內做判斷，如果元素符合判斷條件，就回傳並產生新的陣列。</p><h3 id="filter-進階寫法"><a href="#filter-進階寫法" class="headerlink" title="filter 進階寫法"></a>filter 進階寫法</h3><p>給一個新的陣列，塞選出大於 5 的數，如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> result = a.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{</span><br><span class="line">  <span class="hljs-keyword">return</span> e &gt; <span class="hljs-number">5</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>在 <code>console.log</code> 輸入 <code>result</code> ，顯示下圖<br><img src="https://i.imgur.com/Gx8nF0M.png"></p><hr><p>或是限制區間，要記得括號，不然 <code>return</code> 會認不出來</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> result = a.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{</span><br><span class="line">  <span class="hljs-keyword">return</span> (e &gt; <span class="hljs-number">2</span>) &amp;&amp; (e &lt; <span class="hljs-number">6</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>會顯示下圖<br><img src="https://i.imgur.com/xbOszxf.png"></p><p><a href="https://codepen.io/gleofgja/pen/BaLMgvR?editors=0011">DEMO </a></p><h2 id="Array-prototype-find"><a href="#Array-prototype-find" class="headerlink" title="Array.prototype.find()"></a>Array.prototype.find()</h2><p><code>find()</code> : 將陣列中的「每一個」元素帶入指定的函式內做判斷，只會傳<font color="#FF0000">第一個</font>符合判斷條件的元素，如果沒有元素符合則會回傳 undefined。</p><ul><li><code>filter</code> 是回傳<font color="#FF0000">所有</font>符合條件的元素，但 <code>find</code> 只會傳<font color="#FF0000">第一個</font>符合判斷條件的元素</li></ul><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// find</span></span><br><span class="line"><span class="hljs-keyword">let</span> resultFind = a.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{</span><br><span class="line">  <span class="hljs-keyword">return</span> e &gt; <span class="hljs-number">2</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// filter</span></span><br><span class="line"><span class="hljs-keyword">let</span> resultFilter = a.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{</span><br><span class="line">  <span class="hljs-keyword">return</span> e &gt; <span class="hljs-number">2</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>分別在 <code>console.log</code> 輸入兩個參數，顯示如下圖<br><img src="https://i.imgur.com/WwPkaYN.png"></p><p>可以看到，輸入 :<br><code>resultFind</code> 只會回傳符合條件的<strong>第一個</strong>，<br><code>resultFilter</code> 會回傳<strong>所有</strong>符合條件的值同時產生新的陣列。</p><p><a href="https://codepen.io/gleofgja/pen/MWjLNWz?editors=0011">DEMO</a></p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.oxxostudio.tw/articles/201908/js-array.html#array_filter">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a><br><a href="https://codeshiba.teachable.com/courses/1230968/lectures/29642888">JS 語言基礎 06 陣列的進階方法</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這幾天在練習寫作品集的時候發現幾個 JavaScrip 蠻常用的陣列語法，所以決定來寫一篇關於這些語法的文章。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    
    <category term="Javascript" scheme="https://pktseng.github.io/tags/Javascript/"/>
    
    <category term="map" scheme="https://pktseng.github.io/tags/map/"/>
    
    <category term="filter" scheme="https://pktseng.github.io/tags/filter/"/>
    
    <category term="forEach" scheme="https://pktseng.github.io/tags/forEach/"/>
    
    <category term="find" scheme="https://pktseng.github.io/tags/find/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Cookie、LocalStorage、SessionStorage 的差異跟使用</title>
    <link href="https://pktseng.github.io/2021/01/18/JavaScript%20-%20Cookie%E3%80%81LocalStorage%E3%80%81Sessi/"/>
    <id>https://pktseng.github.io/2021/01/18/JavaScript%20-%20Cookie%E3%80%81LocalStorage%E3%80%81Sessi/</id>
    <published>2021-01-17T16:00:00.000Z</published>
    <updated>2021-01-19T08:06:42.627Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>利用 Javascript 將資料存到瀏覽器裡面，但是因為 <code>http request</code> 的關係，瀏覽器並不會知道上一個跟目前的使用者是誰，這時候就需要把使用者的資料帶到後端 sever 上。</p><p>例如我在 A 電腦開啟購物網頁選購商品並存取選購的商品資料但是在 B 電腦開啟同樣的網頁但是卻沒有剛才在 A 電腦選購的資料，這是因為資料是存在自己本地的瀏覽器裡面而不是存在後端的 sever 上，如果是存在後台的sever 上，那不管我使用哪一台點腦，都可以開啟我在 A 電腦上選購的資料。</p><p>接下來就要介紹瀏覽器是如何存取資料的。</p><a id="more"></a><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h3><p>Cookie 本身非常小，只有 4k 所以載入速度很快，瀏覽器也會記錄使用者的資料，最多可以記錄 300 多個 Cookie，但一個網站最多只能記錄 20 個左右的 Cookie 。那 Cookie 是透過 <code>Set-Cookie header response</code> 給客戶端的瀏覽器，每當我們開啟瀏覽器發出 request 時， sever 端都會自動把該網站 (domain) 的 Cookie 自動載入。</p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>通常都會被使用在登入頁面的狀態、購物網站的選購資訊或是追蹤客戶的廣告上。</p><h3 id="特點"><a href="#特點" class="headerlink" title="特點"></a>特點</h3><ol><li>大小只有 4Kb 左右</li><li>紀錄使用者的個資</li><li>每當瀏覽器發出 request 都會自動載入該使用的資料</li><li>將資料存在客戶端 </li><li>只能在該網站 (domain) 內開啟</li><li>可以設定關閉瀏覽器後失效的時間</li></ol><h3 id="Set-Cookie-header"><a href="#Set-Cookie-header" class="headerlink" title="Set-Cookie header"></a>Set-Cookie header</h3><p>如果要讓無狀態的 http 知道客戶目前的狀態，就要用 <code>Set-Cookie</code> 把使用紀錄存到 Cookie 裡面，這樣下次在別的瀏覽器上向同個網站 (domain) 的 sever 發出 request 的時候，<code>Request Headers</code> 就可以透過 sever 查看 Cookie 的內容同時確認目前客戶的狀態。</p><p>Set-Cookie 寫法如下:</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">Set</span>-Cookie: key = value</span><br></pre></td></tr></tbody></table></figure><p>瀏覽器會依照 <code>Set-Cookie</code> 設定的內容建立 <code>key</code> 跟 <code>value</code>。之後當瀏覽器發出 request 的時候，就會自動載入 <code>key</code> 跟 <code>value</code>。</p><h3 id="Cookie-屬性"><a href="#Cookie-屬性" class="headerlink" title="Cookie 屬性"></a>Cookie 屬性</h3><p>除了 <code>Set-Cookie</code> 外，還有其他要知道的屬性。</p><ul><li><code>domain</code> : Cookie 一定要在同個網站 (domain)，下輸入使用者資料，不可能拿 A 網站的 Cookie ，用在 B 網站上。</li><li><code>path</code> : 只能讀取到指定路徑下的 Cookie，如果要讓整個網站都能讀取到就寫 <code>path = /</code> 。</li><li><code>Max-Age</code> : 設定有效期限，<font color="#FF0000">單位為秒</font>，設定的數字是正值時才有效，負值時為本次 session 有效，寫 0 就是刪除 Cookie。</li><li><code>Expires</code> : 一樣是設定有效時間，但在 HTTP 1.1 之後已經被 <code>max-age</code> 取代。</li><li><code>secure</code> : 當這個屬性被設為 true 時， Cookie 只能在安全的協議 (https) 中傳送。</li></ul><h3 id="Create-a-Cookie"><a href="#Create-a-Cookie" class="headerlink" title="Create a Cookie"></a>Create a Cookie</h3><p>在 JavaScript 裡面，一次只能建立一個 Cookie ，語法如下:</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">document</span>.cookie = newCookie</span><br><span class="line"><span class="hljs-comment">// newCookie 指的就是 key = value</span></span><br></pre></td></tr></tbody></table></figure><p>當一個 cookie 沒有設定失效時間，就是 session cookie ，該 cookie 會在使用者關閉瀏覽器後被自動刪除。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 設定兩個 cookie 叫 one, two</span></span><br><span class="line"><span class="hljs-comment">// 在瀏覽器關閉後會自動被刪除</span></span><br><span class="line"><span class="hljs-built_in">document</span>.cookie = <span class="hljs-string">'one=cookieOne'</span>;</span><br><span class="line"><span class="hljs-built_in">document</span>.cookie = <span class="hljs-string">'two=cookieTwo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 設定一個 age cookie 裡面的值是 22，儲存一分鐘</span></span><br><span class="line"><span class="hljs-built_in">document</span>.cookie = <span class="hljs-string">'age=22; max-age=60; path=/'</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="Read-a-Cookie"><a href="#Read-a-Cookie" class="headerlink" title="Read a Cookie"></a>Read a Cookie</h3><blockquote><p><code>document.cookie</code> 用來讀取 cookie，但讀取出來是一個很長的字串，字串裡面是所有曾經儲存的 cookie，格式是 key=value，用分號 ; 分隔不同的 cookie。來自 <a href="https://www.fooish.com/javascript/cookie.html">JavaScript Cookie</a></p></blockquote><h3 id="Change-a-Cookie"><a href="#Change-a-Cookie" class="headerlink" title="Change a Cookie"></a>Change a Cookie</h3><p>直接建立新的同名 cookie 覆蓋掉即可。</p><h3 id="Delete-a-Cookie"><a href="#Delete-a-Cookie" class="headerlink" title="Delete a Cookie"></a>Delete a Cookie</h3><p>設定一個過期的時間即可。</p><hr><h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><h3 id="介紹-1"><a href="#介紹-1" class="headerlink" title="介紹"></a>介紹</h3><ol><li><p>LocalStorage 是 HTML5 提供給網頁的儲存庫，一樣只能在同個網站 (domain) 上使用，但是他不會跟 Cookie 一樣從 sever 端提取資料，資料只會存在客戶的 local 端，即使把瀏覽器關閉資料還是會存在除非使用了清除的 API，不然資料是不會消失的。</p><blockquote><p>舉個例子 : 我們在逛博客來書店的時候，只要點擊某本書，最下面有個最近瀏覽紀錄就會顯是我剛才選的書籍資訊，即使關掉網頁，剛才所點選的書籍資料也還是會存在。</p></blockquote></li><li><p>那 localStorage 要注意的地方是他只接受字串 (string) 型別，所以在寫入的時候 key 跟 value 要記得轉換!!</p></li></ol><h3 id="特點-1"><a href="#特點-1" class="headerlink" title="特點"></a>特點</h3><ol><li>大小 5Mb 左右</li><li>沒有過期時間，除非手動刪除，就算刷新頁面資料還是在</li><li>Storage 只會存在客戶端的瀏覽器上</li><li>使用 key、value  的方式給值或取值</li></ol><h3 id="搭配使用的-API"><a href="#搭配使用的-API" class="headerlink" title="搭配使用的 API"></a>搭配使用的 API</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">JSON</span>.parse()</span><br><span class="line"><span class="hljs-built_in">JSON</span>.string()</span><br><span class="line"></span><br><span class="line">setItem(key, value)</span><br><span class="line">getItem(key)</span><br><span class="line"></span><br><span class="line">removeItem(key)</span><br><span class="line">clear()</span><br></pre></td></tr></tbody></table></figure><h3 id="setItem、getItem、clear-API-的應用"><a href="#setItem、getItem、clear-API-的應用" class="headerlink" title="setItem、getItem、clear API 的應用"></a>setItem、getItem、clear API 的應用</h3><p>當我們要資料存到 localStorage 裡面就要用<code> setItem</code> 設定 <code>key</code> 跟 <code>value</code> 值，設定好後就可以用 <code>getItem</code> 去抓。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 型別是字串</span></span><br><span class="line"><span class="hljs-keyword">let</span> str = <span class="hljs-string">'ken'</span></span><br><span class="line"><span class="hljs-comment">// localStorage.setItem('key', value)</span></span><br><span class="line"><span class="hljs-comment">// 設定 setItem</span></span><br><span class="line"><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'userName'</span>, str)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 取值 getItem</span></span><br><span class="line"><span class="hljs-built_in">localStorage</span>.getItem(str)</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'userName'</span>)) </span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/vDh5rtD.png"></p><p>如過查看發現 localStorage 有其他資訊請先打開 clear() 清掉，再執行一次。(要記得關掉 clear </p><p><a href="https://codepen.io/gleofgja/pen/dypaWYm?editors=1011">DEMO</a></p><p>接下來加入輸入框，在點擊 <code>button</code> 按鈕的時候會跳出輸入框裡面的值，在把值輸入到 localStorage 裡面。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"name"</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'name'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">'點擊'</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'btn'</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.btn'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">saveName</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.name'</span>).value</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'userName'</span>, str)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="hljs-string">'click'</span>, saveName)</span><br></pre></td></tr></tbody></table></figure><p>到目前為止我還沒輸入任何東西，如下圖<br><img src="https://i.imgur.com/A1TQ70E.png"></p><p>但是當我在輸入框輸入 <code>ken</code> ，輸入框的資料就會進入到 localStorage，如下圖<br><img src="https://i.imgur.com/45Pn0vT.png"></p><p>目前只是將資料<font color="#FF0000">輸入</font>，現在要將資料<font color="#FF0000">取出</font>，那要取出就要用 <code>getItem()</code> 的 API 。</p><p>在 html 多加一行</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">'取出'</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'btnCall'</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在 JS 加入 <code>getItem function</code> (第11行)</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// localStorage.clear()</span></span><br><span class="line"><span class="hljs-keyword">let</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.btn'</span>)</span><br><span class="line"><span class="hljs-keyword">let</span> call = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.btnCall'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//setItem</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">saveName</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  <span class="hljs-keyword">let</span> str = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.name'</span>).value</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'userName'</span>, str)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//getItem</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callName</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  <span class="hljs-keyword">let</span> getStr = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'userName'</span>)</span><br><span class="line">  alert(getStr)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="hljs-string">'click'</span>, saveName) <span class="hljs-comment">//setItem</span></span><br><span class="line">call.addEventListener(<span class="hljs-string">'click'</span>, callName) <span class="hljs-comment">//getItem</span></span><br></pre></td></tr></tbody></table></figure><p>輸入，尚未點擊<br><img src="https://i.imgur.com/QzZlk4G.png"></p><p>點擊後<br><img src="https://i.imgur.com/e8OBtqs.png"></p><p>點取出，跳出 <code>alert</code> 視窗<br><img src="https://i.imgur.com/DG4bIDy.png"></p><p><font color="#FF0000">注意!!</font> 目前都是<font color="#FF0000">字串型別</font>。<br>分別在 <code>saveName</code>、<code>callName</code> 裡面加入 <code>console.log</code> 查看，如下圖<br><img src="https://i.imgur.com/OEqCbVy.png"></p><p><a href="https://codepen.io/gleofgja/pen/wvzNdrv?editors=1111">DEMO</a></p><h3 id="JSON-parse、JSON-string-API-的應用"><a href="#JSON-parse、JSON-string-API-的應用" class="headerlink" title="JSON.parse、JSON.string API 的應用"></a>JSON.parse、JSON.string API 的應用</h3><p><code>JSON.parse()</code> 的做用是將 localStorage 的 <code>key</code> 跟 <code>value</code> 值轉成物件型別，轉換型別後會變成物件或是陣列，這樣在抓取資料的時候就會比較方便，以下來示範為麼要使用 <code>JSON.parse()</code></p><ol><li>我先給一個陣列</li><li>在用 <code>setItem</code> 設定 <code>key</code> &amp; <code>value</code> 值</li><li>用 <code>getItem</code> 抓取設定好的 <code>key</code> 值</li><li>用 <code>console.log</code> 查看<figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 給個陣列</span></span><br><span class="line"><span class="hljs-keyword">let</span> arrCount = [</span><br><span class="line">  {<span class="hljs-attr">userName</span>: <span class="hljs-string">'ken'</span>},</span><br><span class="line">  {<span class="hljs-attr">age</span>: <span class="hljs-string">'22'</span>},</span><br><span class="line">  {<span class="hljs-attr">gender</span>: <span class="hljs-string">'male'</span>}</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 用 setItem 的把 key 、 value 值設定好</span></span><br><span class="line"><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'arrCountItem'</span>, arrCount)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 把設定好的值用 getItem 抓取，在賦直到 getArrCount 變數裡面</span></span><br><span class="line"><span class="hljs-keyword">let</span> getArrCount = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'arrCountItem'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(getArrCount)</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(getArrCount[<span class="hljs-number">0</span>].userName)</span><br></pre></td></tr></tbody></table></figure>顯示的結果如下圖<br><img src="https://i.imgur.com/YMIF3Eh.png"></li></ol><p><img src="https://i.imgur.com/a7QAo5o.png"></p><p>可以看到用 <code>setItem()</code> 設定的 <code>value</code> 值 localStorage 完全看不懂 ，要讓 localStorage 看得懂 <code>value</code> 值就必須是<font color="#FF0000">字串型別</font>!!!</p><p>用 <code>console.log</code> 看，也確定有抓到但卻顯示未定義，用 <code>typeof</code> 看一下型別，如下圖<br><img src="https://i.imgur.com/NjVZfgH.png"></p><p>透過上面這張圖就可以知道用 <code>getItem()</code> 抓到的是字串 (string) 型別並非是陣列，因為不管是陣列還是物件只要經過 localStorage 取出來的值都會變成字串 (string) 型別。然後第 16 行又用陣列的方式取值，所以會顯示 undefine 是正常的。</p><ul><li><font color="#FF0000">懶人包 :<br>進入 localStorage 之前必須要轉成字串型別 (JSON.string)，<br>取值的時候要轉成物件型別 (JSON.parse)</font>。</li></ul><p>以下示範正確方法:</p><ol><li>將陣列轉成字串型別</li><li>確認抓到的是字串不是物件型別</li><li>用 <code>setItem</code> 把 <code>key</code> &amp; <code>value</code> 值設定到 localStorage 裡面</li><li>再用 <code>getItem</code> 把 <code>key</code> 轉成物件並賦值到 getArrCount 變數裡面</li><li>再將 getArrCount 轉成物件型別<figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> arrCount = [</span><br><span class="line">  {<span class="hljs-attr">userName</span>: <span class="hljs-string">'ken'</span>},</span><br><span class="line">  {<span class="hljs-attr">age</span>: <span class="hljs-string">'22'</span>},</span><br><span class="line">  {<span class="hljs-attr">gender</span>: <span class="hljs-string">'male'</span>}</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 將陣列轉成字串型別</span></span><br><span class="line"><span class="hljs-keyword">let</span> arrCountString = <span class="hljs-built_in">JSON</span>.stringify(arrCount)</span><br><span class="line"><span class="hljs-comment">// 確認抓到的是字串不是物件型別</span></span><br><span class="line"><span class="hljs-built_in">console</span>.log(arrCountString)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 用 setItem 把 key &amp; value 值設定到 localStorage 裡面</span></span><br><span class="line"><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'arrCountItem'</span>, arrCountString)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 抓取 localStorage 的值，再用 getItem 把 key 轉成物件並賦值到 getArrCount 變數裡面</span></span><br><span class="line"><span class="hljs-keyword">let</span> getArrCount = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'arrCountItem'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 再將 getArrCount 轉成物件型別</span></span><br><span class="line"><span class="hljs-keyword">let</span> arrCountArry = <span class="hljs-built_in">JSON</span>.parse(getArrCount)</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">console</span>.log(arrCountArry)</span><br><span class="line"><span class="hljs-built_in">console</span>.log(arrCountArry[<span class="hljs-number">0</span>].userName)</span><br><span class="line"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(arrCountArry))</span><br></pre></td></tr></tbody></table></figure>這樣 localStorage 就可以正常<font color="#FF0000">賦值</font>，而我們也可以從 localStorage <font color="#FF0000">取值</font>，顯示如下圖</li></ol><p><img src="https://i.imgur.com/2MxjQrg.png"></p><p><img src="https://i.imgur.com/6CF4aju.png"></p><p><a href="https://codepen.io/gleofgja/pen/LYRqyaX?editors=1011">DEMO</a></p><h2 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h2><h3 id="介紹-2"><a href="#介紹-2" class="headerlink" title="介紹"></a>介紹</h3><p>跟 localStorage 一樣，差別在於只要將瀏覽器關掉資料就會被清除，也不會跟 sever 拿資料，資料是存在客戶本地端。</p><h3 id="特點-2"><a href="#特點-2" class="headerlink" title="特點"></a>特點</h3><ol><li>資料只會存在目前單一分頁裡，開新的分頁後資料是不會傳到另一個分頁裡的</li><li>當瀏覽器關掉後，資料就會被清除</li></ol><hr><h2 id="Cookie、LocalStorage、SessionStorage-縮圖"><a href="#Cookie、LocalStorage、SessionStorage-縮圖" class="headerlink" title="Cookie、LocalStorage、SessionStorage 縮圖:"></a>Cookie、LocalStorage、SessionStorage 縮圖:</h2><p><img src="https://i.imgur.com/W1wxk7Y.png"></p><p><a href="https://medium.com/@bebebobohaha/cookie-localstorage-sessionstorage-%E5%B7%AE%E7%95%B0-9e1d5df3dd7f">圖片來源: [JavaScript] Cookie、LocalStorage、SessionStorage 差異</a></p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.fooish.com/javascript/cookie.html">JavaScript Cookie</a><br><a href="https://ithelp.ithome.com.tw/articles/10203525">Day20 localStorage、sessionStorage</a><br><a href="https://ithelp.ithome.com.tw/articles/10203123">Day19 要來塊餅乾嗎? Cookie &amp; Session</a><br><a href="https://medium.com/@bebebobohaha/cookie-localstorage-sessionstorage-%E5%B7%AE%E7%95%B0-9e1d5df3dd7f">[JavaScript] Cookie、LocalStorage、SessionStorage 差異</a><br><a href="https://ithelp.ithome.com.tw/articles/10207933">Day20-網頁儲存！Web storage</a><br><a href="https://yakimhsu.com/project/project_w7_storage.html">[第七週] 瀏覽器資料儲存 - Cookie、LocalStorage、SessionStorage</a><br><a href="https://ithelp.ithome.com.tw/articles/10227602">27. [WEB] Cookie &amp; Session 是什麼？</a><br><a href="https://shubo.io/cookies/">[教學] 什麼是 Cookie？如何用 JS 讀取/修改 document.cookie?</a><br><a href="https://medium.com/@jscinin/javascript-cookie-localstorage-sessionstorage-%E4%B8%89%E7%A8%AE%E5%B7%AE%E7%95%B0-fe7f38260439">[JavaScript] Cookie、LocalStorage、SessionStorage 三種差異</a><br><a href="https://courses.hexschool.com/courses/670042/lectures/11952493">JavaScript 入門篇 - 學徒的試煉</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;利用 Javascript 將資料存到瀏覽器裡面，但是因為 &lt;code&gt;http request&lt;/code&gt; 的關係，瀏覽器並不會知道上一個跟目前的使用者是誰，這時候就需要把使用者的資料帶到後端 sever 上。&lt;/p&gt;
&lt;p&gt;例如我在 A 電腦開啟購物網頁選購商品並存取選購的商品資料但是在 B 電腦開啟同樣的網頁但是卻沒有剛才在 A 電腦選購的資料，這是因為資料是存在自己本地的瀏覽器裡面而不是存在後端的 sever 上，如果是存在後台的sever 上，那不管我使用哪一台點腦，都可以開啟我在 A 電腦上選購的資料。&lt;/p&gt;
&lt;p&gt;接下來就要介紹瀏覽器是如何存取資料的。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Cookie" scheme="https://pktseng.github.io/categories/Cookie/"/>
    
    <category term="LocalStorage" scheme="https://pktseng.github.io/categories/Cookie/LocalStorage/"/>
    
    <category term="SessionStorage" scheme="https://pktseng.github.io/categories/Cookie/LocalStorage/SessionStorage/"/>
    
    
    <category term="Javascript" scheme="https://pktseng.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 實作 - 電影訂位</title>
    <link href="https://pktseng.github.io/2021/01/16/JavaScript%20-%20Movie-seat-booking/"/>
    <id>https://pktseng.github.io/2021/01/16/JavaScript%20-%20Movie-seat-booking/</id>
    <published>2021-01-15T16:00:00.000Z</published>
    <updated>2021-03-02T06:21:49.409Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol><li>上方可以選擇要看的電影</li><li>選取位子同時計算電影價格</li></ol><p>完成圖<br><img src="https://i.imgur.com/AHsrrmk.png"></p><p><a href="https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission22">Github</a><br><a href="https://pktseng.github.io/Web-Side-Project/mission22/index.html">DEMO</a></p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>HTML 結構分成以下幾點:</p><h3 id="1-下拉選單可以選擇電影"><a href="#1-下拉選單可以選擇電影" class="headerlink" title="1. 下拉選單可以選擇電影"></a>1. 下拉選單可以選擇電影</h3><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">".movieContainer"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Pick a movie:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"movie"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"10"</span>&gt;</span>Avengers: Endgame ($10)<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"12"</span>&gt;</span>Joker ($12)<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"8"</span>&gt;</span>Toy Story 4 ($8)<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"9"</span>&gt;</span>The Lion King ($9)<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="2-告示座位狀態圖"><a href="#2-告示座位狀態圖" class="headerlink" title="2. 告示座位狀態圖"></a>2. 告示座位狀態圖</h3><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"showcase"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>N/A<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat selected"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>Selected<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat occupied"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>Occupied<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="3-點選尚未選擇、已選擇的跟可以選擇的座位"><a href="#3-點選尚未選擇、已選擇的跟可以選擇的座位" class="headerlink" title="3. 點選尚未選擇、已選擇的跟可以選擇的座位"></a>3. 點選尚未選擇、已選擇的跟可以選擇的座位</h3><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"screen"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"seat"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="4-顯示選擇的座位數量跟電影票價"><a href="#4-顯示選擇的座位數量跟電影票價" class="headerlink" title="4. 顯示選擇的座位數量跟電影票價"></a>4. 顯示選擇的座位數量跟電影票價</h3><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text"</span>&gt;</span></span><br><span class="line">  You have selected</span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"count"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">  seats for a price of $</span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"total"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="完成的結構圖如下"><a href="#完成的結構圖如下" class="headerlink" title="完成的結構圖如下:"></a>完成的結構圖如下:</h3><p><img src="https://i.imgur.com/042hQLy.png"></p><hr><h2 id="樣式"><a href="#樣式" class="headerlink" title="樣式"></a>樣式</h2><p>載入字體 <code>@import url('https://fonts.googleapis.com/css?family=Lato&amp;display=swap');</code></p><p>依照 HTML 結構來增加樣式</p><h3 id="1-全域設定"><a href="#1-全域設定" class="headerlink" title="1. 全域設定"></a>1. 全域設定</h3><p>移到視窗正中央</p><figure class="highlight scss hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">* {</span><br><span class="line">  <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">body</span> {</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#242333</span>;</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">  <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="hljs-attribute">align-items</span>: center;</span><br><span class="line">  <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="line">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="line">  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'Lato'</span>, sans-serif;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/vDuzvY2.png"></p><hr><h3 id="2-給選單樣式"><a href="#2-給選單樣式" class="headerlink" title="2. 給選單樣式"></a>2. 給選單樣式</h3><figure class="highlight scss hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.movieContainer</span> {</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-selector-tag">select</span> {</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">    <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="line">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="line">    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">15px</span> <span class="hljs-number">5px</span> <span class="hljs-number">15px</span>;</span><br><span class="line">    -moz-appearance: none;</span><br><span class="line">    -webkit-appearance: none;</span><br><span class="line">    appearance: none;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/DXj1pmX.png"></p><hr><h3 id="3-座位樣式"><a href="#3-座位樣式" class="headerlink" title="3. 座位樣式"></a>3. 座位樣式</h3><figure class="highlight scss hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.seat</span> {</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#444451</span>;</span><br><span class="line">  <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">3px</span>;</span><br><span class="line">  <span class="hljs-attribute">border-top-left-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">  <span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.container</span> {</span><br><span class="line">  <span class="hljs-attribute">perspective</span>: <span class="hljs-number">1000px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30px</span>;</span><br><span class="line">  <span class="hljs-selector-class">.row</span> {</span><br><span class="line">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/AEuoijm.png"></p><hr><h3 id="4-屏幕樣式"><a href="#4-屏幕樣式" class="headerlink" title="4. 屏幕樣式"></a>4. 屏幕樣式</h3><figure class="highlight scss hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.screen</span> {</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">  <span class="hljs-attribute">height</span>: <span class="hljs-number">70px</span>;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span> <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">transform</span>: rotateX(-<span class="hljs-number">45deg</span>);</span><br><span class="line">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">3px</span> <span class="hljs-number">10px</span> rgba(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.7</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/n1si14x.png"></p><hr><h3 id="5-選擇座位數量跟票價的樣式"><a href="#5-選擇座位數量跟票價的樣式" class="headerlink" title="5. 選擇座位數量跟票價的樣式"></a>5. 選擇座位數量跟票價的樣式</h3><figure class="highlight scss hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.text</span> {</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span> <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-selector-tag">span</span> {</span><br><span class="line">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#6feaf6</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/U2033ZX.png"></p><hr><h3 id="6-排列一下座位"><a href="#6-排列一下座位" class="headerlink" title="6. 排列一下座位"></a>6. 排列一下座位</h3><figure class="highlight scss hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.showCase</span> {</span><br><span class="line">  <span class="hljs-attribute">background</span>: rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">10px</span>;</span><br><span class="line">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#777</span>;</span><br><span class="line">  <span class="hljs-attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">  <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="line">  &amp;<span class="hljs-selector-class">.seat</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-class">.occupied</span>)<span class="hljs-selector-pseudo">:hover</span> {</span><br><span class="line">    <span class="hljs-attribute">cursor</span>: default;</span><br><span class="line">    <span class="hljs-attribute">transform</span>: scale(<span class="hljs-number">1</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="hljs-selector-tag">li</span> {</span><br><span class="line">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">    <span class="hljs-attribute">align-items</span>: center;</span><br><span class="line">    <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="line">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="line">    <span class="hljs-selector-tag">small</span> {</span><br><span class="line">      <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">2px</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/lz2FabD.png"></p><hr><h3 id="7-排列電影座位"><a href="#7-排列電影座位" class="headerlink" title="7. 排列電影座位"></a>7. 排列電影座位</h3><p>因為是 scss 寫法所以寫在 seats 裡面</p><figure class="highlight scss hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-class">.seat</span> {</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#444451</span>;</span><br><span class="line">  <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">3px</span>;</span><br><span class="line">  <span class="hljs-attribute">border-top-left-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">  <span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">  &amp;<span class="hljs-selector-class">.selected</span> {</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#6feaf6</span>;</span><br><span class="line">  }</span><br><span class="line">  &amp;<span class="hljs-selector-class">.occupied</span> {</span><br><span class="line">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">  }</span><br><span class="line">  &amp;<span class="hljs-selector-pseudo">:nth-of-type</span>(2) {</span><br><span class="line">    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">18px</span>;</span><br><span class="line">  }</span><br><span class="line">  &amp;<span class="hljs-selector-pseudo">:nth-last-of-type</span>(2) {</span><br><span class="line">    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">18px</span>;</span><br><span class="line">  }</span><br><span class="line">  &amp;<span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-class">.occupied</span>)<span class="hljs-selector-pseudo">:hover</span> {</span><br><span class="line">    <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="hljs-attribute">transform</span>: scale(<span class="hljs-number">1.2</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/AGT0L4B.png"></p><hr><p>以上切版就算完成了<del>~</del></p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>接下來要進行 JavaScript 事件的撰寫</p><h3 id="1-抓取-DOM-元素"><a href="#1-抓取-DOM-元素" class="headerlink" title="1. 抓取 DOM 元素"></a>1. 抓取 DOM 元素</h3><p>用選擇器抓取 dom 元素，在賦值到各個變數上，會使用 const 是因為此變數之後不能在更動。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.container'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> seats = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.row .seat:not(.occupied)'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> count = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#count'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> total = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#total'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> movieSelect = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#movie'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="2-選擇座位時觸發的事件"><a href="#2-選擇座位時觸發的事件" class="headerlink" title="2. 選擇座位時觸發的事件"></a>2. 選擇座位時觸發的事件</h3><p>當點擊座位時會先判斷 class 是否有 seat 同時不包含 occupied 的，再用 contains 讓值變成布林值，如果回傳 true 就會用 toggle 增加 selected 屬性，這樣當我們選擇座位時就會更改樣式了。</p><p>下面再放一個 <code>updateSelectCount</code> 函式，在我們更動座位時就會觸發。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 監聽容器內座位數值的變化</span></span><br><span class="line">container.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {</span><br><span class="line">  <span class="hljs-keyword">if</span> (</span><br><span class="line">    e.target.classList.contains(<span class="hljs-string">'seat'</span>) &amp;&amp;</span><br><span class="line">    !e.target.classList.contains(<span class="hljs-string">'occupied'</span>)</span><br><span class="line">  ) {</span><br><span class="line">    e.target.classList.toggle(<span class="hljs-string">'selected'</span>)</span><br><span class="line">    updateSelectCount()</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"><span class="hljs-comment">// 執行</span></span><br><span class="line">updateSelectCount()</span><br></pre></td></tr></tbody></table></figure><h3 id="3-計算座位數量跟電影票價"><a href="#3-計算座位數量跟電影票價" class="headerlink" title="3. 計算座位數量跟電影票價"></a>3. 計算座位數量跟電影票價</h3><p>當我們選擇座位的時候同時計算座位數量跟電影價格，再將數量跟價格賦予到 DOM 元素裡面。<br>利用 <code>querySelectorAll</code> 把 <code>.row .seat.selected</code> 選起來，再以陣列的方式傳回，<br>用 <code>console.log(selectedSeats)</code> 會看到下圖</p><p><img src="https://i.imgur.com/B92hT1v.png"></p><p><img src="https://i.imgur.com/YPyzIup.png"></p><p>有了陣列後就可以計算數量，用 <code>console.log(selectedSeatCount)</code> 可以看到選擇的數量，例如我選 4 個座位<br><img src="https://i.imgur.com/xgbbFI1.png"></p><p><img src="https://i.imgur.com/BVUtWeY.png"></p><p>再把選擇座位的數量賦予到 <code>count</code> DOM 元素裡面，就是最下面會顯示的座位數量，再利用這數量去計算票價後，賦直到 <code>total</code> 裡面。<br><img src="https://i.imgur.com/MJr3DwM.png"></p><ul><li><code>ticketPrice</code> 會用 <code>+</code> 號的原因是要將字串轉成數字型式</li></ul><p>這段程式碼如下:</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> ticketPrice = +movieSelect.value</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 計算選擇的座位數量價格</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateSelectCount</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// 將所選取到的座位塞入 selectedSeats 這個變數中</span></span><br><span class="line">  <span class="hljs-keyword">const</span> selectedSeats = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.row .seat.selected'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> selectedSeatCount = selectedSeats.length</span><br><span class="line">  count.innerText = selectedSeatCount <span class="hljs-comment">// 將選到的座位數量塞到 count 裡面</span></span><br><span class="line">  total.innerText = selectedSeatCount * ticketPrice <span class="hljs-comment">// 計算座位數量跟票價</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-選擇電影同時計算票價"><a href="#4-選擇電影同時計算票價" class="headerlink" title="4. 選擇電影同時計算票價"></a>4. 選擇電影同時計算票價</h3><p>這函式是為了當我們在切換電影的時候，重新計算座位跟票價。</p><p>在選擇電影的時候就會觸發，計算當下所選的電影價格，再將電影的索引跟選擇的價格放到 <code>setMovieData</code> callback function 裡面，同時更新座位數量跟票價。</p><ul><li><code>+e.target.value</code> 前面的 <code>+</code> 為了確保是數字型別。</li></ul><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 依照選擇的電影變更價格</span></span><br><span class="line">movieSelect.addEventListener(<span class="hljs-string">'change'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {</span><br><span class="line">  ticketPrice = +e.target.value</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 查看我們選擇的電影索引跟價格</span></span><br><span class="line">  <span class="hljs-comment">// console.log(e.target.selectedIndex, e.target.value)</span></span><br><span class="line"></span><br><span class="line">  setMovieData(e.target.selectedIndex, e.target.value)</span><br><span class="line">  <span class="hljs-comment">// 將電影索引跟價格的參數塞到 setMovieData 裡面</span></span><br><span class="line">  updateSelectCount() <span class="hljs-comment">//執行</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>到目前為止，我們已經完成選擇座位的數量跟票價的計算。接下來要進入到 localStorage 裡面進行設定，因為目前以目前的成是馬刷新頁面，資料就會不見，所以要記錄到瀏覽器的資料庫裏面。</p><h3 id="5-將資料紀錄到瀏覽器的數據庫裡面"><a href="#5-將資料紀錄到瀏覽器的數據庫裡面" class="headerlink" title="5. 將資料紀錄到瀏覽器的數據庫裡面"></a>5. 將資料紀錄到瀏覽器的數據庫裡面</h3><p>這麼做的原因是防止我們刷新頁面的時候剛才所選的資料全部都消失，這時候就會用到 localStorage、setItem、getItem、JSON.parse 等觀念。</p><p>上段 <code>movieSelect</code> 函式是在監聽選擇電影價格跟位字的索引，當我們在選擇座位或是電影的同時就會觸發到 <code>setMovieData</code> 函式，而 <code>setMovieData</code> 函式帶入的那兩個值就是要記錄到瀏覽器資料庫裡面的參數。</p><ul><li><h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h4>如果想把資料存在瀏覽器的資料庫裡裡面就會用到 localStorage，但要注意的是 localStorage 會只接受字串，所以要將資料轉成字串 (string) 的型式。</li></ul><p>課程中有使用到 ES6 解構語法，將所選擇的座位 <code>selectedSeats</code> 變成陣列，再利用 map 語法處理陣列中的每個元素，然後回傳出新的值。</p><ul><li>map: (第一個是每個元素的值 ( 必填 )，第二個是當前元素的索引值 ( 選填 )，第三個是當前的陣列 ( 選填 ))</li><li>indexOf: 會判斷陣列中是否包含某個值，判斷的方式為「由左而右」，如果有包含就回傳這個值在陣列中的索引值</li></ul><p>這段函式的意思是當我選擇了座位 <code>selectedSeats</code> ，將這些選擇的座位化成陣列型式<code>[...selectedSeats] </code>，再把陣列內的座位拿去判斷 (indexOf) 索引值再回傳，如果找不到索引值就會顯示 -1。</p><p>用 console 查看，當我選擇了第 1、第 2 跟第 7 個座位就會顯示索引值跟陣列。<br><img src="https://i.imgur.com/azBL9mU.png"></p><p>而此段函式要放到 <code>updateSelectCount</code> 函式中，這樣再選取座位的時候就會把索引值傳存到 localStorage 裡面。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 將[...selectedSeats]解構的值塞到函式裡面運算，再把結果 return 出來</span></span><br><span class="line"><span class="hljs-keyword">const</span> seatsIndex = [...selectedSeats].map(<span class="hljs-function">(<span class="hljs-params">seat</span>) =&gt;</span> [...seats].indexOf(seat))</span><br></pre></td></tr></tbody></table></figure><ul><li><h4 id="setItem"><a href="#setItem" class="headerlink" title="setItem"></a>setItem</h4>當我們將資料設定到瀏覽器數據庫裡面時，這個設定就是 setItem ，<br>寫法是這樣 <code>setItem('key', value)</code><br><code>key</code> 值就像是我們在填寫表單的時候會有姓名、年紀、電話這些的開頭<br><code>value</code> 值就是依照表單中的開頭依序填寫的內容，如: ken、100 歲、0910xxxxx</li></ul><p>在 <code>setMovieData</code> 函式中我們將座位索引的 <code>key</code> 設定成 <code>selectedMovieIndex</code>， <code>value</code> 設定成 <code>movieIndex</code>，同理，價格也是這樣設定，目的是將資料存入 localStorage 裡面。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 透過 localStorage 抓取電影索引值跟價格</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setMovieData</span>(<span class="hljs-params">movieIndex, moviePrice</span>) </span>{</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'selectedMovieIndex'</span>, movieIndex)</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'selectedMoviePrice'</span>, moviePrice)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'selectedSeats'</span>, <span class="hljs-built_in">JSON</span>.stringify(seatsIndex))</span><br></pre></td></tr></tbody></table></figure><ul><li><h4 id="getItem"><a href="#getItem" class="headerlink" title="getItem"></a>getItem</h4>用 setItem 設定好 key 跟 value 的值後，要將 value 值取出的話就要用 getItem 抓 key 值。</li></ul><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'selectedSeats'</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li><h4 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h4>因為 localStorage 只能讀字串型式的資料，所以當我們在讀取或是抓取資料的時候必須是物件的型式，這時就會用到 <code>JSON.parse</code>。</li></ul><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> selectedSeats = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'selectedSeats'</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="6-populateUI-function"><a href="#6-populateUI-function" class="headerlink" title="6. populateUI function"></a>6. populateUI function</h3><p>在選好座位數量並透過 setIetm 存放到 localStorage 資料庫裡面，現在要使用這些資料，所以會先用 getItem 抓取，然後在轉成物件格式，轉物件是因為資料如果是字串會抓不到，轉完之後在賦值到 <code>selectedSeats</code> 變數裡面</p><p>接下來就用<code>selectedSeats</code>變數來判斷是不是空值同時數量又必須大於 1，如果回傳的是 true ，再用 <code>forEach</code> 運算 <code>seats</code> 裡的每個參數，看看選擇的值是否都大於-1，因為陣列第一個值為 0，如果回傳 true ，再將 className 添加到 seat 裡面。</p><p>執行 populateUI 函式時也會同時執行另一項函式，剛才已經把電影的索引值設定好並丟到 localStorage 裡面，當我們在選擇電影時會先判斷我們選擇的是否是空值，如果不是就將這項索引值賦予到 <code>movieSelect</code> 函式裡。</p><ul><li>forEach: 會將陣列中每個元素套用到指定的函式裡進行運算</li></ul><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 紀錄資料，刷新後記錄仍然在</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">populateUI</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// 因為剛才是轉成字串，這裡要轉成物件</span></span><br><span class="line">  <span class="hljs-keyword">const</span> selectedSeats = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'selectedSeats'</span>))</span><br><span class="line">  <span class="hljs-keyword">if</span> (selectedSeats !== <span class="hljs-literal">null</span> &amp;&amp; selectedSeats.length &gt; <span class="hljs-number">0</span>) {</span><br><span class="line">    seats.forEach(<span class="hljs-function">(<span class="hljs-params">seat, index</span>) =&gt;</span> {</span><br><span class="line">      <span class="hljs-keyword">if</span> (selectedSeats.indexOf(index) &gt; <span class="hljs-number">-1</span>) {</span><br><span class="line">        seat.classList.add(<span class="hljs-string">'selected'</span>)</span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> selectedMovieIndex = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'selectedMovieIndex'</span>)</span><br><span class="line">  <span class="hljs-keyword">if</span> (selectedMovieIndex !== <span class="hljs-literal">null</span>) {</span><br><span class="line">    movieSelect.selectedIndex = selectedMovieIndex</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="hljs-comment">// 執行</span></span><br><span class="line">populateUI()</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.container'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> seats = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.row .seat:not(.occupied)'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> count = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#count'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> total = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#total'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> movieSelect = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#movie'</span>)</span><br><span class="line"><span class="hljs-keyword">let</span> ticketPrice = +movieSelect.value</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 計算選擇的座位數量價格</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateSelectCount</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// 將所選取到的座位塞入 selectedSeats 這個變數中</span></span><br><span class="line">  <span class="hljs-keyword">const</span> selectedSeats = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.row .seat.selected'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> selectedSeatCount = selectedSeats.length</span><br><span class="line">  count.innerText = selectedSeatCount <span class="hljs-comment">// 將選到的座位數量塞到 count 裡面</span></span><br><span class="line">  total.innerText = selectedSeatCount * ticketPrice <span class="hljs-comment">// 計算座位數量跟票價</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 將[...selectedSeats]解構的值塞到函式裡面運算</span></span><br><span class="line">  <span class="hljs-keyword">const</span> seatsIndex = [...selectedSeats].map(<span class="hljs-function">(<span class="hljs-params">seat</span>) =&gt;</span> [...seats].indexOf(seat))</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'selectedSeats'</span>, <span class="hljs-built_in">JSON</span>.stringify(seatsIndex))</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 依照選擇的電影變更價格</span></span><br><span class="line">movieSelect.addEventListener(<span class="hljs-string">'change'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {</span><br><span class="line">  ticketPrice = +e.target.value</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 查看我們選擇的電影索引跟價格</span></span><br><span class="line">  <span class="hljs-comment">// console.log(e.target.selectedIndex, e.target.value)</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 將電影索引跟價格的參數塞到 setMovieData 裡面</span></span><br><span class="line">  setMovieData(e.target.selectedIndex, e.target.value)</span><br><span class="line">  updateSelectCount() <span class="hljs-comment">//執行</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 透過 localStorage 抓取電影索引值跟價格</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setMovieData</span>(<span class="hljs-params">movieIndex, moviePrice</span>) </span>{</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'selectedMovieIndex'</span>, movieIndex)</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'selectedMoviePrice'</span>, moviePrice)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 紀錄資料，刷新後記錄仍然在</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">populateUI</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// 因為剛才是轉成字串，這裡要轉成物件</span></span><br><span class="line">  <span class="hljs-keyword">const</span> selectedSeats = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'selectedSeats'</span>))</span><br><span class="line">  <span class="hljs-keyword">if</span> (selectedSeats !== <span class="hljs-literal">null</span> &amp;&amp; selectedSeats.length &gt; <span class="hljs-number">0</span>) {</span><br><span class="line">    seats.forEach(<span class="hljs-function">(<span class="hljs-params">seat, index</span>) =&gt;</span> {</span><br><span class="line">      <span class="hljs-keyword">if</span> (selectedSeats.indexOf(index) &gt; <span class="hljs-number">-1</span>) {</span><br><span class="line">        seat.classList.add(<span class="hljs-string">'selected'</span>)</span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> selectedMovieIndex = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'selectedMovieIndex'</span>)</span><br><span class="line">  <span class="hljs-keyword">if</span> (selectedMovieIndex !== <span class="hljs-literal">null</span>) {</span><br><span class="line">    movieSelect.selectedIndex = selectedMovieIndex</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">populateUI()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 監聽容器內座位數值的變化</span></span><br><span class="line">container.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {</span><br><span class="line">  <span class="hljs-comment">// contains 會返回一個 boolean 值</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (</span><br><span class="line">    e.target.classList.contains(<span class="hljs-string">'seat'</span>) &amp;&amp;</span><br><span class="line">    !e.target.classList.contains(<span class="hljs-string">'occupied'</span>)</span><br><span class="line">  ) {</span><br><span class="line">    e.target.classList.toggle(<span class="hljs-string">'selected'</span>)</span><br><span class="line">    updateSelectCount()</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">updateSelectCount()</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.oxxostudio.tw/articles/201908/js-array.html#array_foreach">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a><br><a href="https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842068#questions">20 Web Projects With Vanilla JavaScript</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;上方可以選擇要看的電影&lt;/li&gt;
&lt;li&gt;選取位子同時計算電影價格&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;完成圖&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/AHsrrmk.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission22&quot;&gt;Github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pktseng.github.io/Web-Side-Project/mission22/index.html&quot;&gt;DEMO&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    <category term="作品集" scheme="https://pktseng.github.io/categories/JavaScrip/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    
    <category term="作品集" scheme="https://pktseng.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/tags/JavaScrip/"/>
    
  </entry>
  
  <entry>
    <title>jQuery - 選擇器的進階 Traversal</title>
    <link href="https://pktseng.github.io/2021/01/15/Traversal/"/>
    <id>https://pktseng.github.io/2021/01/15/Traversal/</id>
    <published>2021-01-14T16:00:00.000Z</published>
    <updated>2021-01-15T11:33:14.826Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="1-選擇器的進階-Traversal-遍歷-鄰居、爸爸與小孩"><a href="#1-選擇器的進階-Traversal-遍歷-鄰居、爸爸與小孩" class="headerlink" title="1. 選擇器的進階 Traversal(遍歷) 鄰居、爸爸與小孩"></a>1. 選擇器的進階 Traversal(遍歷) 鄰居、爸爸與小孩</h2><p>遍歷示意圖:<br><img src="https://i.imgur.com/t0TNBN2.png"><br>Traversal 這觀念就是透過 API 操作相鄰隔壁的元素，以下示範</p><a id="more"></a><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-1"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-2"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-3"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>原圖如下:<br><img src="https://i.imgur.com/vvusGy1.png"></p><p>接下來套用 jQuery 三步驟，讓 dom 變色</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'#ul-1'</span>).css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/zX89w0H.png"></p><p>確定可以變色後，接下來要使用 Traversal 的效果，而這效果的 API 是 <code>siblings</code></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'#ul-1'</span>).siblings().css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>會顯示下圖，自己不變動，周圍的變動<br><img src="https://i.imgur.com/X8ujRzt.png"></p><p>也可以透過鄰居再做其他動作，如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'#ul-1'</span>).siblings().first().css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>抓取鄰居的第一個，顯示如下<br><img src="https://i.imgur.com/pUKeHjY.png"></p><p>除了這方法還可以用陣列的方式抓取，但是如果用陣列的話會變成純元素，所以外面還是要用 <code>$()</code> ，將 <code>$('#ul-1').siblings().[1] </code>包起來，由於<font color="#FF0000">在 js 陣列裡面第一個索引都是從 0 開始算</font>，所以如果寫 <code>[1]</code> 就會顯示第二個，如下圖</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $($(<span class="hljs-string">'#ul-1'</span>).siblings().[<span class="hljs-number">1</span>]).css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/9dXHwVn.png"></p><p><a href="https://codepen.io/gleofgja/pen/eYdQEKg?editors=1011">DEMO</a></p><h2 id="2-鍊式-Chaining-寫法"><a href="#2-鍊式-Chaining-寫法" class="headerlink" title="2. 鍊式( Chaining )寫法"></a>2. 鍊式( Chaining )寫法</h2><p>jQuery 的鍊式( Chaining )寫法。就是 API 可以依照需求一直接下去。</p><p>利用上面的範例在各 <code>ul</code> 外再加上父層 <code>.ul-father</code> ，注意! 是 <code>className</code> 不是 <code>id</code></p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-1"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-2"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-3"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>樣式排版一下如下圖<br><img src="https://i.imgur.com/efGHN12.png"></p><p>假設我們要讓 <code>ul-3</code> 的第一個變紅色的話，可以先透過父層的 <code>.ul-father</code> 再找到子層的第一個元素，這會用到練式寫法下</p><hr><p>找到父層中的最後一個</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'.ul-father'</span>) </span><br><span class="line">    .last() </span><br><span class="line">    .css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/pNnB0el.png"><br><img src="https://i.imgur.com/iCOm7Iu.png"></p><hr><p>用 <code>.children()</code> 進到子層裡面，這時已經到 <code>ul</code> 層了</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'.ul-father'</span>)</span><br><span class="line">    .last()</span><br><span class="line">    .children()</span><br><span class="line">    .css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/gTq9yI1.png"><br><img src="https://i.imgur.com/GMGSUOj.png"></p><hr><p>再用 <code>.children()</code> 進到 <code>li</code> 層</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'.ul-father'</span>)</span><br><span class="line">    .last()</span><br><span class="line">    .children()</span><br><span class="line">    .children()</span><br><span class="line">    .css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/EgaRJqn.png"><br><img src="https://i.imgur.com/N3pKSgH.png"></p><hr><p>再用 <code>.first()</code> 選 <code>li</code> 裡面的第一個 <code>元素</code></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'.ul-father'</span>)</span><br><span class="line">    .last()</span><br><span class="line">    .children()</span><br><span class="line">    .children()</span><br><span class="line">    .first()</span><br><span class="line">    .css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/ROhVoju.png"><br><img src="https://i.imgur.com/at5rcAH.png"></p><hr><p><a href="https://codepen.io/gleofgja/pen/yLaQzyM?editors=1011">DEMO</a><br>以上就是鍊式寫法的示範 ~</p><h2 id="3-Traversing-中的-first-last-find"><a href="#3-Traversing-中的-first-last-find" class="headerlink" title="3. Traversing 中的 first(), last(), find()"></a>3. Traversing 中的 first(), last(), find()</h2><p>以下示範是為了練習，方法很多種，這裡單純練習 API 的使用。<br>在 jquery 中利用 <code>first()</code> 找到指定的元素，以下示範</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'ul-father-2'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-1"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-2"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-3"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="first"><a href="#first" class="headerlink" title="first()"></a>first()</h3><p><img src="https://i.imgur.com/AqW29aA.png"><br>透過用 <code>className</code> 的方式讓 <code>ul-1</code> 亮紅色，因為相同的 <code>className</code> 有三個所以會選到其他的元素，這時就可以用 <code>first()</code>，來指定我們只要選第一個就好，以下示範</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 第一個顯示顏色</span></span><br><span class="line">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'.ul-father'</span>).first().css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/SAkfFZ4.png"></p><hr><h3 id="last"><a href="#last" class="headerlink" title="last()"></a>last()</h3><p>同理，換成最後一個就是 <code>last()</code></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 最後一個個顯示紅色</span></span><br><span class="line">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'.ul-father'</span>).last().css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/fKRl7j8.png"></p><hr><h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><p>在 <code>ul-father</code> 外再加一層父層，然後稍為更改一下 HTML 結構。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'ul-father-2'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-1"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-2"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-3"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>將所有 <code>ul-father</code> 移到 <code>ul-father-2</code> 裡面，如果想要改變 <code>ul-1</code> 裡面的 <code>li</code> 元素就可以用 <code>find()</code></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'#ul-father-2'</span>).find(<span class="hljs-string">'#ul-1'</span>).css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/m2VkEZd.png"><br>這樣就可以抓到<code>ul-1</code> 並更改樣式了~</p><p><a href="https://codepen.io/gleofgja/pen/mdrQLMG?editors=1011">DEMO</a></p><hr><h2 id="4-Traversal-中的-eq-filter-與-not"><a href="#4-Traversal-中的-eq-filter-與-not" class="headerlink" title="4. Traversal 中的 eq(), filter() 與 not()"></a>4. Traversal 中的 eq(), filter() 與 not()</h2><p>以下示範單純為了練習 api 而使用。</p><h3 id="eq"><a href="#eq" class="headerlink" title="eq()"></a>eq()</h3><p><code>eq()</code> 就是等於，功能類似指定</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"b"</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"b"</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"b"</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"c"</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"c"</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"c"</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/rcWztWl.png"></p><p>把 B 變紅色 <code>$('.b').css('color', 'red')</code><br><img src="https://i.imgur.com/YU3Zlpj.png"></p><p>但如果只要第一個 B 變紅色的話就加上 <code>eq()</code>，<br>完整寫法 <code>$('.b').eq('0').css('color', 'red')</code>，要注意的是 jquery 的 API 還是用陣列的芳來指定索引，在陣列中第一個索引是 0，但還是要以官方文件為主。<br><img src="https://i.imgur.com/2ITawWg.png"></p><hr><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p><code>filter()</code> 就是塞選<br>在 HTML 結構下方加入 <code>&lt;span class='a'&gt;this is span&lt;/span&gt;</code>， className 設定為 a，如果單純寫 <code>$('.a').css('color', 'red')</code> 這樣會抓到所有 className 為 a 的元素，如下圖<br><img src="https://i.imgur.com/uue7VEI.png"></p><p>這時候就可以用 filter()，來指定 span 標籤，<code>$('.a').filter('span').css('color', 'red')</code><br>這樣就只會更改用 span 的標籤<br><img src="https://i.imgur.com/Rjz8dNX.png"></p><h3 id="not"><a href="#not" class="headerlink" title="not()"></a>not()</h3><p>概念就是除了誰以外，其他都可以，例如除了 <code>.a</code> 以外的其他都更改樣式<br><code>$('div').not('.a').css('color', 'red')</code>，這樣除了 <code>.a</code> 的以外其他就都更改到樣式了</p><p><img src="https://i.imgur.com/TL2eO4d.png"></p><p><a href="https://codepen.io/gleofgja/pen/MWjZYmw?editors=1011">DEMO</a></p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://codeshiba.teachable.com/courses/1255270/lectures/29538918">jQuery 幼幼班</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;1-選擇器的進階-Traversal-遍歷-鄰居、爸爸與小孩&quot;&gt;&lt;a href=&quot;#1-選擇器的進階-Traversal-遍歷-鄰居、爸爸與小孩&quot; class=&quot;headerlink&quot; title=&quot;1. 選擇器的進階 Traversal(遍歷) 鄰居、爸爸與小孩&quot;&gt;&lt;/a&gt;1. 選擇器的進階 Traversal(遍歷) 鄰居、爸爸與小孩&lt;/h2&gt;&lt;p&gt;遍歷示意圖:&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/t0TNBN2.png&quot;&gt;&lt;br&gt;Traversal 這觀念就是透過 API 操作相鄰隔壁的元素，以下示範&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    
    <category term="jQuery" scheme="https://pktseng.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery - 介紹</title>
    <link href="https://pktseng.github.io/2021/01/14/selector/"/>
    <id>https://pktseng.github.io/2021/01/14/selector/</id>
    <published>2021-01-13T16:00:00.000Z</published>
    <updated>2021-01-14T07:46:35.535Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="三大重點"><a href="#三大重點" class="headerlink" title="三大重點"></a>三大重點</h2><ul><li>選擇器 (selector)</li><li>事件觸發 (event)</li><li>事件處發的回調函數<a id="more"></a></li></ul><p><strong>撰寫步驟如下:</strong></p><ol><li>選擇: 顯示、隱藏元素</li><li>事件: 改變樣式</li><li>動作: DOM 操作</li></ol><h2 id="選擇器-Selector"><a href="#選擇器-Selector" class="headerlink" title="選擇器 (Selector)"></a>選擇器 (Selector)</h2><h3 id="id-選擇器"><a href="#id-選擇器" class="headerlink" title="id 選擇器"></a>id 選擇器</h3><p>利用按下 <code>button</code> 按鈕改變字體顏色</p><p>以下示範:<br>首先給個 <code>id</code> 元素跟 <code>button</code></p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"color"</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'changeColor'</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>再來是執行步驟:</p><ol><li>選擇要改變的元素 <code>#color</code></li><li>改變顏色 <code>css('color', 'red')</code></li><li>在 click 動作下執行</li></ol><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'#changeColor'</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'#color'</span>).css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/LYRXxMx?editors=1011">DEMO</a></p><h3 id="class-選擇器"><a href="#class-選擇器" class="headerlink" title="class 選擇器"></a>class 選擇器</h3><p>來看一下跟 <code>id</code> 選擇器有什麼差別</p><p>給同個 <code>id</code> &amp; <code>className</code> 再用 <code>console.log</code> 查看</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dog"</span>&gt;</span>dog 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dog"</span>&gt;</span>dog 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>先示範選擇器抓 <code>id</code> 的效果<br>然後在 <code>console.log</code> 下 <code>$('#dog').text()</code>，顯示如下<br><img src="https://i.imgur.com/HjZsX8q.png"><br>只會抓到第一個 <code>id</code> 的 <code>dog</code> 而已</p><p>再試試選擇器抓 <code>className</code> 的話呢?<br>輸入 <code>$('.dog').text()</code> ，顯示如下紅框處<br><img src="https://i.imgur.com/FdkEjg8.png"></p><p>綠色是選擇器的差別上面是 <code>id</code> ，下面是 <code>className</code><br>可以看如果用 <code>className</code> 選擇器的話兩個都會顯示</p><p><a href="https://codepen.io/gleofgja/pen/LYRXWPy?editors=1011">DEMO</a></p><h3 id="元素選擇器"><a href="#元素選擇器" class="headerlink" title="元素選擇器"></a>元素選擇器</h3><p>觀念跟 <code>class</code> 很像，可以同時更改多個元素內容或樣式，但會有點風險，因為同個檔案裡面或有多個相同元素</p><p>給三個 <code>p</code> 元素跟一個 <code>button</code> ，透過按下 <code>button</code> 可以更改元素內的內容，以下示範</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"changeWord"</span>&gt;</span>change-Word<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>jQuery 步驟:</p><ol><li>選擇要改變的元素 <code>p</code></li><li>改變的樣式 <code>.text('changeWord')</code></li><li>按下 <code>button</code> 的動作</li></ol><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'#changeWord'</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'p'</span>).text(<span class="hljs-string">'changeWord'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/GRjwWNX?editors=1011">DEMO</a></p><hr><h2 id="總結-id-、-className-amp-元素的差別"><a href="#總結-id-、-className-amp-元素的差別" class="headerlink" title="總結 id 、 className &amp; 元素的差別:"></a>總結 <code>id</code> 、 <code>className</code> &amp; 元素的差別:</h2><ul><li>id: 若有很多相同 id ，<font color="#FF0000">只會選取第一個</font></li><li>className: 會同時選取<font color="#FF0000">所有</font>相同的 className</li><li>元素: 會同時選取<font color="#FF0000">所有</font>相同的元素</li></ul><p>會用到 <code>className</code> 的原因是為了方便選更改多個樣式，可以用在相同的商品列表上，但如果選擇 <code>id</code> 的話就只會更改單一樣式而且是第一個，之後相同 <code>id</code> 的不會更改到</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://codeshiba.teachable.com/courses/1255270/lectures/29521035">jQuery 幼幼班</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;三大重點&quot;&gt;&lt;a href=&quot;#三大重點&quot; class=&quot;headerlink&quot; title=&quot;三大重點&quot;&gt;&lt;/a&gt;三大重點&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;選擇器 (selector)&lt;/li&gt;
&lt;li&gt;事件觸發 (event)&lt;/li&gt;
&lt;li&gt;事件處發的回調函數&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    
    <category term="jQuery" scheme="https://pktseng.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 實作 - 記帳簿</title>
    <link href="https://pktseng.github.io/2021/01/13/%E8%A8%98%E5%B8%B3/"/>
    <id>https://pktseng.github.io/2021/01/13/%E8%A8%98%E5%B8%B3/</id>
    <published>2021-01-12T16:00:00.000Z</published>
    <updated>2021-03-02T06:21:32.487Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>功能描述:<br>輸入記帳名稱並計算該物品的價格。</p><p><img src="https://i.imgur.com/EKaScxe.png"></p><p><a href="https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission24">Github</a><br><a href="https://pktseng.github.io/Web-Side-Project/mission24/index.html">DEMO</a></p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h2 id="HTML-模板"><a href="#HTML-模板" class="headerlink" title="HTML 模板"></a>HTML 模板</h2><p>給個容器，並將顯示及輸入的內容寫在裡面，比較特別的地方是 <code>list</code> ，<code>list</code> 裡面的項目清單會交由 <code>JavaScript</code> 字串模板來撰寫</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Expense Tracker<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Your Balance<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"balance"</span>&gt;</span>$0.00<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"inc-exp-container"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Income<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"money-plus"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"money plus"</span>&gt;</span>+$0.00<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Expense<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"money-minus"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"money minus"</span>&gt;</span>-$0.00<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>History<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"list"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"list"</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- &lt;li class="minus"&gt;</span></span><br><span class="line"><span class="hljs-comment">      Cash &lt;span&gt;-$400&lt;/span&gt;&lt;button class="delete-btn"&gt;x&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-comment">    &lt;/li&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Add new transaction<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"form"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"text"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter text..."</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"amount"</span></span></span><br><span class="line"><span class="hljs-tag">        &gt;</span>Amount <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="line">        (negative - expense, positive - income)<span class="hljs-tag">&lt;/<span class="hljs-name">label</span></span></span><br><span class="line"><span class="hljs-tag">      &gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"number"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"amount"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter amount..."</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span>&gt;</span>Add transaction<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="CSS-樣式"><a href="#CSS-樣式" class="headerlink" title="CSS 樣式"></a>CSS 樣式</h2><p>要注意的是 <code>plus</code>、<code>minus</code> 樣式，因為這兩個樣式會透過 <code>JavaScript</code> 的函式來控制</p><figure class="highlight css hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">'https://fonts.googleapis.com/css?family=Lato&amp;display=swap'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-pseudo">:root</span> {</span><br><span class="line">  <span class="hljs-attribute">--box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">3px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.12</span>), <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.24</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">* {</span><br><span class="line">  <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">body</span> {</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f7f7f7</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">  <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="hljs-attribute">align-items</span>: center;</span><br><span class="line">  <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="line">  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'Lato'</span>, sans-serif;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.container</span> {</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">350px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">h1</span> {</span><br><span class="line">  <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">1px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">h3</span> {</span><br><span class="line">  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#bbb</span>;</span><br><span class="line">  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">40px</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">h4</span> {</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">text-transform</span>: uppercase;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.inc-exp-container</span> {</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-built_in">var</span>(--box-shadow);</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">  <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.inc-exp-container</span> &gt; <span class="hljs-selector-tag">div</span> {</span><br><span class="line">  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.inc-exp-container</span> &gt; <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:first-of-type</span> {</span><br><span class="line">  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#dedede</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.money</span> {</span><br><span class="line">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">  <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">1px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.money</span><span class="hljs-selector-class">.plus</span> {</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#2ecc71</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.money</span><span class="hljs-selector-class">.minus</span> {</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#c0392b</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">label</span> {</span><br><span class="line">  <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">'text'</span>]</span>,</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">'number'</span>]</span> {</span><br><span class="line">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#dedede</span>;</span><br><span class="line">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>: block;</span><br><span class="line">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.btn</span> {</span><br><span class="line">  <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#9c88ff</span>;</span><br><span class="line">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-built_in">var</span>(--box-shadow);</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">  <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>: block;</span><br><span class="line">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">30px</span>;</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.btn</span><span class="hljs-selector-pseudo">:focus</span>,</span><br><span class="line"><span class="hljs-selector-class">.delete-btn</span><span class="hljs-selector-pseudo">:focus</span> {</span><br><span class="line">  <span class="hljs-attribute">outline</span>: <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.list</span> {</span><br><span class="line">  <span class="hljs-attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">40px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span> {</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-built_in">var</span>(--box-shadow);</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">  <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="hljs-attribute">position</span>: relative;</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.plus</span> {</span><br><span class="line">  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">5px</span> solid <span class="hljs-number">#2ecc71</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.minus</span> {</span><br><span class="line">  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">5px</span> solid <span class="hljs-number">#c0392b</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.delete-btn</span> {</span><br><span class="line">  <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e74c3c</span>;</span><br><span class="line">  <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span> <span class="hljs-number">5px</span>;</span><br><span class="line">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="line">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">100%</span>, -<span class="hljs-number">50%</span>);</span><br><span class="line">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">0.3s</span> ease;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.delete-btn</span> {</span><br><span class="line">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>所有互動將從這邊開始撰寫，也算是重頭戲!</p><h3 id="1-首先抓取-DOM-元素並設定成變數"><a href="#1-首先抓取-DOM-元素並設定成變數" class="headerlink" title="1. 首先抓取 DOM 元素並設定成變數"></a>1. 首先抓取 DOM 元素並設定成變數</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> balance = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#balance'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> moneyPlus = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#money-plus'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> moneyMinus = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#money-minus'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> list = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#list'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> text = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#text'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> form = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#form'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> amount = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#amount'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="2-新增-DOM-list-項目清單"><a href="#2-新增-DOM-list-項目清單" class="headerlink" title="2. 新增 DOM list 項目清單"></a>2. 新增 DOM list 項目清單</h3><p>為了方便測試先寫一個陣列的假資料</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> dummyTransactions = [</span><br><span class="line">  { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'Flower'</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">-20</span> },</span><br><span class="line">  { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'Salary'</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">300</span> },</span><br><span class="line">  { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'Book'</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">-10</span> },</span><br><span class="line">  { <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'Camera'</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">150</span> },</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 將假資料暫時帶入 transaction 變數裡面</span></span><br><span class="line"><span class="hljs-keyword">let</span> transactions = dummyTransactions</span><br></pre></td></tr></tbody></table></figure><p>接著撰寫新增 list 項目清單，因為在撰寫項目清單時不確定會有幾個，因此在這邊用字串模板的方式載入，為了要載入新的項目必須要創建新的元素，這時候可以用 <code>createElement</code> 的方式來新增，新增好後要透過輸入的值來判斷是正還是負，這樣可以連帶綁定 css 樣式的顏色，最後利用字串模板的方式來顯示項目，不果字串模板裡面已經有判斷正負號了，所以後面的值就用 <code>Math.abs</code> 取絕對值的方式來顯示。</p><h4 id="步驟如下"><a href="#步驟如下" class="headerlink" title="步驟如下:"></a>步驟如下:</h4><ol><li>新增函式</li><li>判斷正負號</li><li>新增項目元素，同時賦予到 <code>item</code> 變數上</li><li>判斷 <code>item</code> 輸入的值決定要綁定的顏色</li><li>用字串模板的方式將值賦予到 <code>item</code></li><li>再將 <code>item</code> 透過 <code>appendChild</code> 的方式塞到 <code>list</code> 元素裡面</li></ol><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTransactionDOM</span>(<span class="hljs-params">transaction</span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// 判斷正負值</span></span><br><span class="line">  <span class="hljs-keyword">const</span> sign = transaction.amount &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">'+'</span> : <span class="hljs-string">'-'</span></span><br><span class="line">  <span class="hljs-comment">// console.log(sign)</span></span><br><span class="line">  <span class="hljs-comment">// 新增 li 元素</span></span><br><span class="line">  <span class="hljs-keyword">const</span> item = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'li'</span>)</span><br><span class="line">  <span class="hljs-comment">// console.log(item)</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 將 className 新增到 item ，判斷顯示的顏色</span></span><br><span class="line">  item.classList.add(transaction.amount &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">'plus'</span> : <span class="hljs-string">'minus'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// removeTransaction 要綁id ，不然會刪到同名的</span></span><br><span class="line">  item.innerHTML = <span class="hljs-string">`<span class="hljs-subst">${transaction.text}</span>&lt;span&gt;<span class="hljs-subst">${sign}</span><span class="hljs-subst">${<span class="hljs-built_in">Math</span>.abs(</span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">    transaction.amount</span></span></span><br><span class="line"><span class="hljs-string"><span class="hljs-subst">  )}</span>&lt;/span&gt;&lt;button&gt;X&lt;/button&gt;`</span></span><br><span class="line"></span><br><span class="line">  list.appendChild(item)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3. 初始化"></a>3. 初始化</h3><p>每當執行完某些動作時，都要將值初始化</p><p><code>forEach</code> :會將陣列中每個元素套用到指定的函式裡進行運算。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// 輸入完之後 list 要回復空值</span></span><br><span class="line">  list.innerHTML = <span class="hljs-string">''</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 將假資料丟到 addTransactionDOM 函式裡面運算</span></span><br><span class="line">  transactions.forEach(addTransactionDOM)</span><br><span class="line"></span><br><span class="line">  updateValue()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">init() <span class="hljs-comment">// 執行</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-監聽-form-表單內輸入的值"><a href="#4-監聽-form-表單內輸入的值" class="headerlink" title="4. 監聽 form 表單內輸入的值"></a>4. 監聽 form 表單內輸入的值</h3><p>接下來要判斷表單內輸入的值是否正確，如果輸入正確，將值同時綁定到 key 上，這麼做是為了防止刪除到同名的項目，像是用身分證綁定每筆資料的概念。</p><p>首先利用 <code>callbakc function</code> 的方式將函式賦予到 <code>addTransaction</code> 參數上，再用 if 判斷式判斷輸入的值是否為空值，如果不是空值，將輸入的值綁定到物件的 key 上，同時執行個兩函式</p><ol><li>將 <code>transaction</code> 變數新增到陣列清單裡面(這邊暫時用假資料的陣列)</li><li>將 <code>transaction</code> 帶到 <code>addTransactionDOM</code> 函式執行</li></ol><p>然後再將輸入框的值清空</p><p><code>Math.floor</code> :將有小數的值取成整數<br><code>Math.random</code> :取亂數，建立變數的身分證</p><h4 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h4><ol><li>監聽表單元素</li><li>判斷輸入值同時將輸入的值用 id 綁定</li><li>同時執行三的動作，將值新增到陣列內、判斷輸入值得正負、將值清空</li></ol><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTransaction</span>(<span class="hljs-params">e</span>) </span>{</span><br><span class="line">  e.preventDefault()</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 先判斷輸入是否為空值，若不是則繼續執行</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (text.value === <span class="hljs-string">''</span> || amount.value === <span class="hljs-string">''</span>) {</span><br><span class="line">    alert(<span class="hljs-string">'請重新輸入'</span>)</span><br><span class="line">  } <span class="hljs-keyword">else</span> {</span><br><span class="line">    <span class="hljs-comment">// 如果不是空值，將輸入的 value 帶入 key 裡</span></span><br><span class="line">    <span class="hljs-keyword">const</span> transaction = {</span><br><span class="line">      id: generateID(),</span><br><span class="line">      text: text.value,</span><br><span class="line">      amount: +amount.value, <span class="hljs-comment">//前面的+是為了轉成 number 型別</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 將新增的 transaction 物件加入到 transactions 物陣列內</span></span><br><span class="line">    transactions.push(transaction)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 執行 addTransactionDOM 函式，並帶入transaction</span></span><br><span class="line">    addTransactionDOM(transaction)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 執行帶值跟計算</span></span><br><span class="line">    updateValue()</span><br><span class="line">    updateLocalStorage()</span><br><span class="line">    <span class="hljs-comment">// 輸入完後恢復空值</span></span><br><span class="line">    text.value = <span class="hljs-string">''</span></span><br><span class="line">    amount.value = <span class="hljs-string">''</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateID</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">1000000</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">form.addEventListener(<span class="hljs-string">'submit'</span>, addTransaction)</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="5-計算收入與支出"><a href="#5-計算收入與支出" class="headerlink" title="5. 計算收入與支出"></a>5. 計算收入與支出</h3><p>以上判斷值的正確性跟顯示的樣式都寫好了，接下來要計算輸入的值<br>將 <code>transaction </code> 帶到 <code>transaction.amount</code> 裡面，再用 <code>map</code> 計算，判斷陣列內值，再將值賦予到 <code>amounts</code> 變數裡面，透過 <code>amounts</code> 變數去計算總結、收入、支出的值。</p><p>算好後將計算的值賦予到 DOM 元素上這樣就可以顯示計算的值了。</p><ul><li><code>acc</code> 是計算出來的總值， <code>item</code> 是每次新增的每一筆資料。</li><li><code>map</code> :處理陣列中每個元素，最後回傳出一個新的陣列。</li><li><code>filter</code> :會將陣列中的「每一個」元素帶入指定的函式內做判斷，如果元素符合判斷條件則會產生新的陣列元素。</li><li><code>reduce</code> :將陣列中每個元素進行計算，每次計算的結果會再與下個元素作計算，直到結束為止。</li></ul><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateValue</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> amounts = transactions.map(<span class="hljs-function">(<span class="hljs-params">transaction</span>) =&gt;</span> transaction.amount)</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 計算總結</span></span><br><span class="line">  <span class="hljs-keyword">const</span> total = amounts.reduce(<span class="hljs-function">(<span class="hljs-params">acc, item</span>) =&gt;</span> (acc += item), <span class="hljs-number">0</span>).toFixed(<span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 計算收入</span></span><br><span class="line">  <span class="hljs-keyword">const</span> income = amounts</span><br><span class="line">    .filter(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item &gt; <span class="hljs-number">0</span>)</span><br><span class="line">    .reduce(<span class="hljs-function">(<span class="hljs-params">acc, item</span>) =&gt;</span> (acc += item), <span class="hljs-number">0</span>)</span><br><span class="line">    .toFixed(<span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 計算支出</span></span><br><span class="line">  <span class="hljs-keyword">const</span> expense =</span><br><span class="line">    amounts.filter(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item &lt; <span class="hljs-number">0</span>).reduce(<span class="hljs-function">(<span class="hljs-params">acc, item</span>) =&gt;</span> (acc += item), <span class="hljs-number">0</span>) *</span><br><span class="line">    <span class="hljs-number">-1</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 將 total、income、expense 塞到各 dom 裡面</span></span><br><span class="line">  balance.innerHTML = <span class="hljs-string">`<span class="hljs-subst">${total}</span>`</span></span><br><span class="line">  moneyPlus.innerHTML = <span class="hljs-string">`<span class="hljs-subst">${income}</span>`</span></span><br><span class="line">  moneyMinus.innerHTML = <span class="hljs-string">`<span class="hljs-subst">${expense}</span>`</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="6-移除輸入的值"><a href="#6-移除輸入的值" class="headerlink" title="6. 移除輸入的值"></a>6. 移除輸入的值</h3><p>如果有新增的項目不要了，那就會用到刪除，刪除的函式是認剛才綁定的 id 就是陣列的身分證，觸發條件是當我 <code>onclick</code> 的時候就可以移除剛該筆項目。</p><p>在剛才的 <code>addTransactionDOM</code> 裡面有個字串模板，因為項目是在這邊創建的，那刪除也一起寫在這，透過 <code>removeTransaction</code> 函式綁定 <code>id</code></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item.innerHTML = <span class="hljs-string">`<span class="hljs-subst">${transaction.text}</span></span></span><br><span class="line"><span class="hljs-string">&lt;span&gt;<span class="hljs-subst">${sign}</span><span class="hljs-subst">${<span class="hljs-built_in">Math</span>.abs(transaction.amount)}</span>&lt;/span&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;button class='delete-btn' onclick='removeTransaction(<span class="hljs-subst">${transaction.id}</span>)'&gt;</span></span><br><span class="line"><span class="hljs-string">X</span></span><br><span class="line"><span class="hljs-string">&lt;/button&gt;`</span></span><br></pre></td></tr></tbody></table></figure><p>刪除的函式</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeTransaction</span>(<span class="hljs-params">id</span>) </span>{</span><br><span class="line">  <span class="hljs-comment">//記得帶 id 參數，不然會 fail</span></span><br><span class="line">  <span class="hljs-comment">//邏輯??</span></span><br><span class="line">  transactions = transactions.filter(<span class="hljs-function">(<span class="hljs-params">transaction</span>) =&gt;</span> transaction.id !== id)</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 刪除後重新儲存在本地端</span></span><br><span class="line">  updateLocalStorage()</span><br><span class="line">  init()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="7-將計算的歷史紀錄保存起來，並存在本地端"><a href="#7-將計算的歷史紀錄保存起來，並存在本地端" class="headerlink" title="7. 將計算的歷史紀錄保存起來，並存在本地端"></a>7. 將計算的歷史紀錄保存起來，並存在本地端</h3><p>因為要要記錄自己新增的每筆資料，所以之前代替用的假資料可以刪掉了</p><ol><li><code>Storage.setItem('key', 'value')</code>：<br>透過在 <code>setItem()</code> 方法中指定物件屬性的 <code>key</code> 以及 <code>value</code> ，<br>我們可以在 <code>storage</code> 物件中加入屬性或修改原本的屬性內容。</li></ol><p>2.<code> Storage.getItem('key')</code>：<br>透過在 <code>getItem()</code> 方法中輸入屬性的 <code>key</code> ，我們可以得到 <code>storage</code> 物件對應的屬性 <code>value</code> 。</p><hr><p>利用 <code>getItem</code> 將 <code>transactions</code> 的 <code>key</code> 值輸入到 <code>localStorage</code> 裡面，再利用 <code>JSON.parse</code> 將值轉成物件格式，然後在賦予到 <code>localStorageTransactions</code> 變數中</p><p>如果 <code>localStorage</code> 抓到的值是 <code>null</code> 會自動轉換成空值</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> localStorageTransactions = <span class="hljs-built_in">JSON</span>.parse(</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'transactions'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> transactions =</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'transactions'</span>) !== <span class="hljs-literal">null</span> ? localStorageTransactions : []</span><br></pre></td></tr></tbody></table></figure><p>利用 <code>setItem</code> 的方式將 <code>transactions</code> 設定成 <code>key</code> ，將 <code>transactions</code> 透過 <code>JSON.stringify</code> 的方式轉成字串並設定成 <code>value</code> ，加到 <code>addTransaction</code>、<code>removeTransaction</code> 函式裡面，這樣在新增每筆資料的時候不只同時綁定 <code>id</code> 還記錄到了本地端的歷史紀錄裡面。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateLocalStorage</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'transactions'</span>, <span class="hljs-built_in">JSON</span>.stringify(transactions))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://ithelp.ithome.com.tw/articles/10195522">JS30-Day15-LocalStorage</a><br><a href="https://www.oxxostudio.tw/articles/201908/js-array.html#array_foreach">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a><br><a href="https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842252#overview">20 Web Projects With Vanilla JavaScript</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;功能描述:&lt;br&gt;輸入記帳名稱並計算該物品的價格。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/EKaScxe.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission24&quot;&gt;Github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pktseng.github.io/Web-Side-Project/mission24/index.html&quot;&gt;DEMO&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    <category term="作品集" scheme="https://pktseng.github.io/categories/JavaScrip/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    
    <category term="jQuery" scheme="https://pktseng.github.io/tags/jQuery/"/>
    
    <category term="作品集" scheme="https://pktseng.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/tags/JavaScrip/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 實作 - 簡易版匯率轉換</title>
    <link href="https://pktseng.github.io/2021/01/08/changeRate/"/>
    <id>https://pktseng.github.io/2021/01/08/changeRate/</id>
    <published>2021-01-07T16:00:00.000Z</published>
    <updated>2021-03-02T06:21:37.201Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>功能敘述：<br>切換匯率計算各國的匯率。</p><p><img src="https://i.imgur.com/noQPS8F.png"><br><a href="https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission23">Github</a><br><a href="https://pktseng.github.io/Web-Side-Project/mission23/index.html">Demo</a></p><a id="more"></a><hr><h2 id="1-用-JS-撰寫"><a href="#1-用-JS-撰寫" class="headerlink" title="1. 用 JS 撰寫"></a>1. 用 JS 撰寫</h2><h4 id="利用選擇器抓取-DOM-元素"><a href="#利用選擇器抓取-DOM-元素" class="headerlink" title="利用選擇器抓取 DOM 元素"></a>利用選擇器抓取 DOM 元素</h4><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> currencyElOne = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#currencyOne'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> currencyElTwo = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#currencyTwo'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> amountElOne = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#amountOne'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> amountElTwo = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#amountTwo'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> swapEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#swap'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> rateEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#rate'</span>)</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="監聽抓取-dom-的操作事件，同時綁定事件的操作"><a href="#監聽抓取-dom-的操作事件，同時綁定事件的操作" class="headerlink" title="監聽抓取 dom 的操作事件，同時綁定事件的操作"></a>監聽抓取 dom 的操作事件，同時綁定事件的操作</h4><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 監聽 DOM 狀態</span></span><br><span class="line">currencyElOne.addEventListener(<span class="hljs-string">'change'</span>, caclulate)</span><br><span class="line">currencyElTwo.addEventListener(<span class="hljs-string">'change'</span>, caclulate)</span><br><span class="line">amountElOne.addEventListener(<span class="hljs-string">'input'</span>, caclulate)</span><br><span class="line">amountElTwo.addEventListener(<span class="hljs-string">'input'</span>, caclulate)</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="事件操作"><a href="#事件操作" class="headerlink" title="事件操作"></a>事件操作</h4><p><a href="https://www.exchangerate-api.com/">API</a><br>這邊要注意的是 Fetch API 的方式，在打完 API ，response 資料的時候，雖然資料已經是 JSON 格式，但 Fetch 必須再轉一次 JSON，變成 <code>json promise</code>，否則是抓不到後端回傳的資料的。<br><a href="https://www.oxxostudio.tw/articles/201908/js-fetch.html">參考文章</a></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 操作 DOM 同時執行運算</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">caclulate</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// 透過選取的 DOM 將該 DOM的值塞到新變數中</span></span><br><span class="line">  <span class="hljs-keyword">const</span> currencyOne = currencyElOne.value</span><br><span class="line">  <span class="hljs-keyword">const</span> currencyTwo = currencyElTwo.value</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 發送 request ，開始打 API</span></span><br><span class="line">  fetch(<span class="hljs-string">`https://api.exchangerate-api.com/v4/latest/<span class="hljs-subst">${currencyOne}</span>`</span>)</span><br><span class="line">    <span class="hljs-comment">// 後端傳送 response 回傳結果</span></span><br><span class="line">    .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.json()) <span class="hljs-comment">//將回傳結果轉換成 json 格式</span></span><br><span class="line">    .then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {</span><br><span class="line">      <span class="hljs-comment">// console.log(data)</span></span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// 用陣列的方式抓去 keyValue，再將值塞到 rate 變數中</span></span><br><span class="line">      <span class="hljs-keyword">const</span> rate = data.rates[currencyTwo]</span><br><span class="line">      <span class="hljs-comment">// console.log(rate)</span></span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">//將計算後的值放到綁定的 rate dom 中，同時計算當前匯率</span></span><br><span class="line">      rateEl.innerHTML = <span class="hljs-string">`1 <span class="hljs-subst">${currencyOne}</span> = <span class="hljs-subst">${rate}</span> <span class="hljs-subst">${currencyTwo}</span>`</span></span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// 幣值2的值 = 幣值1的值*匯率，將值四捨五入</span></span><br><span class="line">      amountElTwo.value = (amountElOne.value * rate).toFixed(<span class="hljs-number">2</span>)</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="切換匯率，將匯率互相對調"><a href="#切換匯率，將匯率互相對調" class="headerlink" title="切換匯率，將匯率互相對調"></a>切換匯率，將匯率互相對調</h4><p>這邊要注意的是，必須要先將<code>currencyElOne.value</code> 塞到 <code>temp</code> 變數中，方便待會賦值，會這樣做是有原因的</p><p>以下列這段程式碼為例，分別用 <code>console.log</code> 查看值</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">swapEl.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> temp = currencyElOne.value</span><br><span class="line"></span><br><span class="line">  currencyElOne.value = currencyElTwo.value</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'currencyElOne.value'</span>, currencyElOne.value)</span><br><span class="line"></span><br><span class="line">  currencyElTwo.value = currencyElOne.value</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'currencyElTwo.value'</span>, currencyElTwo.value)</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// currencyElTwo.value = temp</span></span><br><span class="line">  <span class="hljs-comment">// console.log('temp', temp)</span></span><br><span class="line">  caclulate()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>結果如下圖<br><img src="https://i.imgur.com/qQYix3x.png"></p><p>兩個轉換的匯率都會長一樣，而且匯率永遠都會卡 1，無法轉換，如下圖<br><img src="https://i.imgur.com/1AO39Zg.png"></p><p>為防止這樣的情況發生，可以先將 <code>currencyElOne.value</code> 塞到 <code>temp</code> 中，再確認 <code>temp</code> 值的是否有抓到，如下圖<br><img src="https://i.imgur.com/f4LpfCR.png"></p><p>然後再將 <code>temp</code> 賦予到<code>currencyElTwo.value</code>，這樣就可以避免匯率卡 1 的問題，最後要記得執行計算。</p><p>完整函式如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">swapEl.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> temp = currencyElOne.value</span><br><span class="line">  currencyElOne.value = currencyElTwo.value</span><br><span class="line">  currencyElTwo.value = temp</span><br><span class="line">  caclulate()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="2-用-jQuery-撰寫"><a href="#2-用-jQuery-撰寫" class="headerlink" title="2. 用 jQuery 撰寫"></a>2. 用 jQuery 撰寫</h2><h4 id="抓取-DOM-，同時綁定事件"><a href="#抓取-DOM-，同時綁定事件" class="headerlink" title="抓取 DOM ，同時綁定事件"></a>抓取 DOM ，同時綁定事件</h4><p>先將每個 DOM 事件切割成一小部分，撰寫方法也要為簡單，步驟如下:</p><ol><li>抓取 DOM 元素 <code>$('#currencyOne')</code></li><li>後面再接事件<code>change</code>，</li><li>事件裡面會包發生的動作 <code>caclulate()</code></li><li>執行 <code>caclulate()</code></li></ol><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 將 dom 切割成小事件</span></span><br><span class="line"><span class="hljs-comment">// 監聽 currencyOne 選取值</span></span><br><span class="line">$(<span class="hljs-string">'#currencyOne'</span>).change(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  caclulate()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 監聽 amountOne 選取值</span></span><br><span class="line">$(<span class="hljs-string">'#amountOne'</span>).change(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  caclulate()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 監聽 currencyTwo 選取值</span></span><br><span class="line">$(<span class="hljs-string">'#currencyTwo'</span>).change(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  caclulate()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 監聽 amountTwo 選取值</span></span><br><span class="line">$(<span class="hljs-string">'#amountTwo'</span>).change(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  caclulate()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">caclulate()</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="事件裡面會包發生的動作"><a href="#事件裡面會包發生的動作" class="headerlink" title="事件裡面會包發生的動作"></a>事件裡面會包發生的動作</h4><p>這邊示範用 jquery ajax 打 api</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 變動容器內的 dom，同時計算匯率</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">caclulate</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// 用 jquery 的方式命名變數</span></span><br><span class="line">  <span class="hljs-keyword">let</span> currencyOne = $(<span class="hljs-string">'#currencyOne'</span>).val()</span><br><span class="line">  <span class="hljs-keyword">let</span> currencyTwo = $(<span class="hljs-string">'#currencyTwo'</span>).val()</span><br><span class="line">  <span class="hljs-keyword">let</span> rate = $(<span class="hljs-string">'#rate'</span>).val()</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 用 ajax 打 api</span></span><br><span class="line">  $.ajax({</span><br><span class="line">    methods: <span class="hljs-string">'GET'</span>,</span><br><span class="line">    url: <span class="hljs-string">`https://api.exchangerate-api.com/v4/latest/<span class="hljs-subst">${currencyOne}</span>`</span>,</span><br><span class="line">  })</span><br><span class="line">    <span class="hljs-comment">// 後端 respose 資料，將資料用 res 命名</span></span><br><span class="line">    .done(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>{</span><br><span class="line">      <span class="hljs-comment">// 可用 console.log(res) 查看 response api</span></span><br><span class="line">      <span class="hljs-comment">// 將後端的資料塞到 rate 裡面，[currencyTwo] 是抓取物件 keyValue</span></span><br><span class="line">      <span class="hljs-keyword">let</span> rate = res.rates[currencyTwo]</span><br><span class="line">      <span class="hljs-comment">// 用 console.log(rate) 查看是否有抓到 keyValue</span></span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// 將匯率轉換後的值塞到 amountTwo dom 裡面，並4捨5入取到第2位</span></span><br><span class="line">      $(<span class="hljs-string">'#amountTwo'</span>).val(($(<span class="hljs-string">'#amountOne'</span>).val() * rate).toFixed(<span class="hljs-number">2</span>))</span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// 將轉換的匯率顯示在各匯率之間</span></span><br><span class="line">      $(<span class="hljs-string">'#rate'</span>).text(<span class="hljs-string">`1 <span class="hljs-subst">${currencyOne}</span> = <span class="hljs-subst">${currencyTwo}</span> * <span class="hljs-subst">${rate}</span>`</span>)</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="動作的匯率對調"><a href="#動作的匯率對調" class="headerlink" title="動作的匯率對調"></a>動作的匯率對調</h4><p>函式邏輯跟上面 js 的一樣，差別寫法上會有些微的不同</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 按下 swap dom 會將匯率對調</span></span><br><span class="line">$(<span class="hljs-string">'#swap'</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">let</span> temp = $(<span class="hljs-string">'#currencyOne'</span>).val()</span><br><span class="line">  $(<span class="hljs-string">'#currencyOne'</span>).val($(<span class="hljs-string">'#currencyTwo'</span>).val())</span><br><span class="line">  $(<span class="hljs-string">'#currencyTwo'</span>).val(temp)</span><br><span class="line">  caclulate()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://www.oxxostudio.tw/articles/201908/js-fetch.html">JavaScript Fetch API 使用教學</a><br><a href="https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842116#questions">20 Web Projects With Vanilla JavaScript</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;功能敘述：&lt;br&gt;切換匯率計算各國的匯率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/noQPS8F.png&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission23&quot;&gt;Github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pktseng.github.io/Web-Side-Project/mission23/index.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/categories/JavaScrip/"/>
    
    <category term="作品集" scheme="https://pktseng.github.io/categories/JavaScrip/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    
    <category term="作品集" scheme="https://pktseng.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    <category term="JavaScrip" scheme="https://pktseng.github.io/tags/JavaScrip/"/>
    
  </entry>
  
</feed>
