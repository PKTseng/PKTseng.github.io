<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PK&#39;s 回憶錄</title>
  
  <subtitle>學過的東西過段時間沒複習就會忘，所以請記錄下來</subtitle>
  <link href="https://pktseng.github.io/atom.xml" rel="self"/>
  
  <link href="https://pktseng.github.io/"/>
  <updated>2021-01-15T11:33:14.826Z</updated>
  <id>https://pktseng.github.io/</id>
  
  <author>
    <name>PKTseng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jQuery - 選擇器的進階 Traversal</title>
    <link href="https://pktseng.github.io/2021/01/15/Traversal/"/>
    <id>https://pktseng.github.io/2021/01/15/Traversal/</id>
    <published>2021-01-14T16:00:00.000Z</published>
    <updated>2021-01-15T11:33:14.826Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="1-選擇器的進階-Traversal-遍歷-鄰居、爸爸與小孩"><a href="#1-選擇器的進階-Traversal-遍歷-鄰居、爸爸與小孩" class="headerlink" title="1. 選擇器的進階 Traversal(遍歷) 鄰居、爸爸與小孩"></a>1. 選擇器的進階 Traversal(遍歷) 鄰居、爸爸與小孩</h2><p>遍歷示意圖:<br><img src="https://i.imgur.com/t0TNBN2.png"><br>Traversal 這觀念就是透過 API 操作相鄰隔壁的元素，以下示範</p><a id="more"></a><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-1"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-2"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-3"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>原圖如下:<br><img src="https://i.imgur.com/vvusGy1.png"></p><p>接下來套用 jQuery 三步驟，讓 dom 變色</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'#ul-1'</span>).css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/zX89w0H.png"></p><p>確定可以變色後，接下來要使用 Traversal 的效果，而這效果的 API 是 <code>siblings</code></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'#ul-1'</span>).siblings().css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>會顯示下圖，自己不變動，周圍的變動<br><img src="https://i.imgur.com/X8ujRzt.png"></p><p>也可以透過鄰居再做其他動作，如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'#ul-1'</span>).siblings().first().css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>抓取鄰居的第一個，顯示如下<br><img src="https://i.imgur.com/pUKeHjY.png"></p><p>除了這方法還可以用陣列的方式抓取，但是如果用陣列的話會變成純元素，所以外面還是要用 <code>$()</code> ，將 <code>$('#ul-1').siblings().[1] </code>包起來，由於<font color="#FF0000">在 js 陣列裡面第一個索引都是從 0 開始算</font>，所以如果寫 <code>[1]</code> 就會顯示第二個，如下圖</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $($(<span class="hljs-string">'#ul-1'</span>).siblings().[<span class="hljs-number">1</span>]).css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/9dXHwVn.png"></p><p><a href="https://codepen.io/gleofgja/pen/eYdQEKg?editors=1011">DEMO</a></p><h2 id="2-鍊式-Chaining-寫法"><a href="#2-鍊式-Chaining-寫法" class="headerlink" title="2. 鍊式( Chaining )寫法"></a>2. 鍊式( Chaining )寫法</h2><p>jQuery 的鍊式( Chaining )寫法。就是 API 可以依照需求一直接下去。</p><p>利用上面的範例在各 <code>ul</code> 外再加上父層 <code>.ul-father</code> ，注意! 是 <code>className</code> 不是 <code>id</code></p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-1"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-2"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-3"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>樣式排版一下如下圖<br><img src="https://i.imgur.com/efGHN12.png"></p><p>假設我們要讓 <code>ul-3</code> 的第一個變紅色的話，可以先透過父層的 <code>.ul-father</code> 再找到子層的第一個元素，這會用到練式寫法下</p><hr><p>找到父層中的最後一個</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'.ul-father'</span>) </span><br><span class="line">    .last() </span><br><span class="line">    .css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/pNnB0el.png"><br><img src="https://i.imgur.com/iCOm7Iu.png"></p><hr><p>用 <code>.children()</code> 進到子層裡面，這時已經到 <code>ul</code> 層了</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'.ul-father'</span>)</span><br><span class="line">    .last()</span><br><span class="line">    .children()</span><br><span class="line">    .css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/gTq9yI1.png"><br><img src="https://i.imgur.com/GMGSUOj.png"></p><hr><p>再用 <code>.children()</code> 進到 <code>li</code> 層</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'.ul-father'</span>)</span><br><span class="line">    .last()</span><br><span class="line">    .children()</span><br><span class="line">    .children()</span><br><span class="line">    .css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/EgaRJqn.png"><br><img src="https://i.imgur.com/N3pKSgH.png"></p><hr><p>再用 <code>.first()</code> 選 <code>li</code> 裡面的第一個 <code>元素</code></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'document'</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'.ul-father'</span>)</span><br><span class="line">    .last()</span><br><span class="line">    .children()</span><br><span class="line">    .children()</span><br><span class="line">    .first()</span><br><span class="line">    .css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/ROhVoju.png"><br><img src="https://i.imgur.com/at5rcAH.png"></p><hr><p><a href="https://codepen.io/gleofgja/pen/yLaQzyM?editors=1011">DEMO</a><br>以上就是鍊式寫法的示範 ~</p><h2 id="3-Traversing-中的-first-last-find"><a href="#3-Traversing-中的-first-last-find" class="headerlink" title="3. Traversing 中的 first(), last(), find()"></a>3. Traversing 中的 first(), last(), find()</h2><p>以下示範是為了練習，方法很多種，這裡單純練習 API 的使用。<br>在 jquery 中利用 <code>first()</code> 找到指定的元素，以下示範</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'ul-father-2'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-1"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-2"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-3"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="first"><a href="#first" class="headerlink" title="first()"></a>first()</h3><p><img src="https://i.imgur.com/AqW29aA.png"><br>透過用 <code>className</code> 的方式讓 <code>ul-1</code> 亮紅色，因為相同的 <code>className</code> 有三個所以會選到其他的元素，這時就可以用 <code>first()</code>，來指定我們只要選第一個就好，以下示範</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 第一個顯示顏色</span></span><br><span class="line">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'.ul-father'</span>).first().css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/SAkfFZ4.png"></p><hr><h3 id="last"><a href="#last" class="headerlink" title="last()"></a>last()</h3><p>同理，換成最後一個就是 <code>last()</code></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 最後一個個顯示紅色</span></span><br><span class="line">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'.ul-father'</span>).last().css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/fKRl7j8.png"></p><hr><h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><p>在 <code>ul-father</code> 外再加一層父層，然後稍為更改一下 HTML 結構。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'ul-father-2'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-1"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-2"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'ul-father'</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ul-3"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul-3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>將所有 <code>ul-father</code> 移到 <code>ul-father-2</code> 裡面，如果想要改變 <code>ul-1</code> 裡面的 <code>li</code> 元素就可以用 <code>find()</code></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'#ul-father-2'</span>).find(<span class="hljs-string">'#ul-1'</span>).css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/m2VkEZd.png"><br>這樣就可以抓到<code>ul-1</code> 並更改樣式了~</p><p><a href="https://codepen.io/gleofgja/pen/mdrQLMG?editors=1011">DEMO</a></p><hr><h2 id="4-Traversal-中的-eq-filter-與-not"><a href="#4-Traversal-中的-eq-filter-與-not" class="headerlink" title="4. Traversal 中的 eq(), filter() 與 not()"></a>4. Traversal 中的 eq(), filter() 與 not()</h2><p>以下示範單純為了練習 api 而使用。</p><h3 id="eq"><a href="#eq" class="headerlink" title="eq()"></a>eq()</h3><p><code>eq()</code> 就是等於，功能類似指定</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"a"</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"b"</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"b"</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"b"</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"c"</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"c"</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"c"</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/rcWztWl.png"></p><p>把 B 變紅色 <code>$('.b').css('color', 'red')</code><br><img src="https://i.imgur.com/YU3Zlpj.png"></p><p>但如果只要第一個 B 變紅色的話就加上 <code>eq()</code>，<br>完整寫法 <code>$('.b').eq('0').css('color', 'red')</code>，要注意的是 jquery 的 API 還是用陣列的芳來指定索引，在陣列中第一個索引是 0，但還是要以官方文件為主。<br><img src="https://i.imgur.com/2ITawWg.png"></p><hr><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p><code>filter()</code> 就是塞選<br>在 HTML 結構下方加入 <code>&lt;span class='a'&gt;this is span&lt;/span&gt;</code>， className 設定為 a，如果單純寫 <code>$('.a').css('color', 'red')</code> 這樣會抓到所有 className 為 a 的元素，如下圖<br><img src="https://i.imgur.com/uue7VEI.png"></p><p>這時候就可以用 filter()，來指定 span 標籤，<code>$('.a').filter('span').css('color', 'red')</code><br>這樣就只會更改用 span 的標籤<br><img src="https://i.imgur.com/Rjz8dNX.png"></p><h3 id="not"><a href="#not" class="headerlink" title="not()"></a>not()</h3><p>概念就是除了誰以外，其他都可以，例如除了 <code>.a</code> 以外的其他都更改樣式<br><code>$('div').not('.a').css('color', 'red')</code>，這樣除了 <code>.a</code> 的以外其他就都更改到樣式了</p><p><img src="https://i.imgur.com/TL2eO4d.png"></p><p><a href="https://codepen.io/gleofgja/pen/MWjZYmw?editors=1011">DEMO</a></p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://codeshiba.teachable.com/courses/1255270/lectures/29538918">jQuery 幼幼班</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;1-選擇器的進階-Traversal-遍歷-鄰居、爸爸與小孩&quot;&gt;&lt;a href=&quot;#1-選擇器的進階-Traversal-遍歷-鄰居、爸爸與小孩&quot; class=&quot;headerlink&quot; title=&quot;1. 選擇器的進階 Traversal(遍歷) 鄰居、爸爸與小孩&quot;&gt;&lt;/a&gt;1. 選擇器的進階 Traversal(遍歷) 鄰居、爸爸與小孩&lt;/h2&gt;&lt;p&gt;遍歷示意圖:&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/t0TNBN2.png&quot;&gt;&lt;br&gt;Traversal 這觀念就是透過 API 操作相鄰隔壁的元素，以下示範&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    
    <category term="jQuery" scheme="https://pktseng.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery - 介紹</title>
    <link href="https://pktseng.github.io/2021/01/14/selector/"/>
    <id>https://pktseng.github.io/2021/01/14/selector/</id>
    <published>2021-01-13T16:00:00.000Z</published>
    <updated>2021-01-14T07:46:35.535Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="三大重點"><a href="#三大重點" class="headerlink" title="三大重點"></a>三大重點</h2><ul><li>選擇器 (selector)</li><li>事件觸發 (event)</li><li>事件處發的回調函數<a id="more"></a></li></ul><p><strong>撰寫步驟如下:</strong></p><ol><li>選擇: 顯示、隱藏元素</li><li>事件: 改變樣式</li><li>動作: DOM 操作</li></ol><h2 id="選擇器-Selector"><a href="#選擇器-Selector" class="headerlink" title="選擇器 (Selector)"></a>選擇器 (Selector)</h2><h3 id="id-選擇器"><a href="#id-選擇器" class="headerlink" title="id 選擇器"></a>id 選擇器</h3><p>利用按下 <code>button</code> 按鈕改變字體顏色</p><p>以下示範:<br>首先給個 <code>id</code> 元素跟 <code>button</code></p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"color"</span>&gt;</span>color<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'changeColor'</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>再來是執行步驟:</p><ol><li>選擇要改變的元素 <code>#color</code></li><li>改變顏色 <code>css('color', 'red')</code></li><li>在 click 動作下執行</li></ol><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'#changeColor'</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'#color'</span>).css(<span class="hljs-string">'color'</span>, <span class="hljs-string">'red'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/LYRXxMx?editors=1011">DEMO</a></p><h3 id="class-選擇器"><a href="#class-選擇器" class="headerlink" title="class 選擇器"></a>class 選擇器</h3><p>來看一下跟 <code>id</code> 選擇器有什麼差別</p><p>給同個 <code>id</code> &amp; <code>className</code> 再用 <code>console.log</code> 查看</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dog"</span>&gt;</span>dog 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dog"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dog"</span>&gt;</span>dog 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>先示範選擇器抓 <code>id</code> 的效果<br>然後在 <code>console.log</code> 下 <code>$('#dog').text()</code>，顯示如下<br><img src="https://i.imgur.com/HjZsX8q.png"><br>只會抓到第一個 <code>id</code> 的 <code>dog</code> 而已</p><p>再試試選擇器抓 <code>className</code> 的話呢?<br>輸入 <code>$('.dog').text()</code> ，顯示如下紅框處<br><img src="https://i.imgur.com/FdkEjg8.png"></p><p>綠色是選擇器的差別上面是 <code>id</code> ，下面是 <code>className</code><br>可以看如果用 <code>className</code> 選擇器的話兩個都會顯示</p><p><a href="https://codepen.io/gleofgja/pen/LYRXWPy?editors=1011">DEMO</a></p><h3 id="元素選擇器"><a href="#元素選擇器" class="headerlink" title="元素選擇器"></a>元素選擇器</h3><p>觀念跟 <code>class</code> 很像，可以同時更改多個元素內容或樣式，但會有點風險，因為同個檔案裡面或有多個相同元素</p><p>給三個 <code>p</code> 元素跟一個 <code>button</code> ，透過按下 <code>button</code> 可以更改元素內的內容，以下示範</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"changeWord"</span>&gt;</span>change-Word<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>jQuery 步驟:</p><ol><li>選擇要改變的元素 <code>p</code></li><li>改變的樣式 <code>.text('changeWord')</code></li><li>按下 <code>button</code> 的動作</li></ol><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="hljs-string">'#changeWord'</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  $(<span class="hljs-string">'p'</span>).text(<span class="hljs-string">'changeWord'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/GRjwWNX?editors=1011">DEMO</a></p><hr><h2 id="總結-id-、-className-amp-元素的差別"><a href="#總結-id-、-className-amp-元素的差別" class="headerlink" title="總結 id 、 className &amp; 元素的差別:"></a>總結 <code>id</code> 、 <code>className</code> &amp; 元素的差別:</h2><ul><li>id: 若有很多相同 id ，<font color="#FF0000">只會選取第一個</font></li><li>className: 會同時選取<font color="#FF0000">所有</font>相同的 className</li><li>元素: 會同時選取<font color="#FF0000">所有</font>相同的元素</li></ul><p>會用到 <code>className</code> 的原因是為了方便選更改多個樣式，可以用在相同的商品列表上，但如果選擇 <code>id</code> 的話就只會更改單一樣式而且是第一個，之後相同 <code>id</code> 的不會更改到</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://codeshiba.teachable.com/courses/1255270/lectures/29521035">jQuery 幼幼班</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;三大重點&quot;&gt;&lt;a href=&quot;#三大重點&quot; class=&quot;headerlink&quot; title=&quot;三大重點&quot;&gt;&lt;/a&gt;三大重點&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;選擇器 (selector)&lt;/li&gt;
&lt;li&gt;事件觸發 (event)&lt;/li&gt;
&lt;li&gt;事件處發的回調函數&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    
    <category term="jQuery" scheme="https://pktseng.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 實作一個記帳簿</title>
    <link href="https://pktseng.github.io/2021/01/13/%E8%A8%98%E5%B8%B3/"/>
    <id>https://pktseng.github.io/2021/01/13/%E8%A8%98%E5%B8%B3/</id>
    <published>2021-01-12T16:00:00.000Z</published>
    <updated>2021-01-13T07:56:24.823Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p><a href="https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission24">Github</a><br><a href="https://pktseng.github.io/Web-Side-Project/mission24/index.html">DEMO</a></p><h2 id="切出來版型如下"><a href="#切出來版型如下" class="headerlink" title="切出來版型如下"></a>切出來版型如下</h2><p><img src="https://i.imgur.com/EKaScxe.png"></p><a id="more"></a><hr><h2 id="HTML-模板"><a href="#HTML-模板" class="headerlink" title="HTML 模板"></a>HTML 模板</h2><p>給個容器，並將顯示及輸入的內容寫在裡面，比較特別的地方是 <code>list</code> ，<code>list</code> 裡面的項目清單會交由 <code>JavaScript</code> 字串模板來撰寫</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Expense Tracker<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Your Balance<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"balance"</span>&gt;</span>$0.00<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"inc-exp-container"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Income<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"money-plus"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"money plus"</span>&gt;</span>+$0.00<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>Expense<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"money-minus"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"money minus"</span>&gt;</span>-$0.00<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>History<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"list"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"list"</span>&gt;</span></span><br><span class="line">    <span class="hljs-comment">&lt;!-- &lt;li class="minus"&gt;</span></span><br><span class="line"><span class="hljs-comment">      Cash &lt;span&gt;-$400&lt;/span&gt;&lt;button class="delete-btn"&gt;x&lt;/button&gt;</span></span><br><span class="line"><span class="hljs-comment">    &lt;/li&gt; --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Add new transaction<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"form"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"text"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter text..."</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"amount"</span></span></span><br><span class="line"><span class="hljs-tag">        &gt;</span>Amount <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="line">        (negative - expense, positive - income)<span class="hljs-tag">&lt;/<span class="hljs-name">label</span></span></span><br><span class="line"><span class="hljs-tag">      &gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"number"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"amount"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter amount..."</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn"</span>&gt;</span>Add transaction<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="CSS-樣式"><a href="#CSS-樣式" class="headerlink" title="CSS 樣式"></a>CSS 樣式</h2><p>要注意的是 <code>plus</code>、<code>minus</code> 樣式，因為這兩個樣式會透過 <code>JavaScript</code> 的函式來控制</p><figure class="highlight css hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">'https://fonts.googleapis.com/css?family=Lato&amp;display=swap'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-pseudo">:root</span> {</span><br><span class="line">  <span class="hljs-attribute">--box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">3px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.12</span>), <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.24</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">* {</span><br><span class="line">  <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">body</span> {</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f7f7f7</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">  <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="hljs-attribute">align-items</span>: center;</span><br><span class="line">  <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="line">  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'Lato'</span>, sans-serif;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.container</span> {</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">350px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">h1</span> {</span><br><span class="line">  <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">1px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">h3</span> {</span><br><span class="line">  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#bbb</span>;</span><br><span class="line">  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">40px</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">h4</span> {</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">text-transform</span>: uppercase;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.inc-exp-container</span> {</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-built_in">var</span>(--box-shadow);</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">  <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.inc-exp-container</span> &gt; <span class="hljs-selector-tag">div</span> {</span><br><span class="line">  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.inc-exp-container</span> &gt; <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:first-of-type</span> {</span><br><span class="line">  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#dedede</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.money</span> {</span><br><span class="line">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">  <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">1px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.money</span><span class="hljs-selector-class">.plus</span> {</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#2ecc71</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.money</span><span class="hljs-selector-class">.minus</span> {</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#c0392b</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">label</span> {</span><br><span class="line">  <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">'text'</span>]</span>,</span><br><span class="line"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">'number'</span>]</span> {</span><br><span class="line">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#dedede</span>;</span><br><span class="line">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>: block;</span><br><span class="line">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.btn</span> {</span><br><span class="line">  <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#9c88ff</span>;</span><br><span class="line">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-built_in">var</span>(--box-shadow);</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">  <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>: block;</span><br><span class="line">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">30px</span>;</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.btn</span><span class="hljs-selector-pseudo">:focus</span>,</span><br><span class="line"><span class="hljs-selector-class">.delete-btn</span><span class="hljs-selector-pseudo">:focus</span> {</span><br><span class="line">  <span class="hljs-attribute">outline</span>: <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.list</span> {</span><br><span class="line">  <span class="hljs-attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">40px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span> {</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-built_in">var</span>(--box-shadow);</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;</span><br><span class="line">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="line">  <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="hljs-attribute">position</span>: relative;</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="line">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.plus</span> {</span><br><span class="line">  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">5px</span> solid <span class="hljs-number">#2ecc71</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.minus</span> {</span><br><span class="line">  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">5px</span> solid <span class="hljs-number">#c0392b</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.delete-btn</span> {</span><br><span class="line">  <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e74c3c</span>;</span><br><span class="line">  <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="line">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;</span><br><span class="line">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span> <span class="hljs-number">5px</span>;</span><br><span class="line">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="line">  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="line">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">100%</span>, -<span class="hljs-number">50%</span>);</span><br><span class="line">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">0.3s</span> ease;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.delete-btn</span> {</span><br><span class="line">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>所有互動將從這邊開始撰寫，也算是重頭戲!</p><h3 id="首先抓取-DOM-元素並設定成變數"><a href="#首先抓取-DOM-元素並設定成變數" class="headerlink" title="首先抓取 DOM 元素並設定成變數"></a>首先抓取 DOM 元素並設定成變數</h3><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> balance = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#balance'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> moneyPlus = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#money-plus'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> moneyMinus = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#money-minus'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> list = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#list'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> text = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#text'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> form = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#form'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> amount = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#amount'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="新增-DOM-list-項目清單"><a href="#新增-DOM-list-項目清單" class="headerlink" title="新增 DOM list 項目清單"></a>新增 DOM list 項目清單</h3><p>為了方便測試先寫一個陣列的假資料</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> dummyTransactions = [</span><br><span class="line">    { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'Flower'</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">-20</span> },</span><br><span class="line">    { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'Salary'</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">300</span> },</span><br><span class="line">    { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'Book'</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">-10</span> },</span><br><span class="line">    { <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'Camera'</span>, <span class="hljs-attr">amount</span>: <span class="hljs-number">150</span> }</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 將假資料暫時帶入 transaction 變數裡面</span></span><br><span class="line"><span class="hljs-keyword">let</span> transactions = dummyTransactions</span><br></pre></td></tr></tbody></table></figure><p>接著撰寫新增 list 項目清單，因為在撰寫項目清單時不確定會有幾個，因此在這邊用字串模板的方式載入，為了要載入新的項目必須要創建新的元素，這時候可以用 <code>createElement</code> 的方式來新增，新增好後要透過輸入的值來判斷是正還是負，這樣可以連帶綁定 css 樣式的顏色，最後利用字串模板的方式來顯示項目，不果字串模板裡面已經有判斷正負號了，所以後面的值就用 <code>Math.abs</code> 取絕對值的方式來顯示。</p><h4 id="步驟如下"><a href="#步驟如下" class="headerlink" title="步驟如下:"></a>步驟如下:</h4><ol><li>新增函式</li><li>判斷正負號</li><li>新增項目元素，同時賦予到 <code>item</code> 變數上</li><li>判斷 <code>item</code> 輸入的值決定要綁定的顏色</li><li>用字串模板的方式將值賦予到 <code>item</code> </li><li>再將 <code>item</code> 透過 <code>appendChild</code> 的方式塞到 <code>list</code> 元素裡面<figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTransactionDOM</span>(<span class="hljs-params">transaction</span>) </span>{</span><br><span class="line">    <span class="hljs-comment">// 判斷正負值</span></span><br><span class="line">    <span class="hljs-keyword">const</span> sign = transaction.amount &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">'+'</span> : <span class="hljs-string">'-'</span></span><br><span class="line">    <span class="hljs-comment">// console.log(sign)</span></span><br><span class="line">    <span class="hljs-comment">// 新增 li 元素</span></span><br><span class="line">    <span class="hljs-keyword">const</span> item = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'li'</span>)</span><br><span class="line">    <span class="hljs-comment">// console.log(item)</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 將 className 新增到 item ，判斷顯示的顏色</span></span><br><span class="line">    item.classList.add(transaction.amount &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">'plus'</span> : <span class="hljs-string">'minus'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// removeTransaction 要綁id ，不然會刪到同名的</span></span><br><span class="line">    item.innerHTML = <span class="hljs-string">`<span class="hljs-subst">${transaction.text}</span>&lt;span&gt;<span class="hljs-subst">${sign}</span><span class="hljs-subst">${<span class="hljs-built_in">Math</span>.abs(transaction.amount)}</span>&lt;/span&gt;&lt;button&gt;X&lt;/button&gt;`</span></span><br><span class="line">    </span><br><span class="line">    list.appendChild(item)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><hr><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>每當執行完某些動作時，都要將值初始化</p><p><code>forEach</code> :會將陣列中每個元素套用到指定的函式裡進行運算。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">    <span class="hljs-comment">// 輸入完之後 list 要回復空值</span></span><br><span class="line">    list.innerHTML = <span class="hljs-string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 將假資料丟到 addTransactionDOM 函式裡面運算</span></span><br><span class="line">    transactions.forEach(addTransactionDOM)</span><br><span class="line"></span><br><span class="line">    updateValue()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">init() <span class="hljs-comment">// 執行</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="監聽-form-表單內輸入的值"><a href="#監聽-form-表單內輸入的值" class="headerlink" title="監聽 form 表單內輸入的值"></a>監聽 form 表單內輸入的值</h2><p>接下來要判斷表單內輸入的值是否正確，如果輸入正確，將值同時綁定到 key 上，這麼做是為了防止刪除到同名的項目，像是用身分證綁定每筆資料的概念。</p><p>首先利用 <code>callbakc function</code> 的方式將函式賦予到 <code>addTransaction</code> 參數上，再用 if 判斷式判斷輸入的值是否為空值，如果不是空值，將輸入的值綁定到物件的 key 上，同時執行個兩函式</p><ol><li>將 <code>transaction</code> 變數新增到陣列清單裡面(這邊暫時用假資料的陣列)</li><li>將 <code>transaction</code> 帶到 <code>addTransactionDOM</code> 函式執行</li></ol><p>然後再將輸入框的值清空</p><p><code>Math.floor</code> :將有小數的值取成整數<br><code>Math.random</code> :取亂數，建立變數的身分證</p><h4 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h4><ol><li>監聽表單元素</li><li>判斷輸入值同時將輸入的值用 id 綁定</li><li>同時執行三的動作，將值新增到陣列內、判斷輸入值得正負、將值清空<figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTransaction</span>(<span class="hljs-params">e</span>) </span>{</span><br><span class="line">e.preventDefault()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 先判斷輸入是否為空值，若不是則繼續執行</span></span><br><span class="line"><span class="hljs-keyword">if</span> (text.value === <span class="hljs-string">''</span> || amount.value === <span class="hljs-string">''</span>) {</span><br><span class="line">    alert(<span class="hljs-string">'請重新輸入'</span>)</span><br><span class="line">} <span class="hljs-keyword">else</span> {</span><br><span class="line">    <span class="hljs-comment">// 如果不是空值，將輸入的 value 帶入 key 裡</span></span><br><span class="line">    <span class="hljs-keyword">const</span> transaction = {</span><br><span class="line">        id: generateID(),</span><br><span class="line">        text: text.value,</span><br><span class="line">        amount: +amount.value<span class="hljs-comment">//前面的+是為了轉成 number 型別</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 將新增的 transaction 物件加入到 transactions 物陣列內</span></span><br><span class="line">    transactions.push(transaction)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 執行 addTransactionDOM 函式，並帶入transaction</span></span><br><span class="line">    addTransactionDOM(transaction)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 執行帶值跟計算</span></span><br><span class="line">    updateValue()</span><br><span class="line">    updateLocalStorage()</span><br><span class="line">    <span class="hljs-comment">// 輸入完後恢復空值</span></span><br><span class="line">    text.value = <span class="hljs-string">''</span></span><br><span class="line">    amount.value = <span class="hljs-string">''</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateID</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">1000000</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">form.addEventListener(<span class="hljs-string">'submit'</span>, addTransaction)</span><br></pre></td></tr></tbody></table></figure></li></ol><hr><h2 id="計算收入與支出"><a href="#計算收入與支出" class="headerlink" title="計算收入與支出"></a>計算收入與支出</h2><p>以上判斷值的正確性跟顯示的樣式都寫好了，接下來要計算輸入的值<br>將 <code>transaction </code> 帶到 <code>transaction.amount</code> 裡面，再用 <code>map</code> 計算，判斷陣列內值，再將值賦予到 <code>amounts</code> 變數裡面，透過 <code>amounts</code> 變數去計算總結、收入、支出的值。</p><p>算好後將計算的值賦予到 DOM 元素上這樣就可以顯示計算的值了。</p><ul><li><code>acc</code> 是計算出來的總值， <code>item</code> 是每次新增的每一筆資料。</li><li><code>map</code> :處理陣列中每個元素，最後回傳出一個新的陣列。</li><li><code>filter</code> :會將陣列中的「每一個」元素帶入指定的函式內做判斷，如果元素符合判斷條件則會產生新的陣列元素。</li><li><code>reduce</code> :將陣列中每個元素進行計算，每次計算的結果會再與下個元素作計算，直到結束為止。<figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateValue</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">    <span class="hljs-keyword">const</span> amounts = transactions.map( <span class="hljs-function"><span class="hljs-params">transaction</span> =&gt;</span> transaction.amount)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 計算總結</span></span><br><span class="line">    <span class="hljs-keyword">const</span> total = amounts</span><br><span class="line">        .reduce(<span class="hljs-function">(<span class="hljs-params">acc, item</span>) =&gt;</span> (acc+= item), <span class="hljs-number">0</span>)</span><br><span class="line">        .toFixed(<span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 計算收入</span></span><br><span class="line">    <span class="hljs-keyword">const</span> income = amounts</span><br><span class="line">        .filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">0</span>)</span><br><span class="line">        .reduce(<span class="hljs-function">(<span class="hljs-params">acc, item</span>) =&gt;</span> (acc+= item), <span class="hljs-number">0</span>)</span><br><span class="line">        .toFixed(<span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 計算支出</span></span><br><span class="line">    <span class="hljs-keyword">const</span> expense = amounts</span><br><span class="line">        .filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &lt; <span class="hljs-number">0</span>)</span><br><span class="line">        .reduce(<span class="hljs-function">(<span class="hljs-params">acc, item</span>) =&gt;</span> (acc+= item), <span class="hljs-number">0</span>) * <span class="hljs-number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 將 total、income、expense 塞到各 dom 裡面</span></span><br><span class="line">    balance.innerHTML = <span class="hljs-string">`<span class="hljs-subst">${total}</span>`</span></span><br><span class="line">    moneyPlus.innerHTML = <span class="hljs-string">`<span class="hljs-subst">${income}</span>`</span></span><br><span class="line">    moneyMinus.innerHTML = <span class="hljs-string">`<span class="hljs-subst">${expense}</span>`</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><hr><h2 id="移除輸入的值"><a href="#移除輸入的值" class="headerlink" title="移除輸入的值"></a>移除輸入的值</h2><p>如果有新增的項目不要了，那就會用到刪除，刪除的函式是認剛才綁定的 id 就是陣列的身分證，觸發條件是當我 <code>onclick</code> 的時候就可以移除剛該筆項目。</p><p>在剛才的 <code>addTransactionDOM</code> 裡面有個字串模板，因為項目是在這邊創建的，那刪除也一起寫在這，透過 <code>removeTransaction</code> 函式綁定 <code>id</code></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">item.innerHTML = </span><br><span class="line"><span class="hljs-string">`<span class="hljs-subst">${transaction.text}</span></span></span><br><span class="line"><span class="hljs-string">&lt;span&gt;<span class="hljs-subst">${sign}</span><span class="hljs-subst">${<span class="hljs-built_in">Math</span>.abs(transaction.amount)}</span>&lt;/span&gt;</span></span><br><span class="line"><span class="hljs-string">&lt;button class='delete-btn' onclick='removeTransaction(<span class="hljs-subst">${transaction.id}</span>)'&gt;</span></span><br><span class="line"><span class="hljs-string">X</span></span><br><span class="line"><span class="hljs-string">&lt;/button&gt;`</span></span><br></pre></td></tr></tbody></table></figure><p>刪除的函式</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeTransaction</span>(<span class="hljs-params">id</span>)</span>{ <span class="hljs-comment">//記得帶 id 參數，不然會 fail</span></span><br><span class="line"><span class="hljs-comment">//邏輯??</span></span><br><span class="line">    transactions = transactions.filter(<span class="hljs-function"><span class="hljs-params">transaction</span>  =&gt;</span> transaction.id !== id)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 刪除後重新儲存在本地端</span></span><br><span class="line">    updateLocalStorage()</span><br><span class="line">    init()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="將計算的歷史紀錄保存起來，並存在本地端"><a href="#將計算的歷史紀錄保存起來，並存在本地端" class="headerlink" title="將計算的歷史紀錄保存起來，並存在本地端"></a>將計算的歷史紀錄保存起來，並存在本地端</h2><p>因為要要記錄自己新增的每筆資料，所以之前代替用的假資料可以刪掉了</p><ol><li><code>Storage.setItem('key', 'value')</code>：<br>透過在 <code>setItem()</code> 方法中指定物件屬性的 <code>key</code> 以及 <code>value</code> ，<br>我們可以在 <code>storage</code> 物件中加入屬性或修改原本的屬性內容。</li></ol><p>2.<code> Storage.getItem('key')</code>：<br>透過在 <code>getItem()</code> 方法中輸入屬性的 <code>key</code> ，我們可以得到 <code>storage</code> 物件對應的屬性 <code>value</code> 。</p><hr><p>利用 <code>getItem</code> 將 <code>transactions</code> 的 <code>key</code> 值輸入到 <code>localStorage</code> 裡面，再利用 <code>JSON.parse</code> 將值轉成物件格式，然後在賦予到 <code>localStorageTransactions</code> 變數中</p><p>如果 <code>localStorage</code> 抓到的值是 <code>null</code> 會自動轉換成空值</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> localStorageTransactions = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'transactions'</span>))</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> transactions = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">'transactions'</span>) !== <span class="hljs-literal">null</span>? localStorageTransactions: []</span><br></pre></td></tr></tbody></table></figure><p>利用 <code>setItem</code> 的方式將 <code>transactions</code> 設定成 <code>key</code> ，將 <code>transactions</code> 透過 <code>JSON.stringify</code> 的方式轉成字串並設定成 <code>value</code> ，加到 <code>addTransaction</code>、<code>removeTransaction</code> 函式裡面，這樣在新增每筆資料的時候不只同時綁定 <code>id</code> 還記錄到了本地端的歷史紀錄裡面。</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateLocalStorage</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="line">    <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">'transactions'</span>, <span class="hljs-built_in">JSON</span>.stringify(transactions))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://ithelp.ithome.com.tw/articles/10195522">JS30-Day15-LocalStorage</a><br><a href="https://www.oxxostudio.tw/articles/201908/js-array.html#array_foreach">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a><br><a href="https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842252#overview">20 Web Projects With Vanilla JavaScript</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission24&quot;&gt;Github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pktseng.github.io/Web-Side-Project/mission24/index.html&quot;&gt;DEMO&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;切出來版型如下&quot;&gt;&lt;a href=&quot;#切出來版型如下&quot; class=&quot;headerlink&quot; title=&quot;切出來版型如下&quot;&gt;&lt;/a&gt;切出來版型如下&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/EKaScxe.png&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="作品集" scheme="https://pktseng.github.io/categories/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    
    <category term="Javascript" scheme="https://pktseng.github.io/tags/Javascript/"/>
    
    <category term="jQuery" scheme="https://pktseng.github.io/tags/jQuery/"/>
    
    <category term="作品集" scheme="https://pktseng.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>簡易版匯率轉換</title>
    <link href="https://pktseng.github.io/2021/01/08/changeRate/"/>
    <id>https://pktseng.github.io/2021/01/08/changeRate/</id>
    <published>2021-01-07T16:00:00.000Z</published>
    <updated>2021-01-13T07:55:27.962Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>附上 <a href="https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission23">Github</a><br><a href="https://pktseng.github.io/Web-Side-Project/mission23/index.html">Demo</a></p><a id="more"></a><hr><h2 id="1-用-JS-撰寫"><a href="#1-用-JS-撰寫" class="headerlink" title="1. 用 JS 撰寫"></a>1. 用 JS 撰寫</h2><h4 id="利用選擇器抓取-DOM-元素"><a href="#利用選擇器抓取-DOM-元素" class="headerlink" title="利用選擇器抓取 DOM 元素"></a>利用選擇器抓取 DOM 元素</h4><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> currencyElOne = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#currencyOne'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> currencyElTwo = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#currencyTwo'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> amountElOne = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#amountOne'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> amountElTwo = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#amountTwo'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> swapEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#swap'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> rateEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#rate'</span>)</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="監聽抓取-dom-的操作事件，同時綁定事件的操作"><a href="#監聽抓取-dom-的操作事件，同時綁定事件的操作" class="headerlink" title="監聽抓取 dom 的操作事件，同時綁定事件的操作"></a>監聽抓取 dom 的操作事件，同時綁定事件的操作</h4><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 監聽 DOM 狀態</span></span><br><span class="line">currencyElOne.addEventListener(<span class="hljs-string">'change'</span>, caclulate)</span><br><span class="line">currencyElTwo.addEventListener(<span class="hljs-string">'change'</span>, caclulate)</span><br><span class="line">amountElOne.addEventListener(<span class="hljs-string">'input'</span>, caclulate)</span><br><span class="line">amountElTwo.addEventListener(<span class="hljs-string">'input'</span>, caclulate)</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="事件操作"><a href="#事件操作" class="headerlink" title="事件操作"></a>事件操作</h4><p><a href="https://www.exchangerate-api.com/">API</a><br>這邊要注意的是 Fetch API 的方式，在打完 API ，response 資料的時候，雖然資料已經是 JSON 格式，但 Fetch 必須再轉一次 JSON，變成 <code>json promise</code>，否則是抓不到後端回傳的資料的。<br><a href="https://www.oxxostudio.tw/articles/201908/js-fetch.html">參考文章</a></p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 操作 DOM 同時執行運算</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">caclulate</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-comment">// 透過選取的 DOM 將該 DOM的值塞到新變數中</span></span><br><span class="line">  <span class="hljs-keyword">const</span> currencyOne = currencyElOne.value</span><br><span class="line">  <span class="hljs-keyword">const</span> currencyTwo = currencyElTwo.value</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 發送 request ，開始打 API</span></span><br><span class="line">  fetch(<span class="hljs-string">`https://api.exchangerate-api.com/v4/latest/<span class="hljs-subst">${currencyOne}</span>`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 後端傳送 response 回傳結果</span></span><br><span class="line">  .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.json())<span class="hljs-comment">//將回傳結果轉換成 json 格式</span></span><br><span class="line">  .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> {</span><br><span class="line">    <span class="hljs-comment">// console.log(data)</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 用陣列的方式抓去 keyValue，再將值塞到 rate 變數中</span></span><br><span class="line">    <span class="hljs-keyword">const</span> rate = data.rates[currencyTwo] </span><br><span class="line">    <span class="hljs-comment">// console.log(rate)</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//將計算後的值放到綁定的 rate dom 中，同時計算當前匯率</span></span><br><span class="line">    rateEl.innerHTML = <span class="hljs-string">`1 <span class="hljs-subst">${currencyOne}</span> = <span class="hljs-subst">${rate}</span> <span class="hljs-subst">${currencyTwo}</span>`</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 幣值2的值 = 幣值1的值*匯率，將值四捨五入</span></span><br><span class="line">    amountElTwo.value = (amountElOne.value*rate).toFixed(<span class="hljs-number">2</span>)</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="切換匯率，將匯率互相對調"><a href="#切換匯率，將匯率互相對調" class="headerlink" title="切換匯率，將匯率互相對調"></a>切換匯率，將匯率互相對調</h4><p>這邊要注意的是，必須要先將<code>currencyElOne.value</code> 塞到 <code>temp</code> 變數中，方便待會賦值，會這樣做是有原因的</p><p>以下列這段程式碼為例，分別用 <code>console.log</code> 查看值</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">swapEl.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> temp = currencyElOne.value</span><br><span class="line"></span><br><span class="line">  currencyElOne.value = currencyElTwo.value</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'currencyElOne.value'</span>, currencyElOne.value)</span><br><span class="line"></span><br><span class="line">  currencyElTwo.value = currencyElOne.value</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'currencyElTwo.value'</span>, currencyElTwo.value)</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// currencyElTwo.value = temp</span></span><br><span class="line">  <span class="hljs-comment">// console.log('temp', temp)</span></span><br><span class="line">  caclulate()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>結果如下圖<br><img src="https://i.imgur.com/qQYix3x.png"></p><p>兩個轉換的匯率都會長一樣，而且匯率永遠都會卡 1，無法轉換，如下圖<br><img src="https://i.imgur.com/1AO39Zg.png"></p><p>為防止這樣的情況發生，可以先將 <code>currencyElOne.value</code> 塞到 <code>temp</code> 中，再確認 <code>temp</code> 值的是否有抓到，如下圖<br><img src="https://i.imgur.com/f4LpfCR.png"></p><p>然後再將 <code>temp</code> 賦予到<code>currencyElTwo.value</code>，這樣就可以避免匯率卡1的問題，最後要記得執行計算。</p><p>完整函式如下</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">swapEl.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{</span><br><span class="line">  <span class="hljs-keyword">const</span> temp = currencyElOne.value</span><br><span class="line">  currencyElOne.value = currencyElTwo.value</span><br><span class="line">  currencyElTwo.value = temp</span><br><span class="line">  caclulate()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="2-用-jQuery-撰寫"><a href="#2-用-jQuery-撰寫" class="headerlink" title="2. 用 jQuery 撰寫"></a>2. 用 jQuery 撰寫</h2><h4 id="抓取-DOM-，同時綁定事件"><a href="#抓取-DOM-，同時綁定事件" class="headerlink" title="抓取 DOM ，同時綁定事件"></a>抓取 DOM ，同時綁定事件</h4><p>先將每個 DOM 事件切割成一小部分，撰寫方法也要為簡單，步驟如下:</p><ol><li>抓取 DOM 元素 <code>$('#currencyOne')</code></li><li>後面再接事件<code>change</code>，</li><li>事件裡面會包發生的動作 <code>caclulate()</code></li><li>執行 <code>caclulate()</code><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 將 dom 切割成小事件</span></span><br><span class="line"><span class="hljs-comment">// 監聽 currencyOne 選取值</span></span><br><span class="line">$(<span class="hljs-string">'#currencyOne'</span>).change(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">    caclulate()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 監聽 amountOne 選取值</span></span><br><span class="line">$( <span class="hljs-string">'#amountOne'</span>).change(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">    caclulate()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 監聽 currencyTwo 選取值</span></span><br><span class="line">$( <span class="hljs-string">'#currencyTwo'</span>).change(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">    caclulate()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 監聽 amountTwo 選取值</span></span><br><span class="line">$( <span class="hljs-string">'#amountTwo'</span>).change(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">    caclulate()</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">caclulate()</span><br></pre></td></tr></tbody></table></figure></li></ol><hr><h4 id="事件裡面會包發生的動作"><a href="#事件裡面會包發生的動作" class="headerlink" title="事件裡面會包發生的動作"></a>事件裡面會包發生的動作</h4><p>這邊示範用 jquery ajax 打 api </p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 變動容器內的 dom，同時計算匯率</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">caclulate</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  <span class="hljs-comment">// 用 jquery 的方式命名變數</span></span><br><span class="line">  <span class="hljs-keyword">let</span> currencyOne = $(<span class="hljs-string">'#currencyOne'</span>).val()</span><br><span class="line">  <span class="hljs-keyword">let</span> currencyTwo = $(<span class="hljs-string">'#currencyTwo'</span>).val()</span><br><span class="line">  <span class="hljs-keyword">let</span> rate = $(<span class="hljs-string">'#rate'</span>).val()</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 用 ajax 打 api</span></span><br><span class="line">  $.ajax({</span><br><span class="line">      methods: <span class="hljs-string">'GET'</span>,</span><br><span class="line">      url: <span class="hljs-string">`https://api.exchangerate-api.com/v4/latest/<span class="hljs-subst">${currencyOne}</span>`</span>,</span><br><span class="line">  })</span><br><span class="line">  <span class="hljs-comment">// 後端 respose 資料，將資料用 res 命名</span></span><br><span class="line">  .done(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>{</span><br><span class="line">    <span class="hljs-comment">// 可用 console.log(res) 查看 response api  </span></span><br><span class="line">    <span class="hljs-comment">// 將後端的資料塞到 rate 裡面，[currencyTwo] 是抓取物件 keyValue</span></span><br><span class="line">    <span class="hljs-keyword">let</span> rate = res.rates[currencyTwo]</span><br><span class="line">    <span class="hljs-comment">// 用 console.log(rate) 查看是否有抓到 keyValue</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 將匯率轉換後的值塞到 amountTwo dom 裡面，並4捨5入取到第2位</span></span><br><span class="line">    $(<span class="hljs-string">'#amountTwo'</span>).val(($(<span class="hljs-string">'#amountOne'</span>).val() * rate).toFixed(<span class="hljs-number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 將轉換的匯率顯示在各匯率之間</span></span><br><span class="line">    $(<span class="hljs-string">'#rate'</span>).text(<span class="hljs-string">`1 <span class="hljs-subst">${currencyOne}</span> = <span class="hljs-subst">${currencyTwo}</span> * <span class="hljs-subst">${rate}</span>`</span>)</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h4 id="動作的匯率對調"><a href="#動作的匯率對調" class="headerlink" title="動作的匯率對調"></a>動作的匯率對調</h4><p>函式邏輯跟上面 js 的一樣，差別寫法上會有些微的不同</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 按下 swap dom 會將匯率對調</span></span><br><span class="line">$(<span class="hljs-string">'#swap'</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{</span><br><span class="line">  <span class="hljs-keyword">let</span> temp = $(<span class="hljs-string">'#currencyOne'</span>).val()</span><br><span class="line">  $(<span class="hljs-string">'#currencyOne'</span>).val($(<span class="hljs-string">'#currencyTwo'</span>).val())</span><br><span class="line">  $(<span class="hljs-string">'#currencyTwo'</span>).val(temp)</span><br><span class="line">  caclulate()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><p><a href="https://www.oxxostudio.tw/articles/201908/js-fetch.html">JavaScript Fetch API 使用教學</a><br><a href="https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842116#questions">20 Web Projects With Vanilla JavaScript</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;附上 &lt;a href=&quot;https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission23&quot;&gt;Github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pktseng.github.io/Web-Side-Project/mission23/index.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="作品集" scheme="https://pktseng.github.io/categories/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    
    <category term="Javascript" scheme="https://pktseng.github.io/tags/Javascript/"/>
    
    <category term="jQuery" scheme="https://pktseng.github.io/tags/jQuery/"/>
    
    <category term="作品集" scheme="https://pktseng.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>簡易表單驗證</title>
    <link href="https://pktseng.github.io/2020/12/31/formVaild/"/>
    <id>https://pktseng.github.io/2020/12/31/formVaild/</id>
    <published>2020-12-30T16:00:00.000Z</published>
    <updated>2021-01-11T07:40:22.321Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>附上 <a href="https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission21">Github</a><br><a href="https://pktseng.github.io/Web-Side-Project/mission21/index.html">Demo</a></p><a id="more"></a><h2 id="第一部分-刻板-上色"><a href="#第一部分-刻板-上色" class="headerlink" title="第一部分: 刻板+上色"></a>第一部分: 刻板+上色</h2><p>先寫好要一般 form 表單要填寫的資料，</p><ol><li>使用者名稱</li><li>使用者信箱</li><li>密碼</li><li>密碼2次驗證</li></ol><p>上色跟輸入框的間隔可依照個人喜好設定</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"container"</span>&gt;</span></span><br><span class="line"><span class="hljs-comment">&lt;!-- 輸入使用者名稱 --&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'form'</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'form'</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>表單驗證<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"formControl"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"username"</span>&gt;</span>UserName:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Key in UserName"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'failMessage'</span>&gt;</span>Error message<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!-- 輸入使用者e-mail --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"formControl"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"email"</span>&gt;</span>E-mail:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Key in E-mail"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'failMessage'</span>&gt;</span>Error message<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!-- 輸入使用者密碼 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"formControl"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"password"</span>&gt;</span>Password:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Key in password"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'failMessage'</span>&gt;</span>密碼錯誤<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-comment">&lt;!-- 確認使用者密碼 --&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"formControl"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"confirmPassword"</span>&gt;</span>Confirm Password:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"confirmPassword"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Key in password again"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">small</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'failMessage'</span>&gt;</span>請重新輸入密碼<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./all.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="第二部分-驗證"><a href="#第二部分-驗證" class="headerlink" title="第二部分: 驗證"></a>第二部分: 驗證</h2><h3 id="抓取-DOM"><a href="#抓取-DOM" class="headerlink" title="抓取 DOM"></a>抓取 DOM</h3><p>先抓取 dom 元素，因為是抓 id 所以是用 <code>#</code> </p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 抓取 dom 元素</span></span><br><span class="line"><span class="hljs-keyword">const</span> form = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#form'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> username = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#username'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> email = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#email'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> password = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#password'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> confirmPassword = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#confirmPassword'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="常用的獨立寫出來"><a href="#常用的獨立寫出來" class="headerlink" title="常用的獨立寫出來"></a>常用的獨立寫出來</h3><p>因為只要寫錯就會顯示錯誤訊息，這動作很重複所以將這些函式獨立拉出來，<br>利用 callback function 的方式重複使用<br>要特別注意以下兩點</p><ol><li>是第3行 <code>formControl</code> 必須要用 <code>父元素</code> 的方式不能用 class 選擇器，不然它只會抓取 class 選擇器的最後一個，不會抓到每個 input 輸入框的父層</li><li>第5行的 <code>small</code> 必須用 <code>formControl</code> 的方式抓，不能用 <code>document</code> ，不然會抓不到<figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 失敗顯示</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showFail</span>(<span class="hljs-params">input, message</span>)</span>{</span><br><span class="line">    <span class="hljs-keyword">const</span> formControl = input.parentElement</span><br><span class="line">    formControl.className = <span class="hljs-string">'formControl fail'</span></span><br><span class="line">    <span class="hljs-keyword">const</span> small = formControl.querySelector(<span class="hljs-string">'small'</span>)</span><br><span class="line">    small.innerText = message</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 成功顯示</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showSuccess</span>(<span class="hljs-params">input</span>)</span>{</span><br><span class="line">    <span class="hljs-keyword">const</span> formControl = input.parentElement</span><br><span class="line">    formControl.className = <span class="hljs-string">'formControl success'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 第一字體變大寫</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFiledName</span>(<span class="hljs-params">input</span>)</span>{</span><br><span class="line">    <span class="hljs-keyword">return</span> input.id.slice(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>).toUpperCase() +input.id.slice(<span class="hljs-number">1</span>).toLowerCase()</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="取消重複性"><a href="#取消重複性" class="headerlink" title="取消重複性"></a>取消重複性</h3><p>因為每個 dom 的 <code>input</code> 都要驗證的話就會有很多 <code>if else</code> 判斷式，這時候可以用 javascript 的 <code>forEach</code> 來讀取每個 dom ，然後再寫一次 <code>if else</code> 就可以每個都判斷</p><p><code>checkInput</code> 裡面的值用陣列顯示，那每個質都要被讀取到就用 <code>forEach</code> ，在陣列中的 dom 因為綁了 <code>input</code> 所以直接帶入是否是空值得判斷式，因為如果寫在裡面會太大包，造成日後不好維護，外加太醜，所以這邊直接用 callback function 的方式</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 輸入框輸入確認</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkInput</span>(<span class="hljs-params">inputId</span>)</span>{</span><br><span class="line">    inputId.forEach(inputArr)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 輸入框 callback function</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inputArr</span>(<span class="hljs-params">input</span>)</span>{</span><br><span class="line">    <span class="hljs-keyword">if</span>(input.value.trim() === <span class="hljs-string">''</span>){</span><br><span class="line">        showFail(input, <span class="hljs-string">`<span class="hljs-subst">${getFiledName(input)}</span> is require`</span>)</span><br><span class="line">    }<span class="hljs-keyword">else</span>{</span><br><span class="line">        showSuccess(input)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="驗證"><a href="#驗證" class="headerlink" title="驗證"></a>驗證</h3><h4 id="使用者名稱長度的驗證"><a href="#使用者名稱長度的驗證" class="headerlink" title="使用者名稱長度的驗證"></a>使用者名稱長度的驗證</h4><p>為了防止使用者名字長度過長或是過短，所以要設定一個卡關機制</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 輸入使用者名稱跟密碼長度限制</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkLength</span>(<span class="hljs-params">input, min, max</span>) </span>{</span><br><span class="line">    <span class="hljs-keyword">if</span>(input.value.length &lt; min){</span><br><span class="line">        showFail(input, <span class="hljs-string">`<span class="hljs-subst">${getFiledName(input)}</span> must be at least <span class="hljs-subst">${min}</span> characters`</span>)</span><br><span class="line">    }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (input.value.length &gt; max){</span><br><span class="line">        showFail(input, <span class="hljs-string">`<span class="hljs-subst">${getFiledName(input)}</span> must be  less than <span class="hljs-subst">${max}</span> characters`</span>)</span><br><span class="line">    }<span class="hljs-keyword">else</span>{</span><br><span class="line">        showSuccess(input)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="信箱驗證"><a href="#信箱驗證" class="headerlink" title="信箱驗證"></a>信箱驗證</h4><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 信箱正規表達驗證</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkMail</span> (<span class="hljs-params">input</span>)</span>{</span><br><span class="line">    <span class="hljs-keyword">const</span> re = <span class="hljs-regexp">/^(([^&lt;&gt;()[\]\\.,;:\s@"]+(\.[^&lt;&gt;()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/</span></span><br><span class="line">    <span class="hljs-comment">// return re.test(String(email).toLowerCase())</span></span><br><span class="line">    <span class="hljs-keyword">if</span>(re.test(input.value)){</span><br><span class="line">        showSuccess(input)</span><br><span class="line">    }<span class="hljs-keyword">else</span>{</span><br><span class="line">        showFail(input, <span class="hljs-string">'email is not valid'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="密碼雙重驗證"><a href="#密碼雙重驗證" class="headerlink" title="密碼雙重驗證"></a>密碼雙重驗證</h4><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 密碼雙重驗證</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkPasswordMatch</span>(<span class="hljs-params">password, confirmPassword</span>)</span>{</span><br><span class="line">    <span class="hljs-keyword">if</span>(password.value !== confirmPassword.value){</span><br><span class="line">        showFail(confirmPassword, <span class="hljs-string">'password is not match'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h4><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 執行</span></span><br><span class="line">form.addEventListener(<span class="hljs-string">'submit'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>{</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    checkInput([username, email, password, confirmPassword])</span><br><span class="line">    checkLength(username, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>)</span><br><span class="line">    checkLength(password, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>)</span><br><span class="line">    checkMail(email)</span><br><span class="line">    checkPasswordMatch(password, confirmPassword)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a><a href="https://codepen.io/gleofgja/pen/JjRpOje?editors=1010">Demo</a></h3><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.udemy.com/course/web-projects-with-vanilla-javascript/learn/lecture/17842050#overview">20 Web Projects With Vanilla JavaScript</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;附上 &lt;a href=&quot;https://github.com/PKTseng/Web-Side-Project/tree/gh-pages/mission21&quot;&gt;Github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://pktseng.github.io/Web-Side-Project/mission21/index.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="作品集" scheme="https://pktseng.github.io/categories/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
    
    <category term="formValid" scheme="https://pktseng.github.io/tags/formValid/"/>
    
    <category term="作品集" scheme="https://pktseng.github.io/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Pull Request</title>
    <link href="https://pktseng.github.io/2020/12/28/pullRequest/"/>
    <id>https://pktseng.github.io/2020/12/28/pullRequest/</id>
    <published>2020-12-27T16:00:00.000Z</published>
    <updated>2021-01-11T08:24:30.049Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><ol><li><code>git clone</code>、<code>git pull</code> 這兩個指令有什麼不同，又分別代表什麼意思。</li><li><code>Pull Request</code> 的流程是甚麼</li><li>為什麼需要透過 <code>Pull Request</code> 來開發<a id="more"></a></li></ol><hr><h2 id="git-clone、git-pull-這兩個指令有什麼不同，又分別代表什麼意思。"><a href="#git-clone、git-pull-這兩個指令有什麼不同，又分別代表什麼意思。" class="headerlink" title="git clone、git pull 這兩個指令有什麼不同，又分別代表什麼意思。"></a><code>git clone</code>、<code>git pull</code> 這兩個指令有什麼不同，又分別代表什麼意思。</h2><p>兩個都是更新檔案，repository 更新的過程會不一樣，一個是整包下載，一個是下載本地端已經有只需要下載部分更新的檔案，兩個同樣都是把檔案更新到最新的狀態</p><ul><li><p><code>git clone</code> :在本地( local )端還沒有 repository 的狀況下，我們就會需要使用到 <code>clone</code> ，把整包 repository 載下來，一般也只需要 clone 一次，之後就只需要 pull 了。</p></li><li><p><code>git pull</code> :就是我們本地( local )端已經有 repository 了，這時候就不需要在 <code>clone</code> ，只需要透過 <code>pull</code> 的方式，將遠端 ( remote )的 repository 載下來就可以了</p></li></ul><p>以上就是 clone、pull 的差別</p><h2 id="為什麼需要透過-Pull-Request-來開發"><a href="#為什麼需要透過-Pull-Request-來開發" class="headerlink" title="為什麼需要透過 Pull Request 來開發"></a>為什麼需要透過 <code>Pull Request</code> 來開發</h2><p>一般在開發或是看到很有興趣的開源專案，如果想加入新功能或是加入開發專安的話就會需要使用到 <code>Pull Request</code>，也就是我們俗稱的 <code>PR</code></p><h2 id="Pull-Request-的流程是甚麼"><a href="#Pull-Request-的流程是甚麼" class="headerlink" title="Pull Request 的流程是甚麼"></a><code>Pull Request</code> 的流程是甚麼</h2><p><strong>Pull Request 簡稱 PR</strong><br>如果已經是這個團隊的開者之一，那就單純 clone 就好，<br>如果是別的開源專案又不是這個專案的原始開發者之一，那就需要先將專案 fork 出來，再開始開發</p><p>以饅頭計畫的專案為例，我們已經是這個專案的開發人員之一，所以只需要 clone 下來就好，然後開分之並在分支上進行開發，做完之後我們會需要 push 到 remote repository，這時候就要發 PR 了，讓資深工程師確認我們寫的需求有沒有問題，如果沒問題就會 merge 到主支上</p><h3 id="以下示範"><a href="#以下示範" class="headerlink" title="以下示範:"></a>以下示範:</h3><p>因為之前已經 clone 過了，<font color="#FF0000"><strong>請記得先切換到主之上</strong></font>，然後再把本地端的檔案 pull 到最新的狀態，然後再用 <code>git checkout -b 分支名稱</code>，創建該分支同時切換到該分支上，如下圖<br><img src="https://i.imgur.com/SIEMhnl.jpg"></p><p>接下來就是 Git 基本操作了<br>在分支上新增好內容後，把新增或是更改資料加入索引<br><img src="https://i.imgur.com/YCKG1RJ.jpg"></p><p>然後提交(commit)上去<br>出現<code>git push --set-upstream origin example-mission</code>的原因可以參考<a href="https://blog.csdn.net/benben_2015/article/details/78803753">這篇文章</a><br>解決方法就是複製貼上…<br><img src="https://i.imgur.com/X7JS8Fu.png"></p><p>上面太模糊..補上清晰版…<br><img src="https://i.imgur.com/Fn1eXXI.png"></p><p>push 上去後到 Github 專案點選左上 Pull Request，<br>因為目前還沒有發 PR，所以沒看到我剛新增的內容。<br>要發 PR 的話要點選右邊那兩個紅框的，<br><img src="https://i.imgur.com/KcQ30Je.png"></p><p>一種是 <strong>Compare &amp; pull request</strong> ，另一種是<strong>New pull request</strong>，兩個都可以發，過程不一樣而已，以下兩種都會示範</p><h3 id="New-pull-request"><a href="#New-pull-request" class="headerlink" title="New pull request"></a>New pull request</h3><p>點擊 <strong>New pull request</strong> 會顯示下圖畫面，<br><font color="#FF0000">左邊 <code>base:main</code> 是主支千萬不要動到</font>，動右邊要 merge 的分支就好<br>因為我們要把剛才新增的內容合併到主之上，所以選擇剛才新增的分支名稱 <code>example-mission</code><br><img src="https://i.imgur.com/2lQZlxZ.png"></p><p>選完就會顯示剛才新增的內容，如下圖，確認 OK 後點選右邊的 <code>Create pull request</code><br><img src="https://i.imgur.com/vkAsffP.png"></p><p>接著會進入以下畫面，這邊就要寫一下大標題，還有較細項的更改內容，<br>填寫完後再按右下的 <code>Create pull request</code><br><img src="https://i.imgur.com/dJDi880.png"></p><p>按下後會進入以下畫面<br><img src="https://i.imgur.com/MEOjzcS.png"></p><p>再回到 Pull Request 刷新一下，就會看到剛才新發的 PR 了<br><img src="https://i.imgur.com/yA8Saeh.png"></p><p>接下來就等資深工程師確認我們寫的內容有無問題，<br>沒問題就會按下 <code>Merge pull request</code>，合併到主支(main)上</p><h3 id="Compare-amp-pull-request"><a href="#Compare-amp-pull-request" class="headerlink" title="Compare &amp; pull request"></a>Compare &amp; pull request</h3><p>這邊更簡單，也推薦使用這個<br>因為點選 Compare &amp; pull request 後系統會自動選取剛才新建的分支上，會顯示下圖<br><img src="https://i.imgur.com/dJDi880.png"></p><p>接著叫輸入大標題跟內容再 <code>Create pull request</code> ，這樣 PR 就發完了</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://gitbook.tw/chapters/github/pull-request.html">與其它開發者的互動 - 使用 Pull Request（PR） - 為你自己學 Git | 高見龍</a><br><a href="https://w3c.hexschool.com/git/b9be5b1e">git add、git commit - 提交版本</a><br><a href="https://blog.csdn.net/benben_2015/article/details/78803753">Git master branch has no upstream branch的解決</a></p></body></html>]]></content>
    
    
    <summary type="html">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git clone&lt;/code&gt;、&lt;code&gt;git pull&lt;/code&gt; 這兩個指令有什麼不同，又分別代表什麼意思。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pull Request&lt;/code&gt; 的流程是甚麼&lt;/li&gt;
&lt;li&gt;為什麼需要透過 &lt;code&gt;Pull Request&lt;/code&gt; 來開發&lt;/li&gt;&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;</summary>
    
    
    
    <category term="Pull Request" scheme="https://pktseng.github.io/categories/Pull-Request/"/>
    
    
    <category term="Pull Request" scheme="https://pktseng.github.io/tags/Pull-Request/"/>
    
    <category term="git clone" scheme="https://pktseng.github.io/tags/git-clone/"/>
    
    <category term="git pull" scheme="https://pktseng.github.io/tags/git-pull/"/>
    
  </entry>
  
  <entry>
    <title>簡易的 Git 操作</title>
    <link href="https://pktseng.github.io/2020/12/20/git/"/>
    <id>https://pktseng.github.io/2020/12/20/git/</id>
    <published>2020-12-19T16:00:00.000Z</published>
    <updated>2021-01-11T08:24:33.949Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p>Git 是一個可控制程式碼版本的工具<br>當我們在開發的時候為了不影響線上的產品，就會先開一個分支出來在分支上做開發，這樣既可以大膽的開發也不怕會影響到線上正在運行的版本，同時又做到程式碼的控管，是一個很方便的工具</p><a id="more"></a><h2 id="Git-指令"><a href="#Git-指令" class="headerlink" title="Git 指令"></a>Git 指令</h2><p>Git 有分幾個簡單寫常用的幾個指令<br><code>git init</code>: 在我們 local 端建立數據庫<br><code>git add .</code>: 加入索引<br><code>git commit -m</code>: 將目前加入索引的資料提交出去<br><code>git push origin</code>: 推送到遠端數據庫<br><code>git pull</code>: 從遠端數據庫拉取最新的版本<br><code>git branch</code>: 查看分支<br><code>git checkout </code>: 切換到該分支<br><code>git log</code>: 查看 git 歷史紀錄<br><code>git status</code>: 查看目前資料狀態<br><code>git merge</code>: 合併分支</p><p>工作上常用的大概是以上這幾種</p><hr><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>OS: window<br>首先到 <a href="https://git-scm.com/">Git 官網</a>下載 Git<br><img src="https://i.imgur.com/A0KD6ji.png"></p><p>或是用 chcoclatey 安裝也可以 ，輸入<code>choco install git</code></p><p>初次安裝的話會需要設定使用者名稱跟密碼</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>安裝完成後在桌面建立資料夾，並簡單新增檔案，然後再對資料夾案右鍵，選取 Git Bash Here<br><img src="https://i.imgur.com/Tga7KCl.png"><br>會出現 Bash 視窗<br><img src="https://i.imgur.com/Ae4RKtN.png"><br>這樣就初始化完成了</p><h2 id="加入索引"><a href="#加入索引" class="headerlink" title="加入索引"></a>加入索引</h2><p>接下來就可以開發了</p><p>本來是檔案內容是空的，現在加入一點基本資料，然後要將這資料加入索引<br>當我們新增或是更改完成時就要將資料新增到索引，同時放到一個暫存區裡面<br>因為 VScode 有內建 <code>git add</code> ，就是下圖紅框處，如果有更改某檔案的資料，在 changes 就會有紀錄，首先左邊選單選到 Source control 會看到有檔案變更，點擊紅框的 + 號，要加入索引就把滑鼠移至紅框，會出現 + 號，點擊就 add 了<br><img src="https://i.imgur.com/FeAhBnc.png"></p><p>add 新增索引後，如下圖<br><img src="https://i.imgur.com/7AHm6f6.png"></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>當確定好更改的檔案並加入索引後，我們要 commit ，把暫存區裡面的資料丟到儲存庫裡面<br>通常 commit 後面都會接此次更改的資訊，寫法如下<br><code>git commit -m "add index.html"</code>，要記得空格跟加雙引號<br><img src="https://i.imgur.com/qQ0nwuq.png"></p><p>然後推送至遠端數據庫</p><h2 id="建立遠端儲存庫"><a href="#建立遠端儲存庫" class="headerlink" title="建立遠端儲存庫"></a>建立遠端儲存庫</h2><p>在推送至遠端數據庫之前，要先在遠端建立遠端數據庫，那這會用到 Github ，<br>如果沒有 Github 要先辦一下<br>登入後看到右上角有個 + 號，點擊候選取 <code>New repository</code><br><img src="https://i.imgur.com/TF4JMgd.png"><br>會出現以下畫面，然後再紅框處輸入遠端數據庫的名稱，這邊用 test1 示範，然後點擊下面的<br>Create repository<br><img src="https://i.imgur.com/rEvAKi8.png"></p><p>接著會顯示以下畫面<br><img src="https://i.imgur.com/vqMTP0o.png"></p><h2 id="推送至遠端數據庫"><a href="#推送至遠端數據庫" class="headerlink" title="推送至遠端數據庫"></a>推送至遠端數據庫</h2><p>當我們把資料都丟到數據庫後，接下來要將新增或是修改的檔案推送到遠端數據庫中<br><code>git push origin test</code> ，意思是將 test 這個分之 push 到遠端的數據庫中<br>因為我剛剛已經 init、add、commit 了，所以現在就直接 push，點選右邊紅框的複製紐<br>直接貼上<br><img src="https://i.imgur.com/zS5tHdk.png"></p><p>用 <code>git log</code> 指令確認一下狀態<br><img src="https://i.imgur.com/9HjeMar.png"></p><p>在回到 Github 在刷新一次頁面，確認一下<br><img src="https://i.imgur.com/1ZPugtq.png"></p><p>這樣不管是 loacal 或是 remote，前置作業就算是完成了</p><h2 id="製造分支"><a href="#製造分支" class="headerlink" title="製造分支"></a>製造分支</h2><p>接下來我們可以試著用分支開發<br>造分支有兩種方法:</p><ol><li><p><code>git checkout -b 分支名稱</code>: 這方法比較直接，輸入完直接造分支同時切到該分支上<br><img src="https://i.imgur.com/1QXhPuf.png"></p></li><li><p><code>git branch 分支名稱</code>: 這方法會造分支但不會切換到該分支，必須再下 <code>git checkout 分支名稱</code> 才會切過去，以下示範<br>我先用 <code>branch</code> 創造分支 <code>dev2</code> ，然後再確認目前在哪個分支上<br>(<strong>亮綠色有星號的就是在該分支上</strong>)<br>但因為我創的是 <code>dev2</code> ，所以還沒轉過去，要用 <code>checkout</code> 才可以切換過去<br><img src="https://i.imgur.com/XZGOfc8.png"></p></li></ol><h2 id="合併分支"><a href="#合併分支" class="headerlink" title="合併分支"></a>合併分支</h2><p>接下來流程跟上面步驟一樣</p><ol><li>建立索引 add 或是 按 +</li><li>提交至儲存庫<code> git commit</code></li><li>推送至遠端</li></ol><hr><h3 id="實際操作"><a href="#實際操作" class="headerlink" title="實際操作:"></a>實際操作:</h3><ol><li>確認在哪個分之</li><li>在分支上新增 <code>h2</code> 內容，並加入索引</li><li>用 <code>git status</code> 確認目前更改的檔案有哪些</li></ol><p>如下圖<br><img src="https://i.imgur.com/oz44dB5.png"></p><p>提交到儲存庫後，左邊的暫存檔就會不見<br><img src="https://i.imgur.com/WiXB10q.png"></p><p>再示範一次，新增 h3 內容<br>我們可以點擊更改的檔案查看哪邊有高亮，有代表變更的地方<br><img src="https://i.imgur.com/q086OIx.png"></p><p>提交後。高亮就會不見<br><img src="https://i.imgur.com/OfQeK2n.png"></p><p>再推送到遠端<br><code>git push origin 分支名稱</code><br><img src="https://i.imgur.com/KcZ8GBP.png"></p><p>到遠端切換到分支上查看，確實有剛新增的內容<br><img src="https://i.imgur.com/Zco4gdf.png"></p><h3 id="接下來要合併了"><a href="#接下來要合併了" class="headerlink" title="接下來要合併了"></a>接下來要合併了</h3><p><strong>切回 主支( main )</strong><br><img src="https://i.imgur.com/BrJ6tEq.png"></p><p>可以看到沒有 h2、h3 的內容<br>但再切回 dev1 分支查看是有的<br><img src="https://i.imgur.com/efIhab5.png"></p><p>合併時我們要先切到要被合併的那個分支上，可以用 <code>git branch</code> 確認高亮跟星號在哪，如下圖<br><img src="https://i.imgur.com/cvzd86T.png"><br><code>merge</code> 完後 dev1 的內容就會被新增到主支(main)上，然後就可以繼續做開發了</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://gitbook.tw/chapters/using-git/add-to-git.html">把檔案交給 Git 控管</a></p></body></html>]]></content>
    
    
    <summary type="html">介紹 Git 基本指令的操作</summary>
    
    
    
    <category term="Git" scheme="https://pktseng.github.io/categories/Git/"/>
    
    
    <category term="Git" scheme="https://pktseng.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>在 Windows 上安裝 WSL1</title>
    <link href="https://pktseng.github.io/2020/12/17/WSL/"/>
    <id>https://pktseng.github.io/2020/12/17/WSL/</id>
    <published>2020-12-16T16:00:00.000Z</published>
    <updated>2021-01-11T08:24:14.853Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>為了在 window 作業系統上執行 linux ，所以會需要安裝 WSL<br>WSL 又有分1 跟 2，1 的話較為簡單，以下只示範 WSL1</p><a id="more"></a><hr><h2 id="安裝-WSL1"><a href="#安裝-WSL1" class="headerlink" title="安裝 WSL1"></a>安裝 WSL1</h2><p>依照官網的<strong>手動安裝步驟</strong><br>用系統管理員身分開啟 PowerShell 並輸入:<br><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</code></p><p>如下圖<br><img src="https://i.imgur.com/FgEeIdc.jpg"></p><p>然後再依照說明跳到<strong>步驟6</strong>，到 Microsoft Store 搜尋 Ubuntu ，這邊選用 18.04 LTS 的版本<br><img src="https://i.imgur.com/VTHHBhF.jpg"></p><p>或是點選下面附上的連結也可以<br><img src="https://i.imgur.com/aPlBSSk.png"><br>安裝好後再開啟 <strong>Ubuntu 18.04 LTS</strong></p><p>如果開啟後看到以下訊息也不要慌張~<br>這代表我還未安裝 Windows 子系統</p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Installing, this may take a few minutes...</span><br><span class="line">WslRegisterDistribution failed with error: 0x8007019e</span><br><span class="line">The Windows Subsystem for Linux optional component is not enabled. Please enable it and try again.</span><br><span class="line">See https://aka.ms/wslinstall for details.</span><br><span class="line">Press any key to continue...</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/2H0A0Ww.png"></p><p>解決方法:<br>用系統管理員開啟 PowerShell ，並輸入以下指令<br><code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code><br><img src="https://i.imgur.com/wVsWMYa.png"></p><p><font color="#FF0000">這邊請不要急著按!!! 請先把該存檔的資料存檔在按 Y ，因為電腦會直接重新開機</font></p><p>重開後會顯示要輸入使用者名字跟密碼<br><font color="#FF0000">注意! 請不要輸入特殊字元，不然會叫你重新輸入</font><br>輸入密碼時會有第二次確認，而且螢幕不會顯示出來，所以請慢慢輸入~<br>完成後會顯示下圖:<br><img src="https://i.imgur.com/YMn39pB.png"></p><hr><h2 id="WSL2"><a href="#WSL2" class="headerlink" title="WSL2"></a>WSL2</h2><p>WSL2 官網有特別說明，若要更新至 WSL 2，必須是 <strong>Windows 10</strong>，除此之外組建編號必須是 <font color="#FF0000">18362.1049+</font> 或 <font color="#FF0000">18363.1049+</font>這兩種版本</p><p><img src="https://i.imgur.com/4GsUaf3.png"><br>確認 window 10 的版本號，確認方法是:<strong>按住 Windows + R 然後在對話方塊，接著輸入「winver」</strong><br>就會出現下圖<br><img src="https://i.imgur.com/mKs4ll2.png"></p><p>因我的組建編號不符，故不更新</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://docs.microsoft.com/zh-tw/windows/wsl/install-win10">Windows 10 上適用於 Linux 的 Windows 子系統安裝指南</a><br><a href="https://zhuanlan.zhihu.com/p/47541491">win10自带Bash安装的坑（Error Code: 0x8007019e，0x8000000D）</a><br><a href="https://ed521.github.io/2019/08/hexo-markdown/">撰寫 Hexo 文章 - Markdown 語法大全</a></p></body></html>]]></content>
    
    
    <summary type="html">在 window 作業系統下執行 linux 指令</summary>
    
    
    
    <category term="WSL1" scheme="https://pktseng.github.io/categories/WSL1/"/>
    
    
    <category term="WSL1" scheme="https://pktseng.github.io/tags/WSL1/"/>
    
  </entry>
  
  <entry>
    <title>安裝套件管理工具</title>
    <link href="https://pktseng.github.io/2020/12/16/cmder/"/>
    <id>https://pktseng.github.io/2020/12/16/cmder/</id>
    <published>2020-12-16T15:55:35.117Z</published>
    <updated>2021-01-11T08:24:39.666Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="作業系統"><a href="#作業系統" class="headerlink" title="作業系統"></a>作業系統</h2><ol><li>在 <strong>mac</strong> 上是用 <strong>homebrew</strong></li><li>在 <strong>Windwo</strong> 上是用 <strong>chocolatey</strong></li></ol><p>chocolatey 算是一個可以用指令來下載的打包工具，<br>安裝 chocolatey 方法也簡單，安裝工具的起手式是 <code>choco install</code> 後面打想要的工具名稱。</p><a id="more"></a><p>例如:</p><ul><li>要下載 JAVA =&gt; <code>choco install jdk8</code></li><li>要下載 cmder =&gt; <code>choco install cmder</code></li><li>要下載 docker =&gt; <code>choco install docker</code></li><li><del>要發大財 =&gt; <code>choco install 發大財</code></del></li><li>以此類推~</li></ul><hr><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>安裝方法可以用 <strong>cmd</strong> 跟 <strong>PowerShell</strong>，這邊示範用 PowerShell</p><p><a href="https://chocolatey.org/install">進入官網</a></p><p>官網 Chocolatey Install 那邊說明要用<strong>系統管理員</strong>的身分來執行，所以我們使用系統管理員身分開啟 PowerShell ，為了在安裝過程中可以不受限制又能提高安全性，所以我們使用<br><code>Get-ExecutionPolicy</code> 的指令來查看</p><p><img src="https://i.imgur.com/Ol2OOnv.png"></p><p>初次安裝會先看到 Restricted (google 翻譯是受限制的)，我們要改成 AllSigned ，所以要下<br><code>Set-ExecutionPolicy AllSigned</code> 的指令，過程中會問執行這項變更會有風險要不要變更，回 <strong>Y</strong></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PS C:\WINDOWS\system32&gt; Get-ExecutionPolicy</span><br><span class="line">RemoteSigned</span><br><span class="line">PS C:\WINDOWS\system32&gt; Set-ExecutionPolicy AllSigned</span><br><span class="line"></span><br><span class="line">執行原則變更</span><br><span class="line">執行原則有助於防範您不信任的指令碼。如果變更執行原則，可能會使您接觸到 about_Execution_Policies 說明主題 (網址為</span><br><span class="line">https:/go.microsoft.com/fwlink/?LinkID=135170) 中所述的安全性風險。您要變更執行原則嗎?</span><br><span class="line">[Y] 是(Y)  [A] 全部皆是(A)  [N] 否(N)  [L] 全部皆否(L)  [S] 暫停(S)  [?] 說明 (預設值為 "N"): y</span><br><span class="line"></span><br><span class="line">再下一次`Get-ExecutionPolicy`指令確認有沒有轉成 AllSigned</span><br><span class="line">PS C:\WINDOWS\system32&gt; Get-ExecutionPolicy</span><br><span class="line">AllSigned</span><br><span class="line">PS C:\WINDOWS\system32&gt;</span><br></pre></td></tr></tbody></table></figure><p>然後再複製:<br><code>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))</code></p><p><img src="https://i.imgur.com/V98mRMS.png"></p><p>然後下 <code>choco</code> 指令確認一下有沒有安裝好，正常會顯示 <code>Chocolatey v0.10.15</code> Chocolatey 後面帶版本號</p><hr><h2 id="安裝-cmder"><a href="#安裝-cmder" class="headerlink" title="安裝 cmder"></a>安裝 cmder</h2><p>如果想在 window 環境下使用 linux 指令，那就要需要用到 cmder，如上所說要用 cmder 工具就系統管理員開啟 powershell，然後下 <code>choco install cmder</code> 指令，就開始安裝了</p><p>安裝方法如下:<br><img src="https://i.imgur.com/TdOWbMk.png"></p><p>安裝過程中會問2次是否要安裝腳本，選 Y 安裝，裝好後會顯示工具放置的路徑</p><p><img src="https://i.imgur.com/WsvwzxQ.png"></p><p>依照顯示的路徑找到工具開啟就 ok 了!<br><img src="https://i.imgur.com/kP2y79J.png"><br><img src="https://i.imgur.com/cf2XbCt.png"></p><hr></body></html>]]></content>
    
    
    <summary type="html">用最懶人的方式教你安裝第三方套件，或是開發工具</summary>
    
    
    
    <category term="chocolatey" scheme="https://pktseng.github.io/categories/chocolatey/"/>
    
    
    <category term="chocolatey" scheme="https://pktseng.github.io/tags/chocolatey/"/>
    
    <category term="cmder" scheme="https://pktseng.github.io/tags/cmder/"/>
    
  </entry>
  
  <entry>
    <title>OWASP ZAP</title>
    <link href="https://pktseng.github.io/2020/12/15/ZAP/"/>
    <id>https://pktseng.github.io/2020/12/15/ZAP/</id>
    <published>2020-12-14T16:00:00.000Z</published>
    <updated>2021-01-11T08:24:10.511Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="ZAP-網頁滲透工具"><a href="#ZAP-網頁滲透工具" class="headerlink" title="ZAP 網頁滲透工具"></a>ZAP 網頁滲透工具</h2><p>ZAP 測試分兩種方法: GUI 介面測試跟 Docker 測試<br>到官網下載 <a href="https://www.zaproxy.org/download/">Cross Platform Package</a> 測試程式(此版本為 2.9.0)</p><a id="more"></a><h3 id="GUI-介面測試"><a href="#GUI-介面測試" class="headerlink" title="GUI 介面測試"></a>GUI 介面測試</h3><p>開啟 GUI 前要先安裝 <a href="https://www.oracle.com/tw/java/technologies/javase/javase-jdk8-downloads.html">jdk-8u271-windows-x64</a>，否則無法開啟，</p><p>安裝好後將 Cross Platform Package 資料夾內 ZAP_2.9.0 檔開啟<br><img src="https://i.imgur.com/stovEwL.png"><br><img src="https://i.imgur.com/Al98tGQ.png"></p><p>第一次開啟會問是否要將 session 存起來<br><img src="https://i.imgur.com/a8c3i5z.png"><br><a href="https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/">圖片來源: EPH 的程式日記</a></p><p>開啟後要先設定 report 的儲存位置，<br>這裡示範在桌面創建資料(report)夾並將檔名命名為 test<br><img src="https://i.imgur.com/Zeryray.png"></p><p>設定 ok 後，按下 Save</p><p>接下來左上角可以設定測試模式(這邊選用標準模式示範)，右邊視窗選擇掃描模式(這邊用自動掃描)<br><img src="https://i.imgur.com/jRxM6uQ.png"></p><p>選擇自動掃描後，在將要測試的網址寫入<br><img src="https://i.imgur.com/X8axeQO.png"></p><p>按下 Attack ，下面區塊就開始掃描了<br><img src="https://i.imgur.com/QRQpLS1.png"></p><p>測試完成，左邊旗子的顏色就是威脅的等級，以下測出我們有一個中威脅跟三個低威脅<br>(威脅等級分成高中低還有訊息，高威脅的旗子會是紅色的，中威脅的旗子是橘色，低威脅的旗子是黃色)<br><img src="https://i.imgur.com/Uv0BPEg.png"></p><p>點開其中一個威脅，右邊視窗會跳出(由上而下)威脅等級、問題描述、解法跟可以參考的資料<br><img src="https://i.imgur.com/MkQC55j.png"></p><p>然後再依照這些提示訊息加以修正</p><p>以上是使用 GUI 介面測試的示範</p><hr><h2 id="Docker-ZAP-測試"><a href="#Docker-ZAP-測試" class="headerlink" title="Docker ZAP 測試"></a>Docker ZAP 測試</h2><p>此測法較為詳細，<a href="https://www.zaproxy.org/docs/docker/">ZAP Docker Documentation</a><br>掃描方法分成兩種</p><h3 id="開啟虛擬機"><a href="#開啟虛擬機" class="headerlink" title="開啟虛擬機"></a>開啟虛擬機</h3><p><a href="https://ofeyhong.pixnet.net/blog/post/221133558">BIOS 開啟方法</a><br>因為要使用 docker 就要到 BIOS 開啟虛擬機，回到桌面開啟工作管理員/效能，確認虛擬機是否有開啟，如下圖<br><img src="https://i.imgur.com/xcDrs8C.png"></p><hr><h3 id="安裝環境"><a href="#安裝環境" class="headerlink" title="安裝環境"></a>安裝環境</h3><p><a href="https://www.docker.com/get-started">Docker 官網</a>下載 docker<br><img src="https://i.imgur.com/zOgNtC2.png"></p><p>安裝<br><img src="https://i.imgur.com/Savy4T5.png"></p><p>安裝好 docker 後，會要求重新開機</p><p>接下來要用 cmd 測試，指令可參考 <a href="https://www.zaproxy.org/docs/docker/about/">ZAP Docker User Guide</a><br>有穩定版跟每周更新版，這邊示範穩定版<br>開啟 cmd 安裝 docker zap: <code>docker pull owasp/zap2docker-stable</code></p><p>等大概5~10分鐘，安裝好後如下圖<br><img src="https://i.imgur.com/yr8ncmq.png"></p><p>這樣就可以開始測試了</p><hr><h3 id="Baseline-Scan"><a href="#Baseline-Scan" class="headerlink" title="Baseline Scan"></a>Baseline Scan</h3><p><a href="https://www.zaproxy.org/docs/docker/">ZAP Docker Documentation</a></p><p>如果只是單純測試的話可以參考官方給的範例:<br><code>docker run -t owasp/zap2docker-stable zap-baseline.py -t https://www.example.com</code></p><p>由於專案關係要將測試結果做成 report 並存到指定位置，所以將指令改寫成如下:<br><code>docker run -v C:\Users\ken.tseng\Desktop\zap:/zap/wrk/ -t owasp/zap2docker-stable zap-baseline.py -t https://xxxxxx.com/ -w report_md</code></p><p>將指令輸入並打開 docker ，確認是否有在 run<br><img src="https://i.imgur.com/TRDOX7S.png"><br>前面測試大概會花5~10分鐘左右，只要 docker 顯示 RUNNING 就代表有在 Run</p><p>以下為測結果</p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">PASS: Cookie No HttpOnly Flag [10010]</span><br><span class="line">PASS: Cookie Without Secure Flag [10011]</span><br><span class="line">PASS: Cross-Domain JavaScript Source File Inclusion [10017]</span><br><span class="line">PASS: Content-Type Header Missing [10019]</span><br><span class="line">PASS: X-Frame-Options Header [10020]</span><br><span class="line">PASS: Information Disclosure - Debug Error Messages [10023]</span><br><span class="line">PASS: Information Disclosure - Sensitive Information in URL [10024]</span><br><span class="line">PASS: Information Disclosure - Sensitive Information in HTTP Referrer Header [10025]</span><br><span class="line">PASS: HTTP Parameter Override [10026]</span><br><span class="line">PASS: Information Disclosure - Suspicious Comments [10027]</span><br><span class="line">PASS: Open Redirect [10028]</span><br><span class="line">PASS: Cookie Poisoning [10029]</span><br><span class="line">PASS: User Controllable Charset [10030]</span><br><span class="line">PASS: User Controllable HTML Element Attribute (Potential XSS) [10031]</span><br><span class="line">PASS: Viewstate [10032]</span><br><span class="line">PASS: Directory Browsing [10033]</span><br><span class="line">PASS: Heartbleed OpenSSL Vulnerability (Indicative) [10034]</span><br><span class="line">PASS: X-Backend-Server Header Information Leak [10039]</span><br><span class="line">PASS: Secure Pages Include Mixed Content [10040]</span><br><span class="line">PASS: HTTP to HTTPS Insecure Transition in Form Post [10041]</span><br><span class="line">PASS: HTTPS to HTTP Insecure Transition in Form Post [10042]</span><br><span class="line">PASS: User Controllable JavaScript Event (XSS) [10043]</span><br><span class="line">PASS: Big Redirect Detected (Potential Sensitive Information Leak) [10044]</span><br><span class="line">PASS: Retrieved from Cache [10050]</span><br><span class="line">PASS: X-ChromeLogger-Data (XCOLD) Header Information Leak [10052]</span><br><span class="line">PASS: Cookie Without SameSite Attribute [10054]</span><br><span class="line">PASS: X-Debug-Token Information Leak [10056]</span><br><span class="line">PASS: Username Hash Found [10057]</span><br><span class="line">PASS: X-AspNet-Version Response Header [10061]</span><br><span class="line">PASS: PII Disclosure [10062]</span><br><span class="line">PASS: Timestamp Disclosure [10096]</span><br><span class="line">PASS: Hash Disclosure [10097]</span><br><span class="line">PASS: Cross-Domain Misconfiguration [10098]</span><br><span class="line">PASS: Weak Authentication Method [10105]</span><br><span class="line">PASS: Reverse Tabnabbing [10108]</span><br><span class="line">PASS: Modern Web Application [10109]</span><br><span class="line">PASS: Absence of Anti-CSRF Tokens [10202]</span><br><span class="line">PASS: Private IP Disclosure [2]</span><br><span class="line">PASS: Session ID in URL Rewrite [3]</span><br><span class="line">PASS: Script Passive Scan Rules [50001]</span><br><span class="line">PASS: Insecure JSF ViewState [90001]</span><br><span class="line">PASS: Charset Mismatch [90011]</span><br><span class="line">PASS: Application Error Disclosure [90022]</span><br><span class="line">PASS: Loosely Scoped Cookie [90033]</span><br><span class="line">WARN-NEW: Incomplete or No Cache-control and Pragma HTTP Header Set [10015] x 1</span><br><span class="line">        https://xxxxxx.com/ (200 OK)</span><br><span class="line">WARN-NEW: X-Content-Type-Options Header Missing [10021] x 2</span><br><span class="line">        https://xxxxxx.com/ (200 OK)</span><br><span class="line">        https://xxxxxx.com/favicon.ico (200 OK)</span><br><span class="line">WARN-NEW: Strict-Transport-Security Header Not Set [10035] x 4</span><br><span class="line">        https://xxxxxx.com/ (200 OK)</span><br><span class="line">        https://xxxxxx.com/robots.txt (404 Not Found)</span><br><span class="line">        https://xxxxxx.com/sitemap.xml (404 Not Found)</span><br><span class="line">        https://xxxxxx.com/favicon.ico (200 OK)</span><br><span class="line">WARN-NEW: Server Leaks Version Information via "Server" HTTP Response Header Field [10036] x 4</span><br><span class="line">        https://xxxxxx.com/ (200 OK)</span><br><span class="line">        https://xxxxxx.com/robots.txt (404 Not Found)</span><br><span class="line">        https://xxxxxx.com/sitemap.xml (404 Not Found)</span><br><span class="line">        https://xxxxxx.com/favicon.ico (200 OK)</span><br><span class="line">WARN-NEW: Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s) [10037] x 4</span><br><span class="line">        https://xxxxxx.com/ (200 OK)</span><br><span class="line">        https://xxxxxx.com/robots.txt (404 Not Found)</span><br><span class="line">        https://xxxxxx.com/sitemap.xml (404 Not Found)</span><br><span class="line">        https://xxxxxx.com/favicon.ico (200 OK)</span><br><span class="line">WARN-NEW: Content Security Policy (CSP) Header Not Set [10038] x 1</span><br><span class="line">        https://xxxxxx.com/ (200 OK)</span><br><span class="line">WARN-NEW: CSP: Wildcard Directive [10055] x 2</span><br><span class="line">        https://xxxxxx.com/robots.txt (404 Not Found)</span><br><span class="line">        https://xxxxxx.com/sitemap.xml (404 Not Found)</span><br><span class="line">FAIL-NEW: 0     FAIL-INPROG: 0  WARN-NEW: 7     WARN-INPROG: 0  INFO: 0 IGNORE: 0PASS: 44</span><br></pre></td></tr></tbody></table></figure><p>測出結果有 7 項 WARN-NEW ，後面顯示有問題的項目提示，WARN-NEW 下面顯示的是有問題的 URL 有哪些，詳細的弱點描述跟解法資訊請看 report</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.zaproxy.org/docs/">官方文件</a><br><a href="https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/">用 OWASP ZAP 做滲透測試，找尋網站可能的弱點</a><br><a href="https://ephrain.net/pentest-%E7%94%A8-owasp-zap-%E5%81%9A%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6%EF%BC%8C%E6%89%BE%E5%B0%8B%E7%B6%B2%E7%AB%99%E5%8F%AF%E8%83%BD%E7%9A%84%E5%BC%B1%E9%BB%9E/">EPH 的程式日記</a></p></body></html>]]></content>
    
    
    <summary type="html">如何使用 ZAP 網頁滲透工具，測試網站的漏洞</summary>
    
    
    
    <category term="ZAP" scheme="https://pktseng.github.io/categories/ZAP/"/>
    
    
    <category term="OWASP" scheme="https://pktseng.github.io/tags/OWASP/"/>
    
  </entry>
  
  <entry>
    <title>用 Vue 做出頁面的 Loading 效果</title>
    <link href="https://pktseng.github.io/2020/12/13/Loading/"/>
    <id>https://pktseng.github.io/2020/12/13/Loading/</id>
    <published>2020-12-12T16:00:00.000Z</published>
    <updated>2021-01-11T07:44:03.999Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p><a href="https://github.com/ankurk91/vue-loading-overlay">vue-loading-overlay</a><br>首先安裝 npm: <code>npm install vue-loading-overlay</code><br>再到 main.js 載入</p><a id="more"></a><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Import component</span></span><br><span class="line"><span class="hljs-keyword">import</span> Loading <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-loading-overlay'</span>;</span><br><span class="line"><span class="hljs-comment">// Import stylesheet</span></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">'vue-loading-overlay/dist/vue-loading.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 因為是全域每個 component 都會用，所以用 Vue.component</span></span><br><span class="line">Vue.component(<span class="hljs-string">'Loading'</span>, Loading)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/NxbUi4i.png"></p><hr><h2 id="全域Loading"><a href="#全域Loading" class="headerlink" title="全域Loading"></a>全域Loading</h2><p>接下來要在 components 裡面加入讀取的判斷式跟綁定<br>先將 lading 預設好，只有在等待的時間下才會轉 <code> isLoading: false,</code></p><p><img src="https://i.imgur.com/cLak0kf.png"></p><p>然後把範例拿過來用 </p><p>在div 內一層加上 <code>&lt;loading :active.sync="isLoading"&gt;&lt;/loading&gt;</code></p><p><img src="https://i.imgur.com/kX4o8Kv.png"></p><p>接下來要在 AJAX 的行為上面新增 <code> isLoading: false,</code><br>在啟用 <code>getProducts</code> 的時候就會觸發 loading ( true )，在完成的時候結束( false )<br>範例如下:</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getProducts() {</span><br><span class="line">  <span class="hljs-keyword">const</span> api = <span class="hljs-string">`<span class="hljs-subst">${process.env.APIPATH}</span>/api/<span class="hljs-subst">${process.env.MYPATH}</span>/products`</span></span><br><span class="line">  <span class="hljs-built_in">this</span>.isLoading = <span class="hljs-literal">true</span></span><br><span class="line">  <span class="hljs-built_in">this</span>.$http.get(api).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> {</span><br><span class="line">    <span class="hljs-built_in">this</span>.products = response.data.products</span><br><span class="line">    <span class="hljs-built_in">this</span>.isLoading = <span class="hljs-literal">false</span></span><br><span class="line">  })</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>然後再重新整理，畫面中間就會出現 Loading 的效果，<br>再試試按下編輯或是新增然後直接按下確認也會有 Loading 的效果</p><p>這樣全域就完成了!!</p><hr><h2 id="局部-Loading"><a href="#局部-Loading" class="headerlink" title="局部 Loading"></a>局部 Loading</h2><p>再來要做局部的，我們要在新增或是編輯圖片那邊加上 loading 的效果</p><p>要加的地方在下圖紅框處<br><img src="https://i.imgur.com/SKEI2vd.png"></p><p>這邊偷懶一下直接用 CDN 載入 <a href="https://cdnjs.com/libraries/font-awesome">font-awesome</a> 到 index.html</p><p><img src="https://i.imgur.com/fszYHjw.png"><br><img src="https://i.imgur.com/jBEiM1M.png"></p><p>然後再到 <a href="https://fontawesome.com/how-to-use/on-the-web/styling/animating-icons">Animating Icons</a> 選一個自己喜歡的 loading 樣式<br>這邊用 <code>fa-spinner fa-spin</code> 作範例<br>因為要在上傳圖片的旁邊顯示 laoding 效果，所以我們把 <code>fa-spinner fa-spin</code> 加在 label 旁邊，</p><p><img src="https://i.imgur.com/t3XKdnP.png"></p><p>再到 data 函式加入決定局部 loading 的變數</p><p><img src="https://i.imgur.com/oQk38Gg.png"></p><p>再到模板那邊用 v-if 判斷做動態綁定</p><p><img src="https://i.imgur.com/doiggrR.png"></p><p>然後在上傳圖片的函示( uploadImg )內加入局部 loading 判斷</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">uploadImg() {</span><br><span class="line">    <span class="hljs-comment">// 在拉圖片進去讀取的時候 fileUpLoading 會是 true</span></span><br><span class="line">  <span class="hljs-built_in">this</span>.status.fileUpLoading =  <span class="hljs-literal">true</span></span><br><span class="line">  <span class="hljs-keyword">const</span> uploadFile = <span class="hljs-built_in">this</span>.$refs.files.files[<span class="hljs-number">0</span>]</span><br><span class="line">  <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> FormData()</span><br><span class="line">  formData.append(<span class="hljs-string">'file-to-upload'</span>, uploadFile)</span><br><span class="line">  <span class="hljs-comment">//接下來定義路徑</span></span><br><span class="line">  <span class="hljs-keyword">const</span> url = <span class="hljs-string">`<span class="hljs-subst">${process.env.APIPATH}</span>/api/<span class="hljs-subst">${process.env.MYPATH}</span>/admin/upload`</span></span><br><span class="line">  <span class="hljs-built_in">this</span>.$http</span><br><span class="line">    .post(url, formData, {</span><br><span class="line">      headers: {</span><br><span class="line">        <span class="hljs-string">'Content-Type'</span>: <span class="hljs-string">'multipart/form-data'</span></span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">    .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(res.data)</span><br><span class="line">      <span class="hljs-comment">// AJAX 結束後 fileUpLoading 就 false</span></span><br><span class="line">      <span class="hljs-built_in">this</span>.status.fileUpLoading = <span class="hljs-literal">false</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (res.data.success) {</span><br><span class="line">        <span class="hljs-comment">// this.tempProduct.imgUrl = res.data.imageUrl</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.tempProduct)</span><br><span class="line">        <span class="hljs-built_in">this</span>.$set(<span class="hljs-built_in">this</span>.tempProduct, <span class="hljs-string">'imgUrl'</span>, res.data.imageUrl)</span><br><span class="line">      }</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="資料來源-Vue-出電商網站"><a href="#資料來源-Vue-出電商網站" class="headerlink" title="資料來源: Vue 出電商網站"></a><a href="https://www.udemy.com/course/vue-hexschool/learn/lecture/10896746#questions">資料來源: Vue 出電商網站</a></h2></body></html>]]></content>
    
    
    <summary type="html">製作網頁局部或是全域的 Loading 效果</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://pktseng.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Router</title>
    <link href="https://pktseng.github.io/2020/08/30/router/"/>
    <id>https://pktseng.github.io/2020/08/30/router/</id>
    <published>2020-08-30T11:55:58.883Z</published>
    <updated>2021-01-11T08:24:25.296Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="新增路由路徑及連結"><a href="#新增路由路徑及連結" class="headerlink" title="新增路由路徑及連結"></a>新增路由路徑及連結</h2><p><a href="https://router.vuejs.org/zh/installation.html"> Vue-router:官方文件</a></p><p>透過切換網址來決定要顯示的組件內容，而切換網址就要用 router 來幫你達成!</p><a id="more"></a><p>在終端機切換到自己命名的資料夾並安裝 <code>npm install vue-router --save</code></p><p>到 index.js 引入 <code>Vue.use()</code> ，啟用路由功能</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></span><br><span class="line"><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span></span><br><span class="line"><span class="hljs-comment">//以上為官方元件</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 這邊路徑就是左邊檔案路徑，保險起見一律都不加 .vue 字尾!!!</span></span><br><span class="line"><span class="hljs-comment">// 路徑除了 from 要加入根目錄的 '@' 以外，其他地方不要加</span></span><br><span class="line"><span class="hljs-keyword">import</span> home <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/HelloWorld'</span></span><br><span class="line"><span class="hljs-keyword">import</span> page <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/pages/page'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter); <span class="hljs-comment">//路由啟用。這行很重要!!</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> VueRouter({</span><br><span class="line">  <span class="hljs-comment">// 這邊路徑是自訂的</span></span><br><span class="line">  routes: [</span><br><span class="line">    {</span><br><span class="line">      name: <span class="hljs-string">"元件呈現的名稱"</span>, </span><br><span class="line">      path: <span class="hljs-string">"對應的虛擬路徑"</span>, </span><br><span class="line">      component: 對應的元件, </span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      path: <span class="hljs-string">'/index'</span>,</span><br><span class="line">      name: <span class="hljs-string">'home'</span>,</span><br><span class="line">      component: home</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      path: <span class="hljs-string">'/page'</span>,</span><br><span class="line">      name: <span class="hljs-string">'page'</span>,</span><br><span class="line">      component: page</span><br><span class="line">    },</span><br><span class="line">    </span><br><span class="line">  ]</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><a href="export:">export 解釋</a><br>路由載入完啟用後，再到 main.js 載入路由配置</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></span><br><span class="line"><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./App'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">"./router"</span>; <span class="hljs-comment">//新增這行</span></span><br><span class="line">Vue.config.productionTip = <span class="hljs-literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">new</span> Vue({</span><br><span class="line">  el: <span class="hljs-string">'#app'</span>,</span><br><span class="line">  components: { App },</span><br><span class="line">  template: <span class="hljs-string">'&lt;App/&gt;'</span>,</span><br><span class="line">  router, <span class="hljs-comment">//跟這行</span></span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>這邊示範一下透過設定的路徑來顯示組件內容</p><p>因為首頁(HelloWorld.vue)的路徑(path)我定義為 /index ，<br>所以在網址上如果沒有輸入定義路徑會顯示下圖<br><img src="https://i.imgur.com/OpDIjWn.png"><br>可以看到，畫面只會顯示 app.vue 的圖片沒有其他內容，但如果在網址後面輸入 /index ，就會顯示下圖<br><img src="https://i.imgur.com/s8j7vel.png"><br>這樣就可以看到 HelloWorld.vue 的內容</p><hr><h4 id="接下來使用-BS4-套件，來快速顯示組件的內容"><a href="#接下來使用-BS4-套件，來快速顯示組件的內容" class="headerlink" title="接下來使用 BS4 套件，來快速顯示組件的內容"></a>接下來使用 BS4 套件，來快速顯示組件的內容</h4><p>首先，在 index.html 引入 <a href="https://getbootstrap.com/docs/4.4/getting-started/introduction/">BS4</a> cdn<br>有分頁才會有不同路徑，所以在 components 底下新增 pages 資料夾，裡面新增 page.vue<br><img src="https://i.imgur.com/u1kUcmR.png"></p><p>到 page.vue 新增模板記得在模板內加上 div (這邊用 hello 標籤示範)。<br>接著在標籤內貼上 BS4 套件(這邊用 card 套件示範)，<code>src</code> 裡面的 …記得刪除!!，不然會錯誤!!</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 18rem;"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">""</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card-img-top"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"..."</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card-body"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card-title"</span>&gt;</span>Card title<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card-text"</span>&gt;</span>Some quick example text to build on the card title and make up the bulk of the card's content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary"</span>&gt;</span>Go somewhere<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>再來要製做可以切換組件內容的 navbar<br>先把 app.vue 內容刪除，留下 app 標籤跟 router-view，img 也可以留下做分隔，<br>並在裡面套入 BS4 導覽列套件，然後把不要的內容刪掉並補上 vue 的連結標籤，這邊的連結已經不是&lt; a href=”#” &gt; 了，而是 <code>router-link</code> ，連結路徑用 <code>to</code> ，這個路徑是 index.js 裡面自定義的路徑，記得要寫 router-view 這樣才可以顯示組件，如下圖</p><blockquote><p>這邊說明一下 router-view：<br>router-view 是呈現 router/index.js 裡面的元件，<br>而 router/index.js 是設定各元件之間的連結</p></blockquote><p><img src="https://i.imgur.com/mJyGWw8.png"></p><p>完成後會看到畫面如下<br><img src="https://i.imgur.com/MkY1IT5.png"><br>沒有任何組件，因為網址還沒輸入任何自定義路徑</p><p>按一下 index，會顯示下圖<br><img src="https://i.imgur.com/qNPA2Nv.png"></p><p>按一下 page，會顯示下圖<br><img src="https://i.imgur.com/C7LFYrj.png"></p><hr><h2 id="製作巢狀路由頁面"><a href="#製作巢狀路由頁面" class="headerlink" title="製作巢狀路由頁面"></a>製作巢狀路由頁面</h2><p>接下來要做巢狀路由</p><p><strong>注意!!!!在巢狀裡面一律不加斜號 ‘/‘ !!!</strong></p><p><a href="https://dotblogs.com.tw/wasichris/2017/03/06/235449">參考文件</a><br>繼續在 pages 資料夾下新建立3個組件(這邊用 childX 示範)，然後再引入 BS4 套件的，只是要辨別而以所以用簡單的 alert 套件就好(其實是懶)</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">這是 child1 範本</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"alert alert-primary"</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"alert"</span>&gt;</span></span><br><span class="line">      child1</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgur.com/yWI4RJb.png"></p><p>因為我們要在 page 裡面切換 child 組件，所以先把 card 套件內的內容通通刪掉並補上 <code>router-view</code> </p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 18rem;"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>接下來要自定義路徑，但這是巢狀路徑，所以要在 page 底下加上 children，這 children 是使用陣列，裡面內容就跟外面的物件一樣，但在的第一個子元件的路徑可以是空直，這樣只要切到 page 頁面就會自動載入 child1 元件，子元件下陣列內的路徑也甭加 ‘/‘ ，直接寫路徑名字就好。<br>下面組件新增完後上面也要引入組件路徑。<br>範例如下：</p><figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></span><br><span class="line"><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span></span><br><span class="line"><span class="hljs-comment">//以上為官方元件</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 這邊路徑就是左邊檔案路徑</span></span><br><span class="line"><span class="hljs-keyword">import</span> home <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/HelloWorld'</span></span><br><span class="line"><span class="hljs-keyword">import</span> page <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/pages/page'</span></span><br><span class="line"><span class="hljs-keyword">import</span> child1 <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/pages/child1'</span></span><br><span class="line"><span class="hljs-keyword">import</span> child2 <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/pages/child2'</span></span><br><span class="line"><span class="hljs-keyword">import</span> child3 <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/pages/child3'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router) <span class="hljs-comment">// 路由啟用。這行很重要!!</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router({</span><br><span class="line">  <span class="hljs-comment">// 這邊路徑是自訂的</span></span><br><span class="line">  routes: [</span><br><span class="line">    {</span><br><span class="line">      path: <span class="hljs-string">'/index'</span>, <span class="hljs-comment">//對應的虛擬路徑</span></span><br><span class="line">      name: <span class="hljs-string">'home'</span>, <span class="hljs-comment">//元件呈現的名稱</span></span><br><span class="line">      component: home <span class="hljs-comment">//對應的元件</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      path: <span class="hljs-string">'/page'</span>, <span class="hljs-comment">//對應的虛擬路徑</span></span><br><span class="line">      name: <span class="hljs-string">'page'</span>,<span class="hljs-comment">//元件呈現的名稱</span></span><br><span class="line">      component: page,<span class="hljs-comment">//對應的元件</span></span><br><span class="line">      children: [</span><br><span class="line">        {</span><br><span class="line">          path: <span class="hljs-string">''</span>, <span class="hljs-comment">//對應的虛擬路徑</span></span><br><span class="line">          name: <span class="hljs-string">'child1'</span>,<span class="hljs-comment">//元件呈現的名稱</span></span><br><span class="line">          component: child1,<span class="hljs-comment">//對應的元件</span></span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          path: <span class="hljs-string">'child2'</span>,<span class="hljs-comment">//對應的虛擬路徑</span></span><br><span class="line">          name: <span class="hljs-string">'child2'</span>,<span class="hljs-comment">//元件呈現的名稱</span></span><br><span class="line">          component: child2,<span class="hljs-comment">//對應的元件</span></span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          path: <span class="hljs-string">'child3'</span>,<span class="hljs-comment">//對應的虛擬路徑</span></span><br><span class="line">          name: <span class="hljs-string">'child3'</span>,<span class="hljs-comment">//元件呈現的名稱</span></span><br><span class="line">          component: child3,<span class="hljs-comment">//對應的元件</span></span><br><span class="line">        },</span><br><span class="line">      ]</span><br><span class="line">    },</span><br><span class="line">  ]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>OK，到目前為止我們只要切換網址就可以看到 child 組件了，先試試 page 頁<br>我有在 app.vue 用 container 限制寬並置中<br><img src="https://i.imgur.com/VQac8sW.png"></p><p>可以看到目前在 page 頁，並自動帶入 child1<br>輸入 child2 如下圖<br><img src="https://i.imgur.com/Oo9tIoy.png"></p><p>接下來要在 page 頁面下新增子分頁的連結，</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/page/"</span>&gt;</span>child1<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/page/child2"</span>&gt;</span>child2<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/page/child3"</span>&gt;</span>child3<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="hljs-comment">&lt;!--     也可以用 v-bind 動態綁定 name 的方式來連結路徑，下面示範 --&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">"{ name: 'child3' }"</span>&gt;</span>child3<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 18rem;"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>結果如下圖，本想把 card 套件移除，但發現他剛好可以把 alert 套件框住不會滿版，就索性留著<br><img src="https://i.imgur.com/KsCUrFh.png"><br>然後注意網址!!!<br>在點擊子組件的時候就會切換到自訂義的網址，同時也顯示不同子頁面<br><img src="https://i.imgur.com/vEjYlxE.png"><br><img src="https://i.imgur.com/0hV0ukO.png"></p><hr><h3 id="參考資料："><a href="#參考資料：" class="headerlink" title="參考資料："></a>參考資料：</h3><h3 id="Vue-出電商網站"><a href="#Vue-出電商網站" class="headerlink" title="Vue 出電商網站"></a><a href="https://courses.hexschool.com/courses/670031/lectures/11949226">Vue 出電商網站</a></h3><h3 id="Vue-官方文件"><a href="#Vue-官方文件" class="headerlink" title="Vue 官方文件"></a><a href="https://router.vuejs.org/zh/guide/#html">Vue 官方文件</a></h3><h3 id="搞搞就懂部落格"><a href="#搞搞就懂部落格" class="headerlink" title="搞搞就懂部落格"></a><a href="https://dotblogs.com.tw/wasichris/2017/03/06/235449">搞搞就懂部落格</a></h3></body></html>]]></content>
    
    
    <summary type="html">介紹整個 Vue 骨架的重點，與解說</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="Router" scheme="https://pktseng.github.io/tags/Router/"/>
    
  </entry>
  
  <entry>
    <title>語法修飾</title>
    <link href="https://pktseng.github.io/2020/08/20/%E8%AA%9E%E6%B3%95%E4%BF%AE%E9%A3%BE/"/>
    <id>https://pktseng.github.io/2020/08/20/%E8%AA%9E%E6%B3%95%E4%BF%AE%E9%A3%BE/</id>
    <published>2020-08-20T04:20:59.360Z</published>
    <updated>2021-01-11T08:12:54.613Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="防止預設事件發生-preventDefault"><a href="#防止預設事件發生-preventDefault" class="headerlink" title="防止預設事件發生: preventDefault"></a>防止預設事件發生: preventDefault</h2><p>a 連結預設是開新分頁，但我想要點 a 連結就跳出 alert 同時又不要開新的分頁，這時候就要用 preventDefault 。<br>先偵聽一個事件 linkClick ，並給 linkClick 一個函式，點擊 a 連結時為了要取消預設行為(開新分頁)，所以在函式內新增 <code>e.preventDefault()</code>。</p><a id="more"></a><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> </span></span><br><span class="line"><span class="hljs-tag">   <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.google.com/"</span> </span></span><br><span class="line"><span class="hljs-tag">   <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> </span></span><br><span class="line"><span class="hljs-tag">   @<span class="hljs-attr">click</span>=<span class="hljs-string">"linkClick"</span></span></span><br><span class="line"><span class="hljs-tag">   &gt;</span></span><br><span class="line">    google</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">  el:<span class="hljs-string">"#app"</span>,</span></span><br><span class="line">  data:{</span><br><span class="line">  },</span><br><span class="line">  methods:{</span><br><span class="line">    linkClick(e){</span><br><span class="line">      e.preventDefault();</span><br><span class="line"><span class="hljs-javascript">      alert(<span class="hljs-string">"不開新頁面"</span>)</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/jOqNezw?editors=1010">codepen</a></p><p>這個方法會常常用在 form submit 上，因為原本預設行為是透過網頁讀取並取得網址資源，但我們會希望網頁不要重新讀取同時又可以取得網頁資源，這時就可以在 form 裡面呼叫 <code>e.preventDefault()</code> 。</p><hr><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>精簡寫法，直接在 click 後面加上 <code>prevent</code> 就結束了。</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> </span></span><br><span class="line"><span class="hljs-tag">   <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.google.com/"</span> </span></span><br><span class="line"><span class="hljs-tag">   <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> </span></span><br><span class="line"><span class="hljs-tag">   @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">"linkClick"</span></span></span><br><span class="line"><span class="hljs-tag">   &gt;</span></span><br><span class="line">    google</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">  el:<span class="hljs-string">"#app"</span>,</span></span><br><span class="line">  data:{</span><br><span class="line">  },</span><br><span class="line">  methods:{</span><br><span class="line">    linkClick(){</span><br><span class="line"><span class="hljs-javascript">      alert(<span class="hljs-string">"不開新頁面"</span>)</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/zYqObgv?editors=1010">codepen</a></p><hr><h2 id="防止子元件連動-stop、-self"><a href="#防止子元件連動-stop、-self" class="headerlink" title="防止子元件連動: stop、 self"></a>防止子元件連動: stop、 self</h2><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"msg = 'c'"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"msg = 'b'"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"msg = 'a'"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{msg}}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-css"><span class="hljs-selector-class">.box</span>{</span></span><br><span class="line">  display: inline-block;</span><br><span class="line">  min-width: 100px;</span><br><span class="line">  min-height: 100px;</span><br><span class="line">  padding: 30px;</span><br><span class="line">  border: 3px solid red;</span><br><span class="line">}</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">  el:<span class="hljs-string">"#app"</span>,</span></span><br><span class="line">  data:{</span><br><span class="line"><span class="hljs-javascript">    msg:<span class="hljs-string">''</span></span></span><br><span class="line">  },</span><br><span class="line">})</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/dyMbLyR?editors=1010">codepen</a></p><p><img src="https://i.imgur.com/xttduRm.png"></p><p>當我點擊最裡面正方形的時候會出現 c 而不是 a，原因是最裡面的 box 是最外面 box 的 children ，所以一旦點擊最裡面的 box 就會一層一層往上找到最外層的 box 。這時候就可以在 click 後面加上 stop 或是 self 來防止事件往上層找。</p><p><strong>1. stop 是調用event.stopPropagation() ，防止事件往上一層傳。<br>2. self 只當事件是從偵聽器綁定的元素本身觸發時才觸發回調，就是只有自己本身發出的不然不會觸發事件。假設 div 包了 100 層，事件是點擊第 2 層才會觸發，那就算我點擊外面第 1 層或是裡面的 3~100 層都是不會觸發的。</strong></p><p>範例如下：</p><figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span> @<span class="hljs-attr">click.self</span>=<span class="hljs-string">"msg = 'c'"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span> @<span class="hljs-attr">click.self</span>=<span class="hljs-string">"msg = 'b'"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">"msg = 'a'"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>{{msg}}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"><span class="hljs-css"><span class="hljs-selector-class">.box</span>{</span></span><br><span class="line">  display: inline-block;</span><br><span class="line">  min-width: 100px;</span><br><span class="line">  min-height: 100px;</span><br><span class="line">  padding: 30px;</span><br><span class="line">  border: 3px solid red;</span><br><span class="line">}</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">new</span> Vue({</span></span><br><span class="line"><span class="hljs-javascript">  el:<span class="hljs-string">"#app"</span>,</span></span><br><span class="line">  data:{</span><br><span class="line"><span class="hljs-javascript">    msg:<span class="hljs-string">''</span></span></span><br><span class="line">  },</span><br><span class="line">})</span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codepen.io/gleofgja/pen/GRZKLrB?editors=1010">codepen</a></p><hr><h2 id="參考資料-官方文件"><a href="#參考資料-官方文件" class="headerlink" title="參考資料: 官方文件"></a>參考資料: <a href="https://cn.vuejs.org/v2/api/#v-on">官方文件</a></h2><h2 id="參考資料-精通-VueJS-前端開發完全指南"><a href="#參考資料-精通-VueJS-前端開發完全指南" class="headerlink" title="參考資料:精通 VueJS 前端開發完全指南"></a><a href="https://hiskio.com/courses/145">參考資料:精通 VueJS 前端開發完全指南</a></h2></body></html>]]></content>
    
    
    <summary type="html">如何使用 preventDefault 來取消原本預設行為</summary>
    
    
    
    <category term="Vue" scheme="https://pktseng.github.io/categories/Vue/"/>
    
    
    <category term="preventDefault" scheme="https://pktseng.github.io/tags/preventDefault/"/>
    
    <category term="stop" scheme="https://pktseng.github.io/tags/stop/"/>
    
    <category term="self" scheme="https://pktseng.github.io/tags/self/"/>
    
  </entry>
  
</feed>
